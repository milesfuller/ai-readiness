// GraphQL Generated Types
// This is a placeholder file - normally generated by GraphQL Code Generator

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };

/** All built-in and custom scalars */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  DateTime: string;
  JSON: any;
  Upload: any;
};

export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  email: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  role: Scalars['String'];
  organizationId?: Maybe<Scalars['ID']>;
  organization?: Maybe<Organization>;
  sessions?: Maybe<Array<SurveySession>>;
  responses?: Maybe<Array<SurveyResponse>>;
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
};

export type Organization = {
  __typename?: 'Organization';
  id: Scalars['ID'];
  name: Scalars['String'];
  slug: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  users?: Maybe<Array<User>>;
  surveys?: Maybe<Array<Survey>>;
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
};

export enum SurveyStatus {
  Draft = 'DRAFT',
  Published = 'PUBLISHED',
  Paused = 'PAUSED',
  Archived = 'ARCHIVED'
}

export type Survey = {
  __typename?: 'Survey';
  id: Scalars['ID'];
  title: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  organizationId: Scalars['ID'];
  organization?: Maybe<Organization>;
  questions?: Maybe<Array<Question>>;
  responses?: Maybe<Array<SurveyResponse>>;
  analytics?: Maybe<SurveyAnalytics>;
  status: Scalars['String'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
};

export type Question = {
  __typename?: 'Question';
  id: Scalars['ID'];
  surveyId: Scalars['ID'];
  type: Scalars['String'];
  question: Scalars['String'];
  options?: Maybe<Scalars['JSON']>;
  required: Scalars['Boolean'];
  order: Scalars['Int'];
};

export type SurveyResponse = {
  __typename?: 'SurveyResponse';
  id: Scalars['ID'];
  surveyId: Scalars['ID'];
  survey?: Maybe<Survey>;
  sessionId?: Maybe<Scalars['ID']>;
  session?: Maybe<SurveySession>;
  userId?: Maybe<Scalars['ID']>;
  user?: Maybe<User>;
  answers: Scalars['JSON'];
  completed: Scalars['Boolean'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
};

export type SurveySession = {
  __typename?: 'SurveySession';
  id: Scalars['ID'];
  surveyId: Scalars['ID'];
  survey?: Maybe<Survey>;
  userId?: Maybe<Scalars['ID']>;
  user?: Maybe<User>;
  responses?: Maybe<Array<SurveyResponse>>;
  completed: Scalars['Boolean'];
  startedAt: Scalars['DateTime'];
  completedAt?: Maybe<Scalars['DateTime']>;
};

export type SurveyAnalytics = {
  __typename?: 'SurveyAnalytics';
  surveyId: Scalars['ID'];
  survey?: Maybe<Survey>;
  totalResponses: Scalars['Int'];
  completedResponses: Scalars['Int'];
  averageCompletionTime: Scalars['Float'];
  completionRate: Scalars['Float'];
  responsesByDate: Scalars['JSON'];
  questionAnalytics: Scalars['JSON'];
  demographicBreakdown: Scalars['JSON'];
  sentimentAnalysis: Scalars['JSON'];
  jtbdAnalysis: Scalars['JSON'];
};

export type SurveyTemplate = {
  __typename?: 'SurveyTemplate';
  id: Scalars['ID'];
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  questions: Scalars['JSON'];
  isPublic: Scalars['Boolean'];
  createdBy?: Maybe<Scalars['ID']>;
  organizationId?: Maybe<Scalars['ID']>;
  organization?: Maybe<Organization>;
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
};

export type Query = {
  __typename?: 'Query';
  // User queries
  me?: Maybe<User>;
  user?: Maybe<User>;
  users?: Maybe<Array<User>>;
  
  // Organization queries
  organization?: Maybe<Organization>;
  organizations?: Maybe<Array<Organization>>;
  
  // Survey queries
  survey?: Maybe<Survey>;
  surveys?: Maybe<Array<Survey>>;
  
  // Response queries
  responses?: Maybe<Array<SurveyResponse>>;
  
  // Analytics queries
  surveyAnalytics?: Maybe<SurveyAnalytics>;
  dashboardAnalytics?: Maybe<Scalars['JSON']>;
  
  // Template queries
  surveyTemplate?: Maybe<SurveyTemplate>;
  surveyTemplates?: Maybe<Array<SurveyTemplate>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  // Survey mutations
  createSurvey?: Maybe<Survey>;
  updateSurvey?: Maybe<Survey>;
  deleteSurvey?: Maybe<Scalars['JSON']>;
  
  // Response mutations
  submitResponse?: Maybe<SurveyResponse>;
  updateResponse?: Maybe<SurveyResponse>;
  
  // Template mutations
  createTemplate?: Maybe<SurveyTemplate>;
  updateTemplate?: Maybe<SurveyTemplate>;
  deleteTemplate?: Maybe<Scalars['JSON']>;
};

export type Subscription = {
  __typename?: 'Subscription';
  responseSubmitted?: Maybe<SurveyResponse>;
  sessionUpdated?: Maybe<SurveySession>;
  analysisCompleted?: Maybe<SurveyAnalytics>;
  surveyAnalysisCompleted?: Maybe<SurveyAnalytics>;
  systemNotification?: Maybe<Scalars['JSON']>;
  organizationNotification?: Maybe<Scalars['JSON']>;
};

export type Resolvers<ContextType = any> = {
  Query?: QueryResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  Subscription?: SubscriptionResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
  Organization?: OrganizationResolvers<ContextType>;
  Survey?: SurveyResolvers<ContextType>;
  SurveyResponse?: SurveyResponseResolvers<ContextType>;
  SurveyAnalytics?: SurveyAnalyticsResolvers<ContextType>;
  SurveyTemplate?: SurveyTemplateResolvers<ContextType>;
};

export type QueryResolvers<ContextType = any> = any;
export type MutationResolvers<ContextType = any> = any;
export type SubscriptionResolvers<ContextType = any> = any;
export type UserResolvers<ContextType = any> = any;
export type OrganizationResolvers<ContextType = any> = any;
export type SurveyResolvers<ContextType = any> = any;
export type SurveyResponseResolvers<ContextType = any> = any;
export type SurveyAnalyticsResolvers<ContextType = any> = any;
export type SurveyTemplateResolvers<ContextType = any> = any;