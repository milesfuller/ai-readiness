[{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/__tests__/api/export.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/__tests__/api/llm/analyze.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/__tests__/api/llm/batch.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/__tests__/components/auth/login.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/__tests__/components/auth/register.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/__tests__/components/survey/survey-question.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/__tests__/components/survey/voice-recorder.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/__tests__/jest-dom-types.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/__tests__/lib/hooks/use-auth.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/__tests__/lib/security/security.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/__tests__/mocks/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/__tests__/supabase/auth.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/__tests__/supabase/database.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/__tests__/types/global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/__tests__/types/mocks.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/__tests__/utils/mock-factories.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/admin/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/admin/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/admin/surveys/[id]/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":257,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9633,9717],"text":"The survey you&apos;re looking for doesn't exist or you don't have permission to view it."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9633,9717],"text":"The survey you&lsquo;re looking for doesn't exist or you don't have permission to view it."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9633,9717],"text":"The survey you&#39;re looking for doesn't exist or you don't have permission to view it."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9633,9717],"text":"The survey you&rsquo;re looking for doesn't exist or you don't have permission to view it."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":257,"column":65,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9633,9717],"text":"The survey you're looking for doesn&apos;t exist or you don't have permission to view it."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9633,9717],"text":"The survey you're looking for doesn&lsquo;t exist or you don't have permission to view it."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9633,9717],"text":"The survey you're looking for doesn&#39;t exist or you don't have permission to view it."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9633,9717],"text":"The survey you're looking for doesn&rsquo;t exist or you don't have permission to view it."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":257,"column":84,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9633,9717],"text":"The survey you're looking for doesn't exist or you don&apos;t have permission to view it."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9633,9717],"text":"The survey you're looking for doesn't exist or you don&lsquo;t have permission to view it."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9633,9717],"text":"The survey you're looking for doesn't exist or you don&#39;t have permission to view it."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9633,9717],"text":"The survey you're looking for doesn't exist or you don&rsquo;t have permission to view it."},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React, { useEffect, useState } from 'react'\nimport { useAuth } from '@/lib/auth/context'\nimport { useParams } from 'next/navigation'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { \n  ArrowLeft,\n  Calendar, \n  Users, \n  Clock,\n  Download,\n  Eye,\n  BarChart3,\n  FileText,\n  TrendingUp,\n  Target,\n  Shield,\n  Zap\n} from 'lucide-react'\nimport Link from 'next/link'\nimport { Survey, SurveyResponse, JTBDForces } from '@/lib/types'\nimport { Progress } from '@/components/ui/progress'\n\nexport default function SurveyDetailPage() {\n  const { user } = useAuth()\n  const params = useParams()\n  const surveyId = params.id as string\n  \n  const [survey, setSurvey] = useState<Survey | null>(null)\n  const [responses, setResponses] = useState<SurveyResponse[]>([])\n  const [analytics, setAnalytics] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const fetchSurveyData = async () => {\n      try {\n        // Mock data for demonstration\n        await new Promise(resolve => setTimeout(resolve, 1000))\n        \n        const mockSurvey: Survey = {\n          id: surveyId,\n          title: 'AI Readiness Insight Survey – Version D',\n          description: 'Structured around the Jobs To Be Done (JTBD) Forces of Progress. Open, reflective prompts to understand what\\'s pushing people away from the current state, pulling them toward new possibilities, and holding them back from change.',\n          status: 'active',\n          createdBy: 'admin@company.com',\n          organizationId: 'org1',\n          questions: [\n            // Force 1: Pain of the Old\n            {\n              id: 'q1',\n              type: 'text',\n              question: 'Tell us about a moment recently when your current tools, processes or ways of working got in the way of doing great work. What happened?',\n              required: true,\n              category: 'Force 1: Pain of the Old',\n              order: 1\n            },\n            {\n              id: 'q2',\n              type: 'text',\n              question: 'What parts of your work feel disproportionately time-consuming or effortful — especially compared to the value they deliver?',\n              required: true,\n              category: 'Force 1: Pain of the Old',\n              order: 2\n            },\n            // Force 2: Pull of the New\n            {\n              id: 'q3',\n              type: 'text',\n              question: 'If AI could work exactly how you needed it to, what would it unlock for you, your team, or your clients?',\n              required: true,\n              category: 'Force 2: Pull of the New',\n              order: 3\n            },\n            {\n              id: 'q4a',\n              type: 'text',\n              question: 'What\\'s one part of your work you\\'d love to make easier, faster, or more impactful — even if you\\'re not sure how AI could help yet?',\n              required: true,\n              category: 'Force 2: Pull of the New',\n              order: 4\n            },\n            {\n              id: 'q4b',\n              type: 'text',\n              question: 'If an AI assistant could take care of one thing for you brilliantly — no limitations — what would you hand over?',\n              required: true,\n              category: 'Force 2: Pull of the New',\n              order: 5\n            },\n            // Force 3: Anchors to the Old\n            {\n              id: 'q5',\n              type: 'text',\n              question: 'Even when better tools or ideas are available, what tends to keep things \\'business as usual\\' in your team or organisation?',\n              required: true,\n              category: 'Force 3: Anchors to the Old',\n              order: 6\n            },\n            {\n              id: 'q6',\n              type: 'text',\n              question: 'What would realistically stop someone in your team from trying a new AI tool tomorrow?',\n              required: true,\n              category: 'Force 3: Anchors to the Old',\n              order: 7\n            },\n            {\n              id: 'q7',\n              type: 'text',\n              question: 'Who needs to say yes (or stay quiet) for experimentation to happen?',\n              required: true,\n              category: 'Force 3: Anchors to the Old',\n              order: 8\n            },\n            // Force 4: Anxiety of the New\n            {\n              id: 'q8',\n              type: 'text',\n              question: 'When it comes to adopting new AI tools or ways of working, what concerns come up for you — emotionally, practically, or professionally?',\n              required: true,\n              category: 'Force 4: Anxiety of the New',\n              order: 9\n            },\n            {\n              id: 'q9',\n              type: 'text',\n              question: 'Have you ever tried an AI tool that left you feeling unsure, disappointed, or exposed? What happened?',\n              required: false,\n              category: 'Force 4: Anxiety of the New',\n              order: 10\n            },\n            // Experimentation\n            {\n              id: 'q10',\n              type: 'multiple_choice',\n              question: 'What role do you tend to play when your team is exploring something new?',\n              options: ['Observer', 'Cautious Tester', 'Curious Explorer', 'Experimentation Lead'],\n              required: true,\n              category: 'Attitude to Experimentation',\n              order: 11\n            },\n            {\n              id: 'q11',\n              type: 'scale',\n              question: 'How does experimenting with something new make you feel?',\n              required: true,\n              category: 'Attitude to Experimentation',\n              order: 12\n            }\n          ],\n          metadata: {\n            estimatedDuration: 15,\n            totalQuestions: 12,\n            completionRate: 78.5,\n            averageScore: 7.2\n          },\n          createdAt: '2024-01-15T10:00:00Z',\n          updatedAt: '2024-01-20T14:30:00Z'\n        }\n\n        const mockResponses: SurveyResponse[] = [\n          {\n            id: 'r1',\n            surveyId,\n            userId: 'user1',\n            answers: [\n              { questionId: 'q1', answer: 'Our current CRM system is slow and outdated. It takes 5 clicks to do what should take 1.', timeSpent: 120 },\n              { questionId: 'q3', answer: 'AI could help us analyze customer data patterns and predict needs before they ask.', timeSpent: 95 }\n            ],\n            status: 'completed',\n            startedAt: '2024-01-20T09:00:00Z',\n            completedAt: '2024-01-20T09:15:00Z',\n            metadata: {\n              userAgent: 'Mozilla/5.0...',\n              ipAddress: '192.168.1.1',\n              device: 'desktop',\n              completionTime: 15,\n              voiceInputUsed: false\n            }\n          }\n        ]\n\n        const mockAnalytics = {\n          totalResponses: 142,\n          completionRate: 78.5,\n          averageTime: 14.2,\n          forceAnalysis: {\n            push: 6.8, // Pain of the Old\n            pull: 8.2, // Pull of the New  \n            habit: 7.1, // Anchors to the Old\n            anxiety: 5.9 // Anxiety of the New\n          },\n          departmentBreakdown: {\n            'Engineering': 45,\n            'Marketing': 32,\n            'Sales': 28,\n            'Operations': 22,\n            'HR': 15\n          },\n          topThemes: [\n            { theme: 'Process Automation', mentions: 89 },\n            { theme: 'Data Analysis', mentions: 76 },\n            { theme: 'Customer Service', mentions: 54 },\n            { theme: 'Content Creation', mentions: 43 }\n          ]\n        }\n\n        setSurvey(mockSurvey)\n        setResponses(mockResponses)\n        setAnalytics(mockAnalytics)\n      } catch (error) {\n        console.error('Failed to fetch survey data:', error)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchSurveyData()\n  }, [surveyId])\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-500/20 text-green-400 border-green-500/30'\n      case 'completed': return 'bg-blue-500/20 text-blue-400 border-blue-500/30'\n      case 'draft': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30'\n      case 'archived': return 'bg-gray-500/20 text-gray-400 border-gray-500/30'\n      default: return 'bg-gray-500/20 text-gray-400 border-gray-500/30'\n    }\n  }\n\n  const getForceIcon = (category: string) => {\n    if (category.includes('Pain of the Old')) return <TrendingUp className=\"h-5 w-5 text-red-400\" />\n    if (category.includes('Pull of the New')) return <Target className=\"h-5 w-5 text-green-400\" />\n    if (category.includes('Anchors to the Old')) return <Shield className=\"h-5 w-5 text-yellow-400\" />\n    if (category.includes('Anxiety of the New')) return <Zap className=\"h-5 w-5 text-orange-400\" />\n    return <FileText className=\"h-5 w-5 text-blue-400\" />\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-teal-400\"></div>\n      </div>\n    )\n  }\n\n  if (!survey) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"glass-card\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Survey Not Found</CardTitle>\n            <CardDescription>The survey you're looking for doesn't exist or you don't have permission to view it.</CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-4\">\n        <Button variant=\"ghost\" size=\"sm\" asChild>\n          <Link href=\"/admin/surveys\">\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Link>\n        </Button>\n        <div className=\"flex-1\">\n          <h1 className=\"text-3xl font-bold text-white\">{survey.title}</h1>\n          <p className=\"text-gray-400 mt-1\">{survey.description}</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Badge className={getStatusColor(survey.status)}>\n            {survey.status.charAt(0).toUpperCase() + survey.status.slice(1)}\n          </Badge>\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"h-5 w-5 text-teal-400\" />\n              <div>\n                <p className=\"text-2xl font-bold text-white\">{analytics?.totalResponses || 0}</p>\n                <p className=\"text-sm text-gray-400\">Total Responses</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <BarChart3 className=\"h-5 w-5 text-green-400\" />\n              <div>\n                <p className=\"text-2xl font-bold text-white\">{analytics?.completionRate}%</p>\n                <p className=\"text-sm text-gray-400\">Completion Rate</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"h-5 w-5 text-purple-400\" />\n              <div>\n                <p className=\"text-2xl font-bold text-white\">{analytics?.averageTime}m</p>\n                <p className=\"text-sm text-gray-400\">Avg. Time</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"glass-card\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <FileText className=\"h-5 w-5 text-blue-400\" />\n              <div>\n                <p className=\"text-2xl font-bold text-white\">{survey.questions.length}</p>\n                <p className=\"text-sm text-gray-400\">Questions</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n        <TabsList className=\"grid grid-cols-4 w-full max-w-md\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"questions\">Questions</TabsTrigger>\n          <TabsTrigger value=\"responses\">Responses</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          {/* JTBD Forces Analysis */}\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">JTBD Forces Analysis</CardTitle>\n              <CardDescription>\n                Understanding the forces driving change based on survey responses\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <TrendingUp className=\"h-5 w-5 text-red-400\" />\n                      <span className=\"text-white font-medium\">Pain of the Old</span>\n                    </div>\n                    <span className=\"text-red-400 font-bold\">{analytics?.forceAnalysis?.push}/10</span>\n                  </div>\n                  <Progress \n                    value={analytics?.forceAnalysis?.push * 10} \n                    className=\"bg-gray-700 [&>div]:bg-red-400\" \n                  />\n                  <p className=\"text-sm text-gray-400\">\n                    Friction in current ways of working pushing users toward change\n                  </p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Target className=\"h-5 w-5 text-green-400\" />\n                      <span className=\"text-white font-medium\">Pull of the New</span>\n                    </div>\n                    <span className=\"text-green-400 font-bold\">{analytics?.forceAnalysis?.pull}/10</span>\n                  </div>\n                  <Progress \n                    value={analytics?.forceAnalysis?.pull * 10} \n                    className=\"bg-gray-700 [&>div]:bg-green-400\" \n                  />\n                  <p className=\"text-sm text-gray-400\">\n                    Attraction to the benefits of AI solutions\n                  </p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Shield className=\"h-5 w-5 text-yellow-400\" />\n                      <span className=\"text-white font-medium\">Anchors to the Old</span>\n                    </div>\n                    <span className=\"text-yellow-400 font-bold\">{analytics?.forceAnalysis?.habit}/10</span>\n                  </div>\n                  <Progress \n                    value={analytics?.forceAnalysis?.habit * 10} \n                    className=\"bg-gray-700 [&>div]:bg-yellow-400\" \n                  />\n                  <p className=\"text-sm text-gray-400\">\n                    What holds people in the current state\n                  </p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Zap className=\"h-5 w-5 text-orange-400\" />\n                      <span className=\"text-white font-medium\">Anxiety of the New</span>\n                    </div>\n                    <span className=\"text-orange-400 font-bold\">{analytics?.forceAnalysis?.anxiety}/10</span>\n                  </div>\n                  <Progress \n                    value={analytics?.forceAnalysis?.anxiety * 10} \n                    className=\"bg-gray-700 [&>div]:bg-orange-400\" \n                  />\n                  <p className=\"text-sm text-gray-400\">\n                    Concerns or uncertainty about switching\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Department Breakdown */}\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Responses by Department</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {Object.entries(analytics?.departmentBreakdown || {}).map(([dept, count]) => {\n                  const countNumber = Number(count)\n                  const maxCount = Math.max(...Object.values(analytics?.departmentBreakdown || {}).map(v => Number(v)))\n                  return (\n                    <div key={dept} className=\"flex items-center justify-between\">\n                      <span className=\"text-gray-300\">{dept}</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-20 bg-gray-700 rounded-full h-2\">\n                          <div \n                            className=\"bg-gradient-to-r from-teal-500 to-purple-500 h-2 rounded-full\"\n                            style={{ width: `${(countNumber / maxCount) * 100}%` }}\n                          ></div>\n                        </div>\n                        <span className=\"text-white font-medium w-8 text-right\">{countNumber}</span>\n                      </div>\n                    </div>\n                  )\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"questions\" className=\"space-y-4\">\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Survey Questions</CardTitle>\n              <CardDescription>\n                Questions organized by JTBD Forces of Progress\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {Object.entries(\n                  survey.questions.reduce((acc, q) => {\n                    if (!acc[q.category]) acc[q.category] = []\n                    acc[q.category].push(q)\n                    return acc\n                  }, {} as Record<string, any[]>)\n                ).map(([category, questions]) => (\n                  <div key={category} className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      {getForceIcon(category)}\n                      <h3 className=\"text-lg font-semibold text-white\">{category}</h3>\n                    </div>\n                    <div className=\"space-y-3 ml-7\">\n                      {questions.map((question, index) => (\n                        <div key={question.id} className=\"border-l-2 border-gray-600 pl-4\">\n                          <p className=\"text-sm text-gray-400\">Q{question.order}</p>\n                          <p className=\"text-white\">{question.question}</p>\n                          <div className=\"flex items-center space-x-2 mt-1\">\n                            <Badge variant=\"outline\">\n                              {question.type.replace('_', ' ')}\n                            </Badge>\n                            {question.required && (\n                              <Badge variant=\"outline\" className=\"text-red-400 border-red-400\">\n                                Required\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"responses\" className=\"space-y-4\">\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"text-white\">Survey Responses</CardTitle>\n                  <CardDescription>Individual response data and analytics</CardDescription>\n                </div>\n                <Button variant=\"outline\" size=\"sm\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export Responses\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8\">\n                <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-white mb-2\">Response Analytics</h3>\n                <p className=\"text-gray-400 mb-4\">\n                  Detailed response analysis and individual submissions will be displayed here.\n                </p>\n                <Button variant=\"outline\">\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  View Detailed Analytics\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <Card className=\"glass-card\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Top Themes & Insights</CardTitle>\n              <CardDescription>Key themes emerging from open-text responses</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {analytics?.topThemes?.map((theme: any, index: number) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                    <span className=\"text-white font-medium\">{theme.theme}</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm text-gray-400\">{theme.mentions} mentions</span>\n                      <div className=\"w-16 bg-gray-700 rounded-full h-2\">\n                        <div \n                          className=\"bg-gradient-to-r from-teal-500 to-purple-500 h-2 rounded-full\"\n                          style={{ width: `${(theme.mentions / Math.max(...analytics.topThemes.map((t: any) => t.mentions))) * 100}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/admin/surveys/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/admin/users/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/auth/signup/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/check-env/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/debug-auth/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/debug/env/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/export/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/llm/analyze/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/llm/batch/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/llm/cost-tracking/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/llm/organizational/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/minimal-signup/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/security/health/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/security/report/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/supabase-diagnostics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/test-auth/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/test-basic-signup/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/test-direct-auth/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/test-signup/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/api/test-supabase/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/auth/forgot-password/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":54,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2012,2153],"text":"\n              We&apos;ve sent you a password reset link. Please check your email and follow the instructions to reset your password.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2012,2153],"text":"\n              We&lsquo;ve sent you a password reset link. Please check your email and follow the instructions to reset your password.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2012,2153],"text":"\n              We&#39;ve sent you a password reset link. Please check your email and follow the instructions to reset your password.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2012,2153],"text":"\n              We&rsquo;ve sent you a password reset link. Please check your email and follow the instructions to reset your password.\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":83,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3330,3410],"text":"\n            Enter your email address and we&apos;ll send you a reset link\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3330,3410],"text":"\n            Enter your email address and we&lsquo;ll send you a reset link\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3330,3410],"text":"\n            Enter your email address and we&#39;ll send you a reset link\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3330,3410],"text":"\n            Enter your email address and we&rsquo;ll send you a reset link\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport { useState } from 'react'\nimport Link from 'next/link'\nimport { createClient } from '@/lib/supabase/client'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Brain, Mail, ArrowLeft } from 'lucide-react'\n\nexport default function ForgotPasswordPage() {\n  const [email, setEmail] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState(false)\n  const supabase = createClient()\n\n  const handleResetPassword = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/auth/reset-password`,\n      })\n\n      if (error) {\n        setError(error.message)\n      } else {\n        setSuccess(true)\n      }\n    } catch (err) {\n      setError('An unexpected error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (success) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-teal-50 via-purple-50 to-pink-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 p-4\">\n        <Card className=\"w-full max-w-md border-0 shadow-xl backdrop-blur-sm bg-white/80 dark:bg-gray-900/80\">\n          <CardHeader className=\"space-y-1 text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"p-3 rounded-full bg-green-100 dark:bg-green-900/20\">\n                <Mail className=\"h-8 w-8 text-green-600 dark:text-green-400\" />\n              </div>\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n              Check Your Email\n            </CardTitle>\n            <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n              We've sent you a password reset link. Please check your email and follow the instructions to reset your password.\n            </CardDescription>\n          </CardHeader>\n          <CardFooter>\n            <Link href=\"/auth/login\" className=\"w-full\">\n              <Button variant=\"outline\" className=\"w-full\">\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Back to Sign In\n              </Button>\n            </Link>\n          </CardFooter>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-teal-50 via-purple-50 to-pink-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 p-4\">\n      <Card className=\"w-full max-w-md border-0 shadow-xl backdrop-blur-sm bg-white/80 dark:bg-gray-900/80\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"p-3 rounded-full bg-purple-100 dark:bg-purple-900/20\">\n              <Brain className=\"h-8 w-8 text-purple-600 dark:text-purple-400\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold gradient-text\">\n            Reset Password\n          </CardTitle>\n          <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n            Enter your email address and we'll send you a reset link\n          </CardDescription>\n        </CardHeader>\n        \n        <form onSubmit={handleResetPassword}>\n          <CardContent className=\"space-y-4\">\n            {error && (\n              <div className=\"p-3 text-sm text-red-600 bg-red-50 dark:bg-red-900/20 dark:text-red-400 rounded-md border border-red-200 dark:border-red-800\">\n                {error}\n              </div>\n            )}\n            \n            <div className=\"space-y-2\">\n              <label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Email\n              </label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email address\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"pl-10\"\n                  required\n                />\n              </div>\n            </div>\n          </CardContent>\n          \n          <CardFooter className=\"flex flex-col space-y-4\">\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-purple-600 hover:bg-purple-700 text-white\"\n              disabled={loading}\n            >\n              {loading ? 'Sending Reset Link...' : 'Send Reset Link'}\n            </Button>\n            \n            <div className=\"text-center text-sm text-gray-600 dark:text-gray-400\">\n              Remember your password?{' '}\n              <Link \n                href=\"/auth/login\" \n                className=\"font-medium text-purple-600 hover:text-purple-700 dark:text-purple-400 dark:hover:text-purple-300\"\n              >\n                Sign in\n              </Link>\n            </div>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/auth/login/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":179,"column":16,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6278,6313],"text":"\n            Don&apos;t have an account?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6278,6313],"text":"\n            Don&lsquo;t have an account?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6278,6313],"text":"\n            Don&#39;t have an account?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6278,6313],"text":"\n            Don&rsquo;t have an account?"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React, { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport Link from 'next/link'\nimport { useRouter } from 'next/navigation'\nimport { Mail, Lock, Loader2, AlertCircle, CheckCircle2, Wifi, WifiOff } from 'lucide-react'\n\nimport { AuthLayout } from '@/components/auth/auth-layout'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { WhimsicalButton, SuccessCheckmark, FloatingHearts } from '@/components/ui/whimsy'\nimport { useAuth } from '@/lib/hooks/use-auth'\nimport { loginSchema, LoginFormData } from '@/lib/auth/schemas'\n\nexport default function LoginPage() {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [showSuccess, setShowSuccess] = useState(false)\n  const [showHearts, setShowHearts] = useState(false)\n  const [networkError, setNetworkError] = useState(false)\n  const { signIn } = useAuth()\n  const router = useRouter()\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors }\n  } = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    mode: 'onSubmit' // Only validate on submit, not on blur or change\n  })\n\n  const onSubmit = async (data: LoginFormData) => {\n    setIsLoading(true)\n    setError(null)\n    setNetworkError(false)\n\n    try {\n      console.log('[Login Page] Starting login for:', data.email)\n      const { error: authError } = await signIn(data.email, data.password)\n      \n      if (authError) {\n        console.error('[Login Page] Login error:', authError)\n        setError(authError.message)\n      } else {\n        console.log('[Login Page] Login successful, showing success state...')\n        setShowSuccess(true)\n        setShowHearts(true)\n        \n        // Give a brief moment for success animation, then redirect\n        // This is important for tests to see the success state\n        setTimeout(() => {\n          console.log('[Login Page] Redirecting to dashboard...')\n          router.push('/dashboard')\n        }, 500) // Brief delay for success animation\n      }\n    } catch (err: any) {\n      console.error('[Login Page] Unexpected error:', err)\n      \n      // Check if it's a network error\n      if (err.message?.includes('fetch') || err.message?.includes('network') || err.code === 'NETWORK_ERROR') {\n        setNetworkError(true)\n        setError('Network error. Please check your connection and try again.')\n      } else {\n        setError('An unexpected error occurred. Please try again.')\n      }\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <AuthLayout\n      title=\"Welcome Back\"\n      subtitle=\"Sign in to your AI Readiness account\"\n    >\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\" data-testid=\"login-form\">\n        {/* Error Messages */}\n        {error && (\n          <div className=\"flex items-center gap-2 p-3 rounded-lg bg-destructive/10 border border-destructive/20 text-destructive\" data-testid={networkError ? \"network-error\" : \"login-error\"} role=\"alert\">\n            {networkError ? <WifiOff className=\"h-4 w-4 flex-shrink-0\" /> : <AlertCircle className=\"h-4 w-4 flex-shrink-0\" />}\n            <p className=\"text-sm\">{error}</p>\n          </div>\n        )}\n\n        {/* Email Field */}\n        <div className=\"space-y-2\">\n          <Input\n            type=\"email\"\n            placeholder=\"Enter your email\"\n            leftIcon={Mail}\n            variant=\"glass\"\n            error={errors.email?.message}\n            data-testid=\"email-input\"\n            {...register('email')}\n          />\n          {errors.email && (\n            <div className=\"text-sm text-destructive\" data-testid=\"email-error\" role=\"alert\">\n              {errors.email.message}\n            </div>\n          )}\n        </div>\n\n        {/* Password Field */}\n        <div className=\"space-y-2\">\n          <Input\n            type=\"password\"\n            placeholder=\"Enter your password\"\n            leftIcon={Lock}\n            variant=\"glass\"\n            error={errors.password?.message}\n            data-testid=\"password-input\"\n            {...register('password')}\n          />\n          {errors.password && (\n            <div className=\"text-sm text-destructive\" data-testid=\"password-error\" role=\"alert\">\n              {errors.password.message}\n            </div>\n          )}\n        </div>\n\n        {/* Remember Me & Forgot Password */}\n        <div className=\"flex items-center justify-between\">\n          <label className=\"flex items-center space-x-2 cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              className=\"rounded border-white/20 bg-white/5 text-teal-500 focus:ring-teal-500 focus:ring-2\"\n              {...register('rememberMe')}\n            />\n            <span className=\"text-sm text-muted-foreground\">Remember me</span>\n          </label>\n          \n          <Link \n            href=\"/auth/reset-password\" \n            className=\"text-sm text-teal-400 hover:text-teal-300 transition-colors\"\n          >\n            Forgot password?\n          </Link>\n        </div>\n\n        {/* Submit Button */}\n        <div className=\"relative\">\n          {showSuccess ? (\n            <Button\n              type=\"button\"\n              variant=\"default\"\n              size=\"lg\"\n              className=\"w-full button-success animate-pulse\"\n              disabled\n            >\n              <div className=\"flex items-center space-x-2\">\n                <SuccessCheckmark show={true} size={16} />\n                <span>Welcome back! Redirecting...</span>\n              </div>\n            </Button>\n          ) : (\n            <Button\n              type=\"submit\"\n              variant=\"default\"\n              size=\"lg\"\n              className=\"w-full wobble-on-hover\"\n              disabled={isLoading}\n              loading={isLoading}\n              data-testid=\"login-submit\"\n            >\n              {isLoading ? 'Signing in...' : 'Sign In'}\n            </Button>\n          )}\n        </div>\n        \n        {/* Success Hearts */}\n        <FloatingHearts active={showHearts} count={6} />\n\n        {/* Sign Up Link */}\n        <div className=\"text-center pt-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            Don't have an account?{' '}\n            <Link \n              href=\"/auth/register\" \n              className=\"text-teal-400 hover:text-teal-300 transition-colors font-medium\"\n            >\n              Sign up\n            </Link>\n          </p>\n        </div>\n      </form>\n    </AuthLayout>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/auth/register/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":79,"column":15,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2393,2539],"text":"\n            We&apos;ve sent a verification link to your email address. Please check your inbox and click the link to activate your account.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2393,2539],"text":"\n            We&lsquo;ve sent a verification link to your email address. Please check your inbox and click the link to activate your account.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2393,2539],"text":"\n            We&#39;ve sent a verification link to your email address. Please check your inbox and click the link to activate your account.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2393,2539],"text":"\n            We&rsquo;ve sent a verification link to your email address. Please check your inbox and click the link to activate your account.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React, { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport Link from 'next/link'\nimport { useRouter } from 'next/navigation'\nimport { Mail, Lock, User, Building, AlertCircle, CheckCircle } from 'lucide-react'\n\nimport { AuthLayout } from '@/components/auth/auth-layout'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { useAuth } from '@/lib/hooks/use-auth'\nimport { registerSchema, RegisterFormData } from '@/lib/auth/schemas'\n\nexport default function RegisterPage() {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [success, setSuccess] = useState(false)\n  const { signUp } = useAuth()\n  const router = useRouter()\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors }\n  } = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema)\n  })\n\n  const onSubmit = async (data: RegisterFormData) => {\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      // Use the custom signup endpoint that handles profile creation\n      const response = await fetch('/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: data.email,\n          password: data.password,\n          firstName: data.firstName,\n          lastName: data.lastName,\n          organizationName: data.organizationName\n        })\n      })\n\n      const result = await response.json()\n      \n      if (!response.ok) {\n        setError(result.error || 'Signup failed')\n      } else {\n        setSuccess(true)\n        setTimeout(() => {\n          router.push('/auth/verify-email')\n        }, 2000)\n      }\n    } catch (err) {\n      setError('An unexpected error occurred. Please try again.')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  if (success) {\n    return (\n      <AuthLayout\n        title=\"Account Created!\"\n        subtitle=\"Check your email to verify your account\"\n      >\n        <div className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-green-500/10 rounded-full flex items-center justify-center\">\n            <CheckCircle className=\"h-8 w-8 text-green-400\" />\n          </div>\n          <p className=\"text-muted-foreground\">\n            We've sent a verification link to your email address. Please check your inbox and click the link to activate your account.\n          </p>\n          <Button\n            variant=\"ghost\"\n            onClick={() => router.push('/auth/login')}\n            className=\"w-full\"\n          >\n            Return to Sign In\n          </Button>\n        </div>\n      </AuthLayout>\n    )\n  }\n\n  return (\n    <AuthLayout\n      title=\"Create Account\"\n      subtitle=\"Join AI Readiness Assessment platform\"\n    >\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Error Message */}\n        {error && (\n          <div className=\"flex items-center gap-2 p-3 rounded-lg bg-destructive/10 border border-destructive/20 text-destructive\">\n            <AlertCircle className=\"h-4 w-4 flex-shrink-0\" />\n            <p className=\"text-sm\">{error}</p>\n          </div>\n        )}\n\n        {/* Name Fields */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <Input\n            type=\"text\"\n            placeholder=\"First name\"\n            leftIcon={User}\n            variant=\"glass\"\n            error={errors.firstName?.message}\n            {...register('firstName')}\n          />\n          <Input\n            type=\"text\"\n            placeholder=\"Last name\"\n            leftIcon={User}\n            variant=\"glass\"\n            error={errors.lastName?.message}\n            {...register('lastName')}\n          />\n        </div>\n\n        {/* Email Field */}\n        <div className=\"space-y-2\">\n          <Input\n            type=\"email\"\n            placeholder=\"Enter your email\"\n            leftIcon={Mail}\n            variant=\"glass\"\n            error={errors.email?.message}\n            {...register('email')}\n          />\n        </div>\n\n        {/* Organization Field */}\n        <div className=\"space-y-2\">\n          <Input\n            type=\"text\"\n            placeholder=\"Organization name (optional)\"\n            leftIcon={Building}\n            variant=\"glass\"\n            error={errors.organizationName?.message}\n            {...register('organizationName')}\n          />\n        </div>\n\n        {/* Password Fields */}\n        <div className=\"space-y-4\">\n          <Input\n            type=\"password\"\n            placeholder=\"Create password\"\n            leftIcon={Lock}\n            variant=\"glass\"\n            error={errors.password?.message}\n            {...register('password')}\n          />\n          <Input\n            type=\"password\"\n            placeholder=\"Confirm password\"\n            leftIcon={Lock}\n            variant=\"glass\"\n            error={errors.confirmPassword?.message}\n            {...register('confirmPassword')}\n          />\n        </div>\n\n        {/* Password Requirements */}\n        <div className=\"text-xs text-muted-foreground space-y-1\">\n          <p>Password must contain:</p>\n          <ul className=\"ml-4 space-y-1\">\n            <li>• At least 6 characters</li>\n            <li>• One uppercase letter</li>\n            <li>• One lowercase letter</li>\n            <li>• One number</li>\n          </ul>\n        </div>\n\n        {/* Terms & Privacy */}\n        <div className=\"text-xs text-muted-foreground\">\n          By creating an account, you agree to our{' '}\n          <Link href=\"/terms\" className=\"text-teal-400 hover:text-teal-300\">\n            Terms of Service\n          </Link>{' '}\n          and{' '}\n          <Link href=\"/privacy\" className=\"text-teal-400 hover:text-teal-300\">\n            Privacy Policy\n          </Link>\n        </div>\n\n        {/* Submit Button */}\n        <Button\n          type=\"submit\"\n          variant=\"default\"\n          size=\"lg\"\n          className=\"w-full\"\n          disabled={isLoading}\n          loading={isLoading}\n        >\n          {isLoading ? 'Creating account...' : 'Create Account'}\n        </Button>\n\n        {/* Sign In Link */}\n        <div className=\"text-center pt-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            Already have an account?{' '}\n            <Link \n              href=\"/auth/login\" \n              className=\"text-teal-400 hover:text-teal-300 transition-colors font-medium\"\n            >\n              Sign in\n            </Link>\n          </p>\n        </div>\n      </form>\n    </AuthLayout>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/auth/reset-password/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":109,"column":15,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3190,3343],"text":"\n            We&apos;ve sent password reset instructions to your email address. Please check your inbox and follow the link to reset your password.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3190,3343],"text":"\n            We&lsquo;ve sent password reset instructions to your email address. Please check your inbox and follow the link to reset your password.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3190,3343],"text":"\n            We&#39;ve sent password reset instructions to your email address. Please check your inbox and follow the link to reset your password.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3190,3343],"text":"\n            We&rsquo;ve sent password reset instructions to your email address. Please check your inbox and follow the link to reset your password.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React, { useState, useEffect, Suspense } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport Link from 'next/link'\nimport { useRouter, useSearchParams } from 'next/navigation'\nimport { Mail, Lock, ArrowLeft, CheckCircle, AlertCircle, RefreshCw } from 'lucide-react'\n\nimport { AuthLayout } from '@/components/auth/auth-layout'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { useAuth } from '@/lib/hooks/use-auth'\nimport { \n  resetPasswordSchema, \n  ResetPasswordFormData, \n  newPasswordSchema, \n  NewPasswordFormData \n} from '@/lib/auth/schemas'\n\nfunction ResetPasswordContent() {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [success, setSuccess] = useState(false)\n  const [isNewPassword, setIsNewPassword] = useState(false)\n  const { resetPassword, updatePassword } = useAuth()\n  const router = useRouter()\n  const searchParams = useSearchParams()\n\n  // Check if this is a password reset callback (has access_token)\n  useEffect(() => {\n    const accessToken = searchParams.get('access_token')\n    if (accessToken) {\n      setIsNewPassword(true)\n    }\n  }, [searchParams])\n\n  // Form for requesting password reset\n  const {\n    register: registerReset,\n    handleSubmit: handleSubmitReset,\n    formState: { errors: errorsReset }\n  } = useForm<ResetPasswordFormData>({\n    resolver: zodResolver(resetPasswordSchema)\n  })\n\n  // Form for setting new password\n  const {\n    register: registerNew,\n    handleSubmit: handleSubmitNew,\n    formState: { errors: errorsNew }\n  } = useForm<NewPasswordFormData>({\n    resolver: zodResolver(newPasswordSchema)\n  })\n\n  const onSubmitReset = async (data: ResetPasswordFormData) => {\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      const { error: authError } = await resetPassword(data.email)\n      \n      if (authError) {\n        setError(authError.message)\n      } else {\n        setSuccess(true)\n      }\n    } catch (err) {\n      setError('An unexpected error occurred. Please try again.')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const onSubmitNew = async (data: NewPasswordFormData) => {\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      const { error: authError } = await updatePassword(data.password)\n      \n      if (authError) {\n        setError(authError.message)\n      } else {\n        setSuccess(true)\n        setTimeout(() => {\n          router.push('/auth/login')\n        }, 2000)\n      }\n    } catch (err) {\n      setError('An unexpected error occurred. Please try again.')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  // Success state for email sent\n  if (success && !isNewPassword) {\n    return (\n      <AuthLayout\n        title=\"Check Your Email\"\n        subtitle=\"Password reset instructions sent\"\n      >\n        <div className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-teal-500/10 rounded-full flex items-center justify-center\">\n            <Mail className=\"h-8 w-8 text-teal-400\" />\n          </div>\n          <p className=\"text-muted-foreground\">\n            We've sent password reset instructions to your email address. Please check your inbox and follow the link to reset your password.\n          </p>\n          <div className=\"flex flex-col gap-2\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => router.push('/auth/login')}\n              className=\"w-full\"\n            >\n              Back to Sign In\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => setSuccess(false)}\n              className=\"w-full\"\n            >\n              Resend Email\n            </Button>\n          </div>\n        </div>\n      </AuthLayout>\n    )\n  }\n\n  // Success state for password updated\n  if (success && isNewPassword) {\n    return (\n      <AuthLayout\n        title=\"Password Updated!\"\n        subtitle=\"Your password has been successfully changed\"\n      >\n        <div className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-green-500/10 rounded-full flex items-center justify-center\">\n            <CheckCircle className=\"h-8 w-8 text-green-400\" />\n          </div>\n          <p className=\"text-muted-foreground\">\n            Your password has been successfully updated. You can now sign in with your new password.\n          </p>\n          <Button\n            onClick={() => router.push('/auth/login')}\n            className=\"w-full\"\n          >\n            Continue to Sign In\n          </Button>\n        </div>\n      </AuthLayout>\n    )\n  }\n\n  // New password form\n  if (isNewPassword) {\n    return (\n      <AuthLayout\n        title=\"Set New Password\"\n        subtitle=\"Enter your new password below\"\n      >\n        <form onSubmit={handleSubmitNew(onSubmitNew)} className=\"space-y-6\">\n          {/* Error Message */}\n          {error && (\n            <div className=\"flex items-center gap-2 p-3 rounded-lg bg-destructive/10 border border-destructive/20 text-destructive\">\n              <AlertCircle className=\"h-4 w-4 flex-shrink-0\" />\n              <p className=\"text-sm\">{error}</p>\n            </div>\n          )}\n\n          {/* Password Fields */}\n          <div className=\"space-y-4\">\n            <Input\n              type=\"password\"\n              placeholder=\"New password\"\n              leftIcon={Lock}\n              variant=\"glass\"\n              error={errorsNew.password?.message}\n              {...registerNew('password')}\n            />\n            <Input\n              type=\"password\"\n              placeholder=\"Confirm new password\"\n              leftIcon={Lock}\n              variant=\"glass\"\n              error={errorsNew.confirmPassword?.message}\n              {...registerNew('confirmPassword')}\n            />\n          </div>\n\n          {/* Password Requirements */}\n          <div className=\"text-xs text-muted-foreground space-y-1\">\n            <p>Password must contain:</p>\n            <ul className=\"ml-4 space-y-1\">\n              <li>• At least 6 characters</li>\n              <li>• One uppercase letter</li>\n              <li>• One lowercase letter</li>\n              <li>• One number</li>\n            </ul>\n          </div>\n\n          {/* Submit Button */}\n          <Button\n            type=\"submit\"\n            size=\"lg\"\n            className=\"w-full\"\n            disabled={isLoading}\n            loading={isLoading}\n          >\n            {isLoading ? 'Updating password...' : 'Update Password'}\n          </Button>\n        </form>\n      </AuthLayout>\n    )\n  }\n\n  // Reset password request form\n  return (\n    <AuthLayout\n      title=\"Reset Password\"\n      subtitle=\"Enter your email to receive reset instructions\"\n    >\n      <form onSubmit={handleSubmitReset(onSubmitReset)} className=\"space-y-6\">\n        {/* Error Message */}\n        {error && (\n          <div className=\"flex items-center gap-2 p-3 rounded-lg bg-destructive/10 border border-destructive/20 text-destructive\">\n            <AlertCircle className=\"h-4 w-4 flex-shrink-0\" />\n            <p className=\"text-sm\">{error}</p>\n          </div>\n        )}\n\n        {/* Email Field */}\n        <div className=\"space-y-2\">\n          <Input\n            type=\"email\"\n            placeholder=\"Enter your email\"\n            leftIcon={Mail}\n            variant=\"glass\"\n            error={errorsReset.email?.message}\n            {...registerReset('email')}\n          />\n        </div>\n\n        {/* Submit Button */}\n        <Button\n          type=\"submit\"\n          size=\"lg\"\n          className=\"w-full\"\n          disabled={isLoading}\n          loading={isLoading}\n        >\n          {isLoading ? 'Sending instructions...' : 'Send Reset Instructions'}\n        </Button>\n\n        {/* Back to Sign In */}\n        <div className=\"text-center pt-4\">\n          <Link \n            href=\"/auth/login\"\n            className=\"inline-flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground transition-colors\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Sign In\n          </Link>\n        </div>\n      </form>\n    </AuthLayout>\n  )\n}\n\nexport default function ResetPasswordPage() {\n  return (\n    <Suspense fallback={\n      <AuthLayout\n        title=\"Loading...\"\n        subtitle=\"Please wait\"\n      >\n        <div className=\"text-center\">\n          <RefreshCw className=\"h-8 w-8 text-teal-400 animate-spin mx-auto\" />\n        </div>\n      </AuthLayout>\n    }>\n      <ResetPasswordContent />\n    </Suspense>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/auth/verify-email/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":153,"column":15,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4667,4811],"text":"\n            We&apos;ve sent a verification link to your email address. Please check your inbox and click the link to verify your account.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4667,4811],"text":"\n            We&lsquo;ve sent a verification link to your email address. Please check your inbox and click the link to verify your account.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4667,4811],"text":"\n            We&#39;ve sent a verification link to your email address. Please check your inbox and click the link to verify your account.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4667,4811],"text":"\n            We&rsquo;ve sent a verification link to your email address. Please check your inbox and click the link to verify your account.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":156,"column":16,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4871,4975],"text":"\n            Don&apos;t see the email? Check your spam folder or click the button below to resend.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4871,4975],"text":"\n            Don&lsquo;t see the email? Check your spam folder or click the button below to resend.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4871,4975],"text":"\n            Don&#39;t see the email? Check your spam folder or click the button below to resend.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4871,4975],"text":"\n            Don&rsquo;t see the email? Check your spam folder or click the button below to resend.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React, { useState, useEffect, Suspense } from 'react'\nimport Link from 'next/link'\nimport { useRouter, useSearchParams } from 'next/navigation'\nimport { Mail, CheckCircle, AlertCircle, RefreshCw } from 'lucide-react'\n\nimport { AuthLayout } from '@/components/auth/auth-layout'\nimport { Button } from '@/components/ui/button'\nimport { supabase } from '@/lib/supabase/client'\n\nfunction VerifyEmailContent() {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [success, setSuccess] = useState(false)\n  const [verifying, setVerifying] = useState(false)\n  const router = useRouter()\n  const searchParams = useSearchParams()\n\n  // Check for verification tokens on mount\n  useEffect(() => {\n    const handleEmailVerification = async () => {\n      const token = searchParams.get('token')\n      const type = searchParams.get('type')\n\n      if (token && type === 'signup') {\n        setVerifying(true)\n        try {\n          const { error } = await supabase.auth.verifyOtp({\n            token_hash: token,\n            type: 'signup'\n          })\n\n          if (error) {\n            setError(error.message)\n          } else {\n            setSuccess(true)\n            setTimeout(() => {\n              router.push('/dashboard')\n            }, 3000)\n          }\n        } catch (err) {\n          setError('Failed to verify email. Please try again.')\n        } finally {\n          setVerifying(false)\n        }\n      }\n    }\n\n    handleEmailVerification()\n  }, [searchParams, router])\n\n  const resendVerification = async () => {\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      // Note: This would typically require the user's email\n      // In a real app, you might store it in localStorage or session\n      const email = localStorage.getItem('pendingVerificationEmail')\n      \n      if (!email) {\n        setError('No email found for verification. Please register again.')\n        return\n      }\n\n      const { error } = await supabase.auth.resend({\n        type: 'signup',\n        email\n      })\n\n      if (error) {\n        setError(error.message)\n      } else {\n        // Show success message briefly\n        setSuccess(true)\n        setTimeout(() => setSuccess(false), 3000)\n      }\n    } catch (err) {\n      setError('Failed to resend verification email. Please try again.')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  // Verification in progress\n  if (verifying) {\n    return (\n      <AuthLayout\n        title=\"Verifying Email\"\n        subtitle=\"Please wait while we verify your email address\"\n      >\n        <div className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-teal-500/10 rounded-full flex items-center justify-center\">\n            <RefreshCw className=\"h-8 w-8 text-teal-400 animate-spin\" />\n          </div>\n          <p className=\"text-muted-foreground\">\n            Verifying your email address...\n          </p>\n        </div>\n      </AuthLayout>\n    )\n  }\n\n  // Verification successful\n  if (success && !error) {\n    return (\n      <AuthLayout\n        title=\"Email Verified!\"\n        subtitle=\"Your account has been successfully verified\"\n      >\n        <div className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-green-500/10 rounded-full flex items-center justify-center\">\n            <CheckCircle className=\"h-8 w-8 text-green-400\" />\n          </div>\n          <p className=\"text-muted-foreground\">\n            Your email has been verified successfully. You will be redirected to the dashboard shortly.\n          </p>\n          <Button\n            onClick={() => router.push('/dashboard')}\n            className=\"w-full\"\n          >\n            Continue to Dashboard\n          </Button>\n        </div>\n      </AuthLayout>\n    )\n  }\n\n  // Default state - waiting for verification\n  return (\n    <AuthLayout\n      title=\"Verify Your Email\"\n      subtitle=\"Check your inbox and click the verification link\"\n    >\n      <div className=\"text-center space-y-6\">\n        {/* Email Icon */}\n        <div className=\"mx-auto w-16 h-16 bg-teal-500/10 rounded-full flex items-center justify-center\">\n          <Mail className=\"h-8 w-8 text-teal-400\" />\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"flex items-center gap-2 p-3 rounded-lg bg-destructive/10 border border-destructive/20 text-destructive\">\n            <AlertCircle className=\"h-4 w-4 flex-shrink-0\" />\n            <p className=\"text-sm\">{error}</p>\n          </div>\n        )}\n\n        {/* Instructions */}\n        <div className=\"space-y-2\">\n          <p className=\"text-muted-foreground\">\n            We've sent a verification link to your email address. Please check your inbox and click the link to verify your account.\n          </p>\n          <p className=\"text-sm text-muted-foreground\">\n            Don't see the email? Check your spam folder or click the button below to resend.\n          </p>\n        </div>\n\n        {/* Actions */}\n        <div className=\"space-y-3\">\n          <Button\n            onClick={resendVerification}\n            variant=\"outline\"\n            className=\"w-full\"\n            disabled={isLoading}\n            loading={isLoading}\n          >\n            {isLoading ? 'Resending...' : 'Resend Verification Email'}\n          </Button>\n\n          <Button\n            variant=\"ghost\"\n            onClick={() => router.push('/auth/login')}\n            className=\"w-full\"\n          >\n            Back to Sign In\n          </Button>\n        </div>\n\n        {/* Help */}\n        <div className=\"text-xs text-muted-foreground\">\n          <p>\n            Having trouble?{' '}\n            <Link href=\"/support\" className=\"text-teal-400 hover:text-teal-300\">\n              Contact support\n            </Link>\n          </p>\n        </div>\n      </div>\n    </AuthLayout>\n  )\n}\n\nexport default function VerifyEmailPage() {\n  return (\n    <Suspense fallback={\n      <AuthLayout\n        title=\"Loading...\"\n        subtitle=\"Please wait\"\n      >\n        <div className=\"text-center\">\n          <RefreshCw className=\"h-8 w-8 text-teal-400 animate-spin mx-auto\" />\n        </div>\n      </AuthLayout>\n    }>\n      <VerifyEmailContent />\n    </Suspense>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/dashboard/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":54,"column":62,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1875,1937],"text":"! Here&apos;s your organization's AI readiness overview.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1875,1937],"text":"! Here&lsquo;s your organization's AI readiness overview.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1875,1937],"text":"! Here&#39;s your organization's AI readiness overview.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1875,1937],"text":"! Here&rsquo;s your organization's AI readiness overview.\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":54,"column":82,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1875,1937],"text":"! Here's your organization&apos;s AI readiness overview.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1875,1937],"text":"! Here's your organization&lsquo;s AI readiness overview.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1875,1937],"text":"! Here's your organization&#39;s AI readiness overview.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1875,1937],"text":"! Here's your organization&rsquo;s AI readiness overview.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { redirect } from 'next/navigation'\nimport { createClient } from '@/lib/supabase/server'\nimport { MainLayout } from '@/components/layout/main-layout'\nimport { Button, Card, CardHeader, CardTitle, CardContent, StatsCard, CircularProgress, Progress } from '@/components/ui'\nimport { AnimatedCounter } from '@/components/ui/whimsy'\nimport { Brain, Users, TrendingUp, Clock, CheckCircle2, BarChart3, Sparkles, Trophy, Zap } from 'lucide-react'\n\n// Mock user data for demonstration\nconst mockUser = {\n  id: '1',\n  email: 'john.doe@company.com',\n  role: 'org_admin' as const,\n  organizationId: 'org-1',\n  profile: {\n    id: 'profile-1',\n    userId: '1',\n    firstName: 'John',\n    lastName: 'Doe',\n    avatar: undefined,\n    department: 'IT Leadership',\n    jobTitle: 'Director of Technology',\n    preferences: {\n      theme: 'dark' as const,\n      notifications: true,\n      voiceInput: true,\n      language: 'en'\n    }\n  },\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-08-01T00:00:00Z',\n  lastLogin: '2024-08-02T19:00:00Z'\n}\n\nexport default async function DashboardPage() {\n  const supabase = await createClient()\n  const { data: { user } } = await supabase.auth.getUser()\n\n  if (!user) {\n    redirect('/auth/login')\n  }\n\n  return (\n    <MainLayout user={mockUser} currentPath=\"/dashboard\">\n      <div className=\"space-y-8\">\n        {/* Page Header */}\n        <div className=\"space-y-2 animate-in slide-in-from-top duration-1000\">\n          <div className=\"flex items-center space-x-3\">\n            <h1 className=\"text-4xl font-bold gradient-text\">\n              AI Readiness Dashboard\n            </h1>\n            <Sparkles className=\"h-8 w-8 text-yellow-400 animate-pulse\" />\n          </div>\n          <p className=\"text-muted-foreground text-lg animate-in slide-in-from-top duration-1000 delay-200\">\n            Welcome back, {mockUser.profile?.firstName}! Here's your organization's AI readiness overview.\n          </p>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <div className=\"animate-in slide-in-from-left duration-700 delay-100\">\n            <StatsCard\n              title=\"Total Surveys\"\n              value={<AnimatedCounter value={247} duration={2000} />}\n              description=\"Active assessments\"\n              icon={Brain}\n              className=\"stats-card-hover\"\n              trend={{\n                value: 12,\n                label: \"vs last month\",\n                direction: \"up\"\n              }}\n            />\n          </div>\n          <div className=\"animate-in slide-in-from-left duration-700 delay-200\">\n            <StatsCard\n              title=\"Completion Rate\"\n              value={<AnimatedCounter value={89} suffix=\"%\" duration={2000} />}\n              description=\"Survey completions\"\n              icon={CheckCircle2}\n              className=\"stats-card-hover\"\n              trend={{\n                value: 5,\n                label: \"improvement\",\n                direction: \"up\"\n              }}\n            />\n          </div>\n          <div className=\"animate-in slide-in-from-left duration-700 delay-300\">\n            <StatsCard\n              title=\"Active Users\"\n              value={<AnimatedCounter value={156} duration={2000} />}\n              description=\"Organization members\"\n              icon={Users}\n              className=\"stats-card-hover\"\n              trend={{\n                value: 8,\n                label: \"new this week\",\n                direction: \"up\"\n              }}\n            />\n          </div>\n          <div className=\"animate-in slide-in-from-left duration-700 delay-400\">\n            <StatsCard\n              title=\"Avg. Time\"\n              value={<AnimatedCounter value={18} suffix=\" min\" duration={2000} />}\n              description=\"Per assessment\"\n              icon={Clock}\n              className=\"stats-card-hover\"\n              trend={{\n                value: 2,\n                label: \"faster\",\n                direction: \"down\"\n              }}\n            />\n          </div>\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* AI Readiness Score */}\n          <Card variant=\"glass\" className=\"lg:col-span-1 animate-in zoom-in duration-1000 delay-500 whimsy-hover\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"h-5 w-5 text-teal-400 animate-pulse\" />\n                <span>Overall AI Readiness</span>\n                <Trophy className=\"h-4 w-4 text-yellow-400\" />\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"flex flex-col items-center space-y-4\">\n              <div className=\"celebrate-bounce\">\n                <CircularProgress\n                  value={73}\n                  size={140}\n                  strokeWidth={10}\n                />\n              </div>\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Your organization shows <span className=\"text-teal-400 font-medium animate-pulse\">strong readiness</span> for AI adoption\n                </p>\n                <Button variant=\"outline\" size=\"sm\" className=\"wobble-on-hover\">\n                  View Detailed Analysis\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Recent Activity */}\n          <Card variant=\"glass\" className=\"lg:col-span-2 animate-in slide-in-from-right duration-1000 delay-300\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <BarChart3 className=\"h-5 w-5 text-purple-400 animate-pulse\" />\n                <span>JTBD Forces Analysis</span>\n                <Zap className=\"h-4 w-4 text-yellow-400\" />\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Force indicators */}\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"font-medium\">Pull of New Solutions</span>\n                    <span className=\"text-teal-400\">8.2/10</span>\n                  </div>\n                  <Progress value={82} variant=\"gradient\" />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"font-medium\">Pain of Current State</span>\n                    <span className=\"text-orange-400\">7.1/10</span>\n                  </div>\n                  <Progress value={71} />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"font-medium\">Anxiety of Change</span>\n                    <span className=\"text-red-400\">4.8/10</span>\n                  </div>\n                  <Progress value={48} />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"font-medium\">Anchor to Current</span>\n                    <span className=\"text-blue-400\">3.9/10</span>\n                  </div>\n                  <Progress value={39} />\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t border-border/40\">\n                <Button variant=\"secondary\" className=\"w-full\">\n                  Generate Detailed Report\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Action Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div className=\"animate-in slide-in-from-bottom duration-700 delay-100\">\n            <Card variant=\"interactive\" className=\"cursor-pointer whimsy-hover\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-3 rounded-lg bg-teal-500/10 border border-teal-500/20 transition-all duration-300 hover:scale-110\">\n                    <Brain className=\"h-6 w-6 text-teal-400\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold\">Take Assessment</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Start your AI readiness survey\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"animate-in slide-in-from-bottom duration-700 delay-200\">\n            <Card variant=\"interactive\" className=\"cursor-pointer whimsy-hover\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-3 rounded-lg bg-purple-500/10 border border-purple-500/20 transition-all duration-300 hover:scale-110\">\n                    <Users className=\"h-6 w-6 text-purple-400\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold\">Team Analytics</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      View organization insights\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"animate-in slide-in-from-bottom duration-700 delay-300\">\n            <Card variant=\"interactive\" className=\"cursor-pointer whimsy-hover\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-3 rounded-lg bg-pink-500/10 border border-pink-500/20 transition-all duration-300 hover:scale-110\">\n                    <BarChart3 className=\"h-6 w-6 text-pink-400\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold\">Export Reports</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Download analysis data\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </MainLayout>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/debug/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/survey/[sessionId]/complete/page.tsx","messages":[{"ruleId":"@next/next/no-async-client-component","severity":1,"message":"Prevent client components from being async functions. See: https://nextjs.org/docs/messages/no-async-client-component","line":98,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":450,"endColumn":2},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useRouter\" cannot be called in an async function.","line":100,"column":18,"nodeType":"Identifier","endLine":100,"endColumn":27},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" cannot be called in an async function.","line":101,"column":51,"nodeType":"Identifier","endLine":101,"endColumn":59},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" cannot be called in an async function.","line":102,"column":41,"nodeType":"Identifier","endLine":102,"endColumn":49},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" cannot be called in an async function.","line":103,"column":43,"nodeType":"Identifier","endLine":103,"endColumn":51},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" cannot be called in an async function.","line":104,"column":39,"nodeType":"Identifier","endLine":104,"endColumn":47},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" cannot be called in an async function.","line":105,"column":47,"nodeType":"Identifier","endLine":105,"endColumn":55},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" cannot be called in an async function.","line":107,"column":3,"nodeType":"Identifier","endLine":107,"endColumn":12}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { MainLayout } from '@/components/layout/main-layout'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { Progress, CircularProgress } from '@/components/ui/progress'\nimport { \n  Confetti, \n  FloatingHearts, \n  SuccessCheckmark, \n  WhimsicalLoading, \n  AnimatedCounter,\n  Typewriter \n} from '@/components/ui/whimsy'\nimport { \n  CheckCircle2, \n  Brain, \n  Clock, \n  Download, \n  Mail, \n  Share2,\n  BarChart3,\n  TrendingUp,\n  Award,\n  Eye,\n  Calendar,\n  Sparkles,\n  Zap,\n  Heart,\n  Trophy\n} from 'lucide-react'\nimport { surveyCategories, surveyQuestions } from '@/lib/data/survey-questions'\n\ninterface Props {\n  params: Promise<{ sessionId: string }>\n}\n\nconst mockUser = {\n  id: '1',\n  email: 'john.doe@company.com',\n  role: 'user' as const,\n  organizationId: 'org-1',\n  profile: {\n    id: 'profile-1',\n    userId: '1',\n    firstName: 'John',\n    lastName: 'Doe',\n    avatar: undefined,\n    department: 'Product Management',\n    jobTitle: 'Senior Product Manager',\n    preferences: {\n      theme: 'dark' as const,\n      notifications: true,\n      voiceInput: true,\n      language: 'en'\n    }\n  },\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-08-01T00:00:00Z',\n  lastLogin: '2024-08-02T19:00:00Z'\n}\n\n// Mock analysis results based on JTBD framework\nconst mockAnalysisResults = {\n  overallScore: 73,\n  completionTime: '18 minutes',\n  categoriesAnalyzed: 4,\n  totalQuestions: 12,\n  completionDate: new Date().toISOString(),\n  \n  categoryScores: {\n    pain_of_old: { score: 82, strength: 'High', trend: 'up' },\n    pull_of_new: { score: 78, strength: 'High', trend: 'up' },\n    anchors_to_old: { score: 65, strength: 'Medium', trend: 'neutral' },\n    anxiety_of_new: { score: 69, strength: 'Medium', trend: 'down' }\n  },\n  \n  keyInsights: [\n    'Strong motivation for change driven by current inefficiencies',\n    'Clear vision of AI benefits and competitive advantages',\n    'Moderate concerns about implementation complexity',\n    'Healthy awareness of challenges while maintaining optimism'\n  ],\n  \n  recommendations: [\n    'Start with high-impact, low-risk AI pilot projects',\n    'Invest in change management and training programs',\n    'Establish clear governance and ethical guidelines',\n    'Focus on augmentation rather than replacement strategies'\n  ],\n  \n  readinessLevel: 'Ready with Preparation',\n  confidenceLevel: 85\n}\n\nexport default async function SurveyCompletePage({ params }: Props) {\n  const resolvedParams = await params\n  const router = useRouter()\n  const [analysisComplete, setAnalysisComplete] = useState(false)\n  const [showResults, setShowResults] = useState(false)\n  const [showConfetti, setShowConfetti] = useState(true)\n  const [showHearts, setShowHearts] = useState(true)\n  const [showTypewriter, setShowTypewriter] = useState(false)\n\n  useEffect(() => {\n    // Initial celebration\n    setShowConfetti(true)\n    setShowHearts(true)\n    \n    // Stop initial celebration\n    setTimeout(() => {\n      setShowConfetti(false)\n      setShowHearts(false)\n    }, 4000)\n    \n    // Simulate AI analysis processing\n    const timer = setTimeout(() => {\n      setAnalysisComplete(true)\n      setShowTypewriter(true)\n      setTimeout(() => {\n        setShowResults(true)\n        // Celebration for results reveal\n        setShowConfetti(true)\n        setTimeout(() => setShowConfetti(false), 3000)\n      }, 1000)\n    }, 3000)\n\n    return () => clearTimeout(timer)\n  }, [])\n\n  const getCategoryColor = (categoryId: string) => {\n    const category = surveyCategories.find(c => c.id === categoryId)\n    return category?.color || 'text-gray-400'\n  }\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return 'text-green-400'\n    if (score >= 60) return 'text-yellow-400'\n    return 'text-red-400'\n  }\n\n  const downloadReport = () => {\n    // Mock download functionality\n    console.log('Downloading comprehensive report...')\n  }\n\n  const shareResults = () => {\n    // Mock sharing functionality\n    console.log('Sharing results...')\n  }\n\n  const viewDashboard = () => {\n    router.push('/dashboard')\n  }\n\n  const scheduleFollowUp = () => {\n    // Mock scheduling functionality\n    console.log('Scheduling follow-up...')\n  }\n\n  return (\n    <MainLayout user={mockUser} currentPath={`/survey/${resolvedParams.sessionId}/complete`}>\n      <div className=\"max-w-4xl mx-auto space-y-8\">\n        {/* Celebration Effects */}\n        <Confetti \n          active={showConfetti} \n          intensity=\"high\" \n          duration={4000}\n          colors={['#14b8a6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981', '#3b82f6']}\n        />\n        <FloatingHearts active={showHearts} count={12} />\n        \n        {/* Header */}\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-20 h-20 mx-auto rounded-full bg-green-500/20 flex items-center justify-center celebrate-bounce\">\n            <SuccessCheckmark show={true} size={40} />\n          </div>\n          <h1 className=\"text-4xl font-bold gradient-text animate-in slide-in-from-bottom-4 duration-1000\">\n            {showTypewriter ? (\n              <Typewriter \n                text=\"Assessment Complete!\" \n                speed={100}\n              />\n            ) : (\n              \"Assessment Complete!\"\n            )}\n          </h1>\n          <div className=\"flex items-center justify-center space-x-2 animate-in slide-in-from-bottom-4 duration-1000 delay-300\">\n            <Sparkles className=\"h-5 w-5 text-yellow-400 animate-pulse\" />\n            <p className=\"text-xl text-muted-foreground\">\n              Thank you for completing the AI Readiness Assessment\n            </p>\n            <Heart className=\"h-5 w-5 text-pink-400 animate-pulse\" />\n          </div>\n        </div>\n\n        {/* Analysis Status */}\n        {!analysisComplete ? (\n          <Card variant=\"glass\" className=\"p-8 text-center animate-in fade-in duration-1000 delay-500\">\n            <div className=\"space-y-6\">\n              <div className=\"w-16 h-16 mx-auto voice-recording-pulse\">\n                <CircularProgress \n                  value={75}\n                  size={64}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <h3 className=\"text-xl font-semibold\">Analyzing Your Responses</h3>\n                <WhimsicalLoading />\n              </div>\n              <div className=\"bg-teal-950/20 border border-teal-500/20 rounded-lg p-4 shimmer\">\n                <div className=\"flex items-center justify-center space-x-2\">\n                  <Zap className=\"h-4 w-4 text-teal-400 animate-pulse\" />\n                  <p className=\"text-sm text-teal-400\">\n                    Using advanced JTBD framework analysis to evaluate your AI readiness\n                  </p>\n                  <Brain className=\"h-4 w-4 text-purple-400 animate-pulse\" />\n                </div>\n              </div>\n            </div>\n          </Card>\n        ) : (\n          showResults && (\n            <div className=\"space-y-6\">\n              {/* Overall Score */}\n              <Card variant=\"gradient\" className=\"p-8 text-center animate-in zoom-in duration-1000 whimsy-hover\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-center space-x-2\">\n                    <Trophy className=\"h-6 w-6 text-yellow-400 animate-bounce\" />\n                    <h2 className=\"text-2xl font-bold\">Your AI Readiness Score</h2>\n                    <Sparkles className=\"h-6 w-6 text-purple-400 animate-spin\" />\n                  </div>\n                  <div className=\"flex items-center justify-center space-x-8\">\n                    <div className=\"text-center\">\n                      <div className=\"celebrate-bounce\">\n                        <CircularProgress \n                          value={mockAnalysisResults.overallScore}\n                          size={120}\n                        />\n                      </div>\n                      <p className=\"mt-2 text-sm text-muted-foreground\">Overall Readiness</p>\n                    </div>\n                    <div className=\"text-left space-y-2\">\n                      <div className=\"flex items-center space-x-2 animate-in slide-in-from-right duration-700 delay-200\">\n                        <Clock className=\"h-4 w-4 text-teal-400\" />\n                        <span className=\"text-sm\">Completed in {mockAnalysisResults.completionTime}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2 animate-in slide-in-from-right duration-700 delay-400\">\n                        <Award className=\"h-4 w-4 text-teal-400\" />\n                        <span className=\"text-sm\">{mockAnalysisResults.readinessLevel}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2 animate-in slide-in-from-right duration-700 delay-600\">\n                        <TrendingUp className=\"h-4 w-4 text-teal-400\" />\n                        <span className=\"text-sm\">\n                          <AnimatedCounter value={mockAnalysisResults.confidenceLevel} suffix=\"% Confidence\" />\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n\n              {/* Category Breakdown */}\n              <Card variant=\"glass\" className=\"p-6\">\n                <CardHeader className=\"px-0 pt-0\">\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Brain className=\"h-5 w-5 text-teal-400\" />\n                    <span>JTBD Framework Analysis</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"px-0 pb-0\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    {Object.entries(mockAnalysisResults.categoryScores).map(([categoryId, data]) => {\n                      const category = surveyCategories.find(c => c.id === categoryId)\n                      if (!category) return null\n\n                      return (\n                        <div key={categoryId} className=\"space-y-3\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"text-lg\">{category.icon}</span>\n                              <span className=\"font-medium\">{category.label}</span>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className={`font-bold ${getScoreColor(data.score)}`}>\n                                {data.score}%\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                {data.strength}\n                              </div>\n                            </div>\n                          </div>\n                          <Progress value={data.score} variant=\"gradient\" className=\"h-2\" />\n                          <p className=\"text-sm text-muted-foreground\">\n                            {category.description}\n                          </p>\n                        </div>\n                      )\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Key Insights */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card variant=\"glass\" className=\"p-6\">\n                  <CardHeader className=\"px-0 pt-0\">\n                    <CardTitle className=\"text-lg\">Key Insights</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"px-0 pb-0\">\n                    <ul className=\"space-y-3\">\n                      {mockAnalysisResults.keyInsights.map((insight, index) => (\n                        <li key={index} className=\"flex items-start space-x-2\">\n                          <CheckCircle2 className=\"h-4 w-4 text-teal-400 mt-0.5 flex-shrink-0\" />\n                          <span className=\"text-sm\">{insight}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </CardContent>\n                </Card>\n\n                <Card variant=\"glass\" className=\"p-6\">\n                  <CardHeader className=\"px-0 pt-0\">\n                    <CardTitle className=\"text-lg\">Recommendations</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"px-0 pb-0\">\n                    <ul className=\"space-y-3\">\n                      {mockAnalysisResults.recommendations.map((recommendation, index) => (\n                        <li key={index} className=\"flex items-start space-x-2\">\n                          <TrendingUp className=\"h-4 w-4 text-purple-400 mt-0.5 flex-shrink-0\" />\n                          <span className=\"text-sm\">{recommendation}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Action Buttons */}\n              <Card variant=\"glass\" className=\"p-6\">\n                <CardHeader className=\"px-0 pt-0\">\n                  <CardTitle className=\"text-lg\">Next Steps</CardTitle>\n                </CardHeader>\n                <CardContent className=\"px-0 pb-0\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                    <Button\n                      onClick={downloadReport}\n                      variant=\"default\"\n                      className=\"w-full wobble-on-hover\"\n                      leftIcon={Download}\n                    >\n                      Download Report\n                    </Button>\n                    \n                    <Button\n                      onClick={shareResults}\n                      variant=\"outline\"\n                      className=\"w-full wobble-on-hover\"\n                      leftIcon={Share2}\n                    >\n                      Share Results\n                    </Button>\n                    \n                    <Button\n                      onClick={viewDashboard}\n                      variant=\"secondary\"\n                      className=\"w-full wobble-on-hover\"\n                      leftIcon={Eye}\n                    >\n                      View Dashboard\n                    </Button>\n                    \n                    <Button\n                      onClick={scheduleFollowUp}\n                      variant=\"ghost\"\n                      className=\"w-full wobble-on-hover\"\n                      leftIcon={Calendar}\n                    >\n                      Schedule Follow-up\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Detailed Results Preview */}\n              <Card variant=\"glass\" className=\"p-6\">\n                <CardHeader className=\"px-0 pt-0\">\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <BarChart3 className=\"h-5 w-5 text-teal-400\" />\n                    <span>Detailed Analysis Preview</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"px-0 pb-0\">\n                  <div className=\"bg-muted/30 rounded-lg p-4 text-center\">\n                    <p className=\"text-muted-foreground mb-4\">\n                      Your comprehensive analysis includes:\n                    </p>\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                      <div className=\"animate-in fade-in duration-500 delay-100\">\n                        <div className=\"font-bold text-teal-400\">\n                          <AnimatedCounter value={12} duration={1500} />\n                        </div>\n                        <div>Questions Analyzed</div>\n                      </div>\n                      <div className=\"animate-in fade-in duration-500 delay-200\">\n                        <div className=\"font-bold text-purple-400\">\n                          <AnimatedCounter value={4} duration={1500} />\n                        </div>\n                        <div>JTBD Categories</div>\n                      </div>\n                      <div className=\"animate-in fade-in duration-500 delay-300\">\n                        <div className=\"font-bold text-pink-400\">\n                          <AnimatedCounter value={15} suffix=\"+\" duration={1500} />\n                        </div>\n                        <div>Key Insights</div>\n                      </div>\n                      <div className=\"animate-in fade-in duration-500 delay-400\">\n                        <div className=\"font-bold text-green-400\">\n                          <AnimatedCounter value={8} duration={1500} />\n                        </div>\n                        <div>Recommendations</div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Email Notification */}\n              <Card variant=\"glass\" className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <Mail className=\"h-8 w-8 text-teal-400\" />\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold\">Results Sent to Your Email</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      A comprehensive report has been sent to {mockUser.email}. \n                      Check your inbox for detailed insights and next steps.\n                    </p>\n                  </div>\n                  <CheckCircle2 className=\"h-6 w-6 text-green-400\" />\n                </div>\n              </Card>\n            </div>\n          )\n        )}\n      </div>\n    </MainLayout>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/survey/[sessionId]/page.tsx","messages":[{"ruleId":"@next/next/no-async-client-component","severity":1,"message":"Prevent client components from being async functions. See: https://nextjs.org/docs/messages/no-async-client-component","line":77,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":586,"endColumn":2},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useRouter\" cannot be called in an async function.","line":79,"column":18,"nodeType":"Identifier","endLine":79,"endColumn":27},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" cannot be called in an async function.","line":80,"column":59,"nodeType":"Identifier","endLine":80,"endColumn":67},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" cannot be called in an async function.","line":81,"column":33,"nodeType":"Identifier","endLine":81,"endColumn":41},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" cannot be called in an async function.","line":82,"column":41,"nodeType":"Identifier","endLine":82,"endColumn":49},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" cannot be called in an async function.","line":83,"column":39,"nodeType":"Identifier","endLine":83,"endColumn":47},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" cannot be called in an async function.","line":84,"column":37,"nodeType":"Identifier","endLine":84,"endColumn":45},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" cannot be called in an async function.","line":85,"column":53,"nodeType":"Identifier","endLine":85,"endColumn":61},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" cannot be called in an async function.","line":86,"column":33,"nodeType":"Identifier","endLine":86,"endColumn":41},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" cannot be called in an async function.","line":87,"column":43,"nodeType":"Identifier","endLine":87,"endColumn":51},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" cannot be called in an async function.","line":88,"column":57,"nodeType":"Identifier","endLine":88,"endColumn":65},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" cannot be called in an async function.","line":89,"column":65,"nodeType":"Identifier","endLine":89,"endColumn":73},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useState\" cannot be called in an async function.","line":90,"column":49,"nodeType":"Identifier","endLine":90,"endColumn":57},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useRef\" cannot be called in an async function.","line":92,"column":26,"nodeType":"Identifier","endLine":92,"endColumn":32},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useRef\" cannot be called in an async function.","line":93,"column":27,"nodeType":"Identifier","endLine":93,"endColumn":33},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" cannot be called in an async function.","line":118,"column":3,"nodeType":"Identifier","endLine":118,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" cannot be called in an async function.","line":136,"column":3,"nodeType":"Identifier","endLine":136,"endColumn":12},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" cannot be called in an async function.","line":149,"column":3,"nodeType":"Identifier","endLine":149,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'saveProgress'. Either include it or remove the dependency array.","line":166,"column":6,"nodeType":"ArrayExpression","endLine":166,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [answers, saveProgress]","fix":{"range":[4737,4746],"text":"[answers, saveProgress]"}}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" cannot be called in an async function.","line":169,"column":3,"nodeType":"Identifier","endLine":169,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'saveProgress'. Either include it or remove the dependency array.","line":179,"column":6,"nodeType":"ArrayExpression","endLine":179,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [currentAnswer?.answer, saveProgress]","fix":{"range":[5104,5127],"text":"[currentAnswer?.answer, saveProgress]"}}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" cannot be called in an async function.","line":182,"column":3,"nodeType":"Identifier","endLine":182,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'celebrationMilestones'. Either include it or remove the dependency array.","line":189,"column":6,"nodeType":"ArrayExpression","endLine":189,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [progress, lastCelebratedMilestone, celebrationMilestones]","fix":{"range":[5407,5442],"text":"[progress, lastCelebratedMilestone, celebrationMilestones]"}}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useKonamiCode\" cannot be called in an async function.","line":192,"column":3,"nodeType":"Identifier","endLine":192,"endColumn":16},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useEffect\" cannot be called in an async function.","line":202,"column":3,"nodeType":"Identifier","endLine":202,"endColumn":12},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'goToNextQuestion', 'goToPrevQuestion', and 'saveProgress'. Either include them or remove the dependency array.","line":230,"column":6,"nodeType":"ArrayExpression","endLine":230,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [currentQuestionIndex, goToNextQuestion, goToPrevQuestion, saveProgress]","fix":{"range":[6522,6544],"text":"[currentQuestionIndex, goToNextQuestion, goToPrevQuestion, saveProgress]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":575,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[20449,20565],"text":"\n                You found the secret! You&apos;re clearly ready for AI if you can master the Konami Code!\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[20449,20565],"text":"\n                You found the secret! You&lsquo;re clearly ready for AI if you can master the Konami Code!\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[20449,20565],"text":"\n                You found the secret! You&#39;re clearly ready for AI if you can master the Konami Code!\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[20449,20565],"text":"\n                You found the secret! You&rsquo;re clearly ready for AI if you can master the Konami Code!\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React, { useState, useEffect, useRef } from 'react'\nimport { redirect, useRouter } from 'next/navigation'\nimport { createClient } from '@/lib/supabase/client'\nimport { MainLayout } from '@/components/layout/main-layout'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { Progress } from '@/components/ui/progress'\nimport { SurveyQuestion } from '@/components/survey/survey-question'\nimport { \n  Confetti, \n  ProgressMilestone, \n  FloatingHearts, \n  useKonamiCode \n} from '@/components/ui/whimsy'\nimport { \n  Save, \n  Clock,\n  Brain,\n  User,\n  CheckCircle,\n  AlertCircle,\n  Sparkles,\n  Trophy\n} from 'lucide-react'\nimport { surveyQuestions, surveyCategories, getTotalProgress, SurveyQuestion as QuestionType } from '@/lib/data/survey-questions'\n\ninterface Props {\n  params: Promise<{ sessionId: string }>\n}\n\ninterface SurveyAnswer {\n  questionId: string\n  answer: string\n  inputMethod: 'text' | 'voice'\n  lastSaved: Date\n  audioUrl?: string\n}\n\ninterface SurveySession {\n  sessionId: string\n  userId: string\n  answers: Record<string, SurveyAnswer>\n  currentQuestionIndex: number\n  startedAt: Date\n  lastUpdated: Date\n  timeSpent: number\n  status: 'in_progress' | 'completed' | 'paused'\n}\n\nconst mockUser = {\n  id: '1',\n  email: 'john.doe@company.com',\n  role: 'user' as const,\n  organizationId: 'org-1',\n  profile: {\n    id: 'profile-1',\n    userId: '1',\n    firstName: 'John',\n    lastName: 'Doe',\n    avatar: undefined,\n    department: 'Product Management',\n    jobTitle: 'Senior Product Manager',\n    preferences: {\n      theme: 'dark' as const,\n      notifications: true,\n      voiceInput: true,\n      language: 'en'\n    }\n  },\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-08-01T00:00:00Z',\n  lastLogin: '2024-08-02T19:00:00Z'\n}\n\nexport default async function SurveyPage({ params }: Props) {\n  const resolvedParams = await params\n  const router = useRouter()\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\n  const [answers, setAnswers] = useState<Record<string, SurveyAnswer>>({})\n  const [inputMethod, setInputMethod] = useState<'text' | 'voice'>('text')\n  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle')\n  const [timeSpent, setTimeSpent] = useState(0)\n  const [questionStartTime, setQuestionStartTime] = useState(Date.now())\n  const [session, setSession] = useState<SurveySession | null>(null)\n  const [showConfetti, setShowConfetti] = useState(false)\n  const [showMilestoneHearts, setShowMilestoneHearts] = useState(false)\n  const [lastCelebratedMilestone, setLastCelebratedMilestone] = useState(0)\n  const [konamiActivated, setKonamiActivated] = useState(false)\n  \n  const saveTimeoutRef = useRef<NodeJS.Timeout | null>(null)\n  const timeIntervalRef = useRef<NodeJS.Timeout | null>(null)\n\n  const currentQuestion = surveyQuestions[currentQuestionIndex]\n  const currentAnswer = answers[currentQuestion?.id]\n  const progress = getTotalProgress(Object.fromEntries(\n    Object.entries(answers).map(([id, answer]) => [id, answer.answer])\n  ))\n  \n  // Celebration milestones\n  const celebrationMilestones = [25, 50, 75, 100]\n  \n  // Handle milestone celebrations\n  const handleMilestone = (milestone: number) => {\n    console.log(`🎉 Milestone reached: ${milestone}%`)\n    \n    if (milestone === 100) {\n      setShowConfetti(true)\n      setTimeout(() => setShowConfetti(false), 4000)\n    } else {\n      setShowMilestoneHearts(true)\n      setTimeout(() => setShowMilestoneHearts(false), 2000)\n    }\n  }\n\n  // Initialize session\n  useEffect(() => {\n    const initSession = () => {\n      setSession({\n        sessionId: resolvedParams.sessionId,\n        userId: mockUser.id,\n        answers: {},\n        currentQuestionIndex: 0,\n        startedAt: new Date(),\n        lastUpdated: new Date(),\n        timeSpent: 0,\n        status: 'in_progress'\n      })\n    }\n    \n    initSession()\n  }, [resolvedParams.sessionId])\n\n  // Track time spent\n  useEffect(() => {\n    timeIntervalRef.current = setInterval(() => {\n      setTimeSpent(prev => prev + 1)\n    }, 1000)\n\n    return () => {\n      if (timeIntervalRef.current) {\n        clearInterval(timeIntervalRef.current)\n      }\n    }\n  }, [])\n\n  // Auto-save functionality every 30 seconds\n  useEffect(() => {\n    if (saveTimeoutRef.current) {\n      clearTimeout(saveTimeoutRef.current)\n    }\n\n    if (Object.keys(answers).length > 0) {\n      setSaveStatus('saving')\n      saveTimeoutRef.current = setTimeout(() => {\n        saveProgress()\n      }, 30000) // Auto-save every 30 seconds\n    }\n\n    return () => {\n      if (saveTimeoutRef.current) {\n        clearTimeout(saveTimeoutRef.current)\n      }\n    }\n  }, [answers])\n\n  // Save on answer change (debounced)\n  useEffect(() => {\n    if (currentAnswer?.answer.trim()) {\n      const debounceTimeout = setTimeout(() => {\n        saveProgress()\n      }, 3000) // Save 3 seconds after stopping typing\n\n      return () => clearTimeout(debounceTimeout)\n    }\n    // Return undefined when there's no answer\n    return undefined\n  }, [currentAnswer?.answer])\n\n  // Progress celebration effect\n  useEffect(() => {\n    celebrationMilestones.forEach(milestone => {\n      if (progress >= milestone && lastCelebratedMilestone < milestone) {\n        setLastCelebratedMilestone(milestone)\n        handleMilestone(milestone)\n      }\n    })\n  }, [progress, lastCelebratedMilestone])\n  \n  // Konami code easter egg\n  useKonamiCode(() => {\n    setKonamiActivated(true)\n    setShowConfetti(true)\n    setTimeout(() => {\n      setKonamiActivated(false)\n      setShowConfetti(false)\n    }, 5000)\n  })\n\n  // Keyboard navigation with fun shortcuts\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.ctrlKey || event.metaKey) {\n        switch (event.key) {\n          case 'ArrowLeft':\n            event.preventDefault()\n            goToPrevQuestion()\n            break\n          case 'ArrowRight':\n            event.preventDefault()\n            goToNextQuestion()\n            break\n          case 's':\n            event.preventDefault()\n            saveProgress()\n            break\n        }\n      }\n      \n      // Fun keyboard shortcuts\n      if (event.shiftKey && event.key === 'H') {\n        setShowMilestoneHearts(true)\n        setTimeout(() => setShowMilestoneHearts(false), 1000)\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown)\n    return () => window.removeEventListener('keydown', handleKeyDown)\n  }, [currentQuestionIndex])\n\n  const saveProgress = async () => {\n    try {\n      setSaveStatus('saving')\n      \n      // Update session with current data\n      const updatedSession = {\n        ...session!,\n        answers,\n        currentQuestionIndex,\n        lastUpdated: new Date(),\n        timeSpent\n      }\n      \n      // In a real app, this would save to Supabase\n      console.log('Saving progress:', updatedSession)\n      \n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 500))\n      \n      setSession(updatedSession)\n      setSaveStatus('saved')\n      \n      setTimeout(() => setSaveStatus('idle'), 2000)\n    } catch (error) {\n      console.error('Save failed:', error)\n      setSaveStatus('error')\n      setTimeout(() => setSaveStatus('idle'), 3000)\n    }\n  }\n\n  const updateAnswer = (answer: string, method: 'text' | 'voice' = 'text') => {\n    if (!currentQuestion) return\n    \n    setAnswers(prev => ({\n      ...prev,\n      [currentQuestion.id]: {\n        questionId: currentQuestion.id,\n        answer,\n        inputMethod: method,\n        lastSaved: new Date()\n      }\n    }))\n  }\n\n\n  const goToQuestion = (index: number) => {\n    if (index >= 0 && index < surveyQuestions.length) {\n      setCurrentQuestionIndex(index)\n      setQuestionStartTime(Date.now())\n      // Reset input method preference for new question\n      const newQuestion = surveyQuestions[index]\n      const existingAnswer = answers[newQuestion.id]\n      if (existingAnswer?.inputMethod) {\n        setInputMethod(existingAnswer.inputMethod)\n      }\n    }\n  }\n\n  const goToNextQuestion = () => {\n    if (currentQuestionIndex < surveyQuestions.length - 1) {\n      goToQuestion(currentQuestionIndex + 1)\n    }\n  }\n\n  const goToPrevQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      goToQuestion(currentQuestionIndex - 1)\n    }\n  }\n\n  const completeSurvey = async () => {\n    try {\n      // Final save before completion\n      await saveProgress()\n      \n      // Update session status\n      if (session) {\n        const completedSession = {\n          ...session,\n          status: 'completed' as const,\n          lastUpdated: new Date()\n        }\n        setSession(completedSession)\n      }\n      \n      // Navigate to completion page\n      router.push(`/survey/${resolvedParams.sessionId}/complete`)\n    } catch (error) {\n      console.error('Failed to complete survey:', error)\n    }\n  }\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60)\n    const secs = seconds % 60\n    return `${mins}:${secs.toString().padStart(2, '0')}`\n  }\n\n  const canGoNext = () => {\n    if (!currentQuestion) return false\n    const answer = currentAnswer?.answer?.trim()\n    return currentQuestion.required ? !!answer : true\n  }\n\n  const canGoToPrevious = () => {\n    return currentQuestionIndex > 0\n  }\n\n  const isLastQuestion = () => {\n    return currentQuestionIndex === surveyQuestions.length - 1\n  }\n\n  if (!currentQuestion) {\n    redirect('/survey')\n  }\n\n  return (\n    <MainLayout user={mockUser} currentPath={`/survey/${resolvedParams.sessionId}`}>\n      <div className={`max-w-4xl mx-auto space-y-4 sm:space-y-6 px-4 sm:px-0 ${konamiActivated ? 'konami-activated' : ''}`}>\n        {/* Celebration Effects */}\n        <Confetti \n          active={showConfetti} \n          intensity={progress === 100 ? 'high' : 'medium'}\n          duration={progress === 100 ? 5000 : 3000}\n        />\n        <FloatingHearts active={showMilestoneHearts} count={progress >= 100 ? 10 : 5} />\n        {/* Header */}\n        <div className=\"space-y-4\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n            <div>\n              <h1 className=\"text-2xl sm:text-3xl font-bold gradient-text\">\n                AI Readiness Assessment\n              </h1>\n              <p className=\"text-sm sm:text-base text-muted-foreground\">\n                Question {currentQuestion.number} of {surveyQuestions.length}\n              </p>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-4 text-xs sm:text-sm text-muted-foreground\">\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"h-3 w-3 sm:h-4 sm:w-4\" />\n                <span>{formatTime(timeSpent)}</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                {saveStatus === 'saving' && <Save className=\"h-3 w-3 sm:h-4 sm:w-4 animate-spin\" />}\n                {saveStatus === 'saved' && <CheckCircle className=\"h-3 w-3 sm:h-4 sm:w-4 text-green-400\" />}\n                {saveStatus === 'error' && <AlertCircle className=\"h-3 w-3 sm:h-4 sm:w-4 text-red-400\" />}\n                <span className=\"hidden sm:inline\">\n                  {saveStatus === 'saving' && 'Saving...'}\n                  {saveStatus === 'saved' && 'Saved'}\n                  {saveStatus === 'error' && 'Save failed'}\n                  {saveStatus === 'idle' && 'Auto-save enabled'}\n                </span>\n                <span className=\"sm:hidden\">\n                  {saveStatus === 'saving' && 'Saving'}\n                  {saveStatus === 'saved' && 'Saved'}\n                  {saveStatus === 'error' && 'Error'}\n                  {saveStatus === 'idle' && 'Auto-save'}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Progress Bar with Celebrations */}\n          <div className=\"space-y-2 relative\">\n            <div className=\"flex justify-between text-sm\">\n              <div className=\"flex items-center space-x-2\">\n                <span>Overall Progress</span>\n                {progress >= 25 && (\n                  <Trophy className=\"h-4 w-4 text-yellow-400 animate-pulse\" />\n                )}\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"font-medium\">{Math.round(progress)}%</span>\n                {progress >= 50 && (\n                  <Sparkles className=\"h-4 w-4 text-purple-400 animate-spin\" />\n                )}\n              </div>\n            </div>\n            <div className=\"relative\">\n              <Progress \n                value={progress} \n                variant=\"gradient\" \n                className={`h-3 rounded-full transition-all duration-500 ${\n                  progress >= 75 ? 'progress-milestone' : ''\n                }`}\n              />\n              <ProgressMilestone \n                progress={progress}\n                milestones={celebrationMilestones}\n                onMilestone={handleMilestone}\n              />\n            </div>\n            {/* Progress encouragement */}\n            {progress > 0 && progress < 100 && (\n              <div className=\"text-center\">\n                <p className=\"text-xs text-muted-foreground animate-pulse\">\n                  {progress < 25 && \"🚀 You're off to a great start!\"}\n                  {progress >= 25 && progress < 50 && \"⭐ Making excellent progress!\"}\n                  {progress >= 50 && progress < 75 && \"🔥 You're on fire! Keep going!\"}\n                  {progress >= 75 && progress < 100 && \"🎯 Almost there! You've got this!\"}\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Integrated Survey Question Component */}\n        <SurveyQuestion\n          question={currentQuestion}\n          answer={currentAnswer?.answer || ''}\n          inputMethod={inputMethod}\n          onAnswerChange={updateAnswer}\n          onInputMethodChange={setInputMethod}\n          onNext={isLastQuestion() ? completeSurvey : goToNextQuestion}\n          onPrevious={goToPrevQuestion}\n          isFirst={!canGoToPrevious()}\n          isLast={isLastQuestion()}\n          canGoNext={canGoNext()}\n          className=\"\"\n        />\n\n        {/* Question Navigation Overview */}\n        <Card className=\"p-6 border-border/50 bg-card/50 backdrop-blur-sm\">\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-lg\">Question Navigation</h3>\n            \n            {/* Question Grid */}\n            <div className=\"grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 gap-2\">\n              {surveyQuestions.map((q, idx) => {\n                const hasAnswer = answers[q.id]?.answer.trim()\n                const isCurrent = idx === currentQuestionIndex\n                \n                return (\n                  <button\n                    key={q.id}\n                    onClick={() => goToQuestion(idx)}\n                    className={`w-10 h-10 sm:w-12 sm:h-12 rounded-lg text-xs sm:text-sm font-medium transition-all flex items-center justify-center touch-target whimsy-hover ${\n                      isCurrent\n                        ? 'bg-teal-500 text-white ring-2 ring-teal-400 animate-pulse'\n                        : hasAnswer\n                        ? 'bg-green-500/20 text-green-400 border border-green-500/30 hover:bg-green-500/30 success-pulse'\n                        : 'bg-muted text-muted-foreground hover:bg-muted/80 border border-border'\n                    }`}\n                    title={`Question ${q.number}: ${q.categoryLabel}`}\n                    aria-label={`Go to question ${q.number}: ${q.categoryLabel}. ${isCurrent ? 'Current question' : hasAnswer ? 'Answered' : 'Not answered'}`}\n                  >\n                    {hasAnswer && !isCurrent ? (\n                      <CheckCircle className=\"w-4 h-4\" />\n                    ) : (\n                      q.number\n                    )}\n                  </button>\n                )\n              })}\n            </div>\n            \n            {/* Legend */}\n            <div className=\"flex items-center justify-center space-x-6 text-sm text-muted-foreground\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 bg-teal-500 rounded\"></div>\n                <span>Current</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 bg-green-500/20 border border-green-500/30 rounded\"></div>\n                <span>Answered</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 bg-muted border border-border rounded\"></div>\n                <span>Pending</span>\n              </div>\n            </div>\n            \n            {/* Keyboard shortcuts - hide on mobile */}\n            <div className=\"text-center hidden sm:block\">\n              <p className=\"text-xs text-muted-foreground\">\n                Use <kbd className=\"px-1 py-0.5 bg-muted rounded text-xs\">Ctrl+←</kbd> / <kbd className=\"px-1 py-0.5 bg-muted rounded text-xs\">Ctrl+→</kbd> to navigate, <kbd className=\"px-1 py-0.5 bg-muted rounded text-xs\">Ctrl+S</kbd> to save\n                {konamiActivated && (\n                  <span className=\"ml-2 text-rainbow animate-pulse\">🎮 Konami Code Activated! 🎮</span>\n                )}\n              </p>\n              <p className=\"text-xs text-muted-foreground/60 mt-1\">\n                💡 Try <kbd className=\"px-1 py-0.5 bg-muted rounded text-xs\">Shift+H</kbd> for a little surprise\n              </p>\n            </div>\n          </div>\n        </Card>\n\n        {/* Survey Progress Summary */}\n        <Card variant=\"glass\" className=\"p-4 sm:p-6\">\n          <h3 className=\"font-semibold mb-4 flex items-center space-x-2 text-base sm:text-lg\">\n            <Brain className=\"h-4 w-4 sm:h-5 sm:w-5 text-teal-400\" />\n            <span>Progress by Category</span>\n          </h3>\n          \n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4\">\n            {surveyCategories.map(category => {\n              const categoryQuestions = surveyQuestions.filter(q => q.category === category.id)\n              const answeredQuestions = categoryQuestions.filter(q => answers[q.id]?.answer.trim())\n              const categoryProgress = categoryQuestions.length > 0 \n                ? (answeredQuestions.length / categoryQuestions.length) * 100 \n                : 0\n              const isComplete = categoryProgress === 100\n\n              return (\n                <div key={category.id} className={`space-y-2 transition-all duration-300 ${\n                  isComplete ? 'celebrate-bounce' : ''\n                }`}>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className={`text-lg transition-transform duration-300 ${\n                        isComplete ? 'scale-110' : ''\n                      }`}>{category.icon}</span>\n                      <span className=\"font-medium text-sm\">{category.label}</span>\n                      {isComplete && (\n                        <CheckCircle className=\"h-4 w-4 text-green-400 animate-pulse\" />\n                      )}\n                    </div>\n                    <span className={`text-sm transition-colors duration-300 ${\n                      isComplete ? 'text-green-400 font-medium' : 'text-muted-foreground'\n                    }`}>\n                      {answeredQuestions.length}/{categoryQuestions.length}\n                    </span>\n                  </div>\n                  <Progress \n                    value={categoryProgress} \n                    className={`h-2 transition-all duration-500 ${\n                      isComplete ? 'success-pulse' : ''\n                    }`} \n                    variant={isComplete ? 'gradient' : 'default'}\n                  />\n                </div>\n              )\n            })}\n          </div>\n        </Card>\n        \n        {/* Hidden easter egg message */}\n        {konamiActivated && (\n          <Card className=\"p-4 border-rainbow animate-pulse\">\n            <div className=\"text-center space-y-2\">\n              <div className=\"text-2xl\">🎮✨🚀</div>\n              <p className=\"text-sm font-medium text-rainbow\">\n                You found the secret! You're clearly ready for AI if you can master the Konami Code!\n              </p>\n              <div className=\"text-xs text-muted-foreground\">\n                Keep this energy for your AI journey!\n              </div>\n            </div>\n          </Card>\n        )}\n      </div>\n    </MainLayout>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/survey/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":68,"column":78,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2172,2467],"text":"\n                    This comprehensive assessment evaluates your organization&apos;s readiness for AI adoption \n                    across multiple dimensions including technology infrastructure, data maturity, \n                    organizational culture, and strategic alignment.\n                  "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2172,2467],"text":"\n                    This comprehensive assessment evaluates your organization&lsquo;s readiness for AI adoption \n                    across multiple dimensions including technology infrastructure, data maturity, \n                    organizational culture, and strategic alignment.\n                  "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2172,2467],"text":"\n                    This comprehensive assessment evaluates your organization&#39;s readiness for AI adoption \n                    across multiple dimensions including technology infrastructure, data maturity, \n                    organizational culture, and strategic alignment.\n                  "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2172,2467],"text":"\n                    This comprehensive assessment evaluates your organization&rsquo;s readiness for AI adoption \n                    across multiple dimensions including technology infrastructure, data maturity, \n                    organizational culture, and strategic alignment.\n                  "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":203,"column":29,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[8621,8692],"text":"• Use &quot;Not Applicable\" if a question doesn't apply to your organization"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[8621,8692],"text":"• Use &ldquo;Not Applicable\" if a question doesn't apply to your organization"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[8621,8692],"text":"• Use &#34;Not Applicable\" if a question doesn't apply to your organization"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[8621,8692],"text":"• Use &rdquo;Not Applicable\" if a question doesn't apply to your organization"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":203,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[8621,8692],"text":"• Use \"Not Applicable&quot; if a question doesn't apply to your organization"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[8621,8692],"text":"• Use \"Not Applicable&ldquo; if a question doesn't apply to your organization"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[8621,8692],"text":"• Use \"Not Applicable&#34; if a question doesn't apply to your organization"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[8621,8692],"text":"• Use \"Not Applicable&rdquo; if a question doesn't apply to your organization"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":203,"column":65,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[8621,8692],"text":"• Use \"Not Applicable\" if a question doesn&apos;t apply to your organization"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[8621,8692],"text":"• Use \"Not Applicable\" if a question doesn&lsquo;t apply to your organization"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[8621,8692],"text":"• Use \"Not Applicable\" if a question doesn&#39;t apply to your organization"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[8621,8692],"text":"• Use \"Not Applicable\" if a question doesn&rsquo;t apply to your organization"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { redirect } from 'next/navigation'\nimport { createClient } from '@/lib/supabase/server'\nimport { MainLayout } from '@/components/layout/main-layout'\nimport { Button, Card, CardHeader, CardTitle, CardContent, Progress } from '@/components/ui'\nimport { Brain, CheckCircle, Clock, Users } from 'lucide-react'\n\n// Mock user data for demonstration\nconst mockUser = {\n  id: '1',\n  email: 'john.doe@company.com',\n  role: 'org_admin' as const,\n  organizationId: 'org-1',\n  profile: {\n    id: 'profile-1',\n    userId: '1',\n    firstName: 'John',\n    lastName: 'Doe',\n    avatar: undefined,\n    department: 'IT Leadership',\n    jobTitle: 'Director of Technology',\n    preferences: {\n      theme: 'dark' as const,\n      notifications: true,\n      voiceInput: true,\n      language: 'en'\n    }\n  },\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-08-01T00:00:00Z',\n  lastLogin: '2024-08-02T19:00:00Z'\n}\n\nexport default async function SurveyPage() {\n  const supabase = await createClient()\n  const { data: { user } } = await supabase.auth.getUser()\n\n  if (!user) {\n    redirect('/auth/login')\n  }\n\n  return (\n    <MainLayout user={mockUser} currentPath=\"/survey\">\n      <div className=\"space-y-8\">\n        {/* Page Header */}\n        <div className=\"space-y-2\">\n          <h1 className=\"text-4xl font-bold gradient-text\">\n            AI Readiness Assessment\n          </h1>\n          <p className=\"text-muted-foreground text-lg\">\n            Complete your comprehensive AI readiness evaluation\n          </p>\n        </div>\n\n        {/* Survey Overview */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Brain className=\"h-5 w-5 text-teal-400\" />\n                <span>Assessment Overview</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-semibold text-lg mb-2\">AI Readiness Survey</h3>\n                  <p className=\"text-muted-foreground\">\n                    This comprehensive assessment evaluates your organization's readiness for AI adoption \n                    across multiple dimensions including technology infrastructure, data maturity, \n                    organizational culture, and strategic alignment.\n                  </p>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Clock className=\"h-5 w-5 text-blue-400\" />\n                    <div>\n                      <p className=\"font-medium\">Duration</p>\n                      <p className=\"text-sm text-muted-foreground\">15-20 minutes</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-3\">\n                    <CheckCircle className=\"h-5 w-5 text-green-400\" />\n                    <div>\n                      <p className=\"font-medium\">Questions</p>\n                      <p className=\"text-sm text-muted-foreground\">45 questions</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-3\">\n                    <Users className=\"h-5 w-5 text-purple-400\" />\n                    <div>\n                      <p className=\"font-medium\">Categories</p>\n                      <p className=\"text-sm text-muted-foreground\">5 areas</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h4 className=\"font-semibold\">Assessment Categories</h4>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Technology Infrastructure</span>\n                    <span className=\"text-xs bg-teal-100 dark:bg-teal-900/30 text-teal-600 dark:text-teal-400 px-2 py-1 rounded\">Not Started</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Data & Analytics Maturity</span>\n                    <span className=\"text-xs bg-teal-100 dark:bg-teal-900/30 text-teal-600 dark:text-teal-400 px-2 py-1 rounded\">Not Started</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Organizational Culture</span>\n                    <span className=\"text-xs bg-teal-100 dark:bg-teal-900/30 text-teal-600 dark:text-teal-400 px-2 py-1 rounded\">Not Started</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Strategic Alignment</span>\n                    <span className=\"text-xs bg-teal-100 dark:bg-teal-900/30 text-teal-600 dark:text-teal-400 px-2 py-1 rounded\">Not Started</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Risk & Governance</span>\n                    <span className=\"text-xs bg-teal-100 dark:bg-teal-900/30 text-teal-600 dark:text-teal-400 px-2 py-1 rounded\">Not Started</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Progress Sidebar */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Your Progress</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"text-center\">\n                <div className=\"relative w-32 h-32 mx-auto mb-4\">\n                  <svg className=\"w-32 h-32 transform -rotate-90\" viewBox=\"0 0 36 36\">\n                    <path\n                      d=\"m18,2.0845 a 15.9155,15.9155 0 0,1 0,31.831 a 15.9155,15.9155 0 0,1 0,-31.831\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeWidth=\"2\"\n                      strokeDasharray=\"0, 100\"\n                      className=\"text-gray-200 dark:text-gray-700\"\n                    />\n                  </svg>\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <span className=\"text-2xl font-bold\">0%</span>\n                  </div>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">Assessment Complete</p>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span>Questions Answered</span>\n                    <span>0/45</span>\n                  </div>\n                  <Progress value={0} className=\"h-2\" />\n                </div>\n                \n                <div>\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span>Time Spent</span>\n                    <span>0 min</span>\n                  </div>\n                  <Progress value={0} className=\"h-2\" />\n                </div>\n              </div>\n\n              <Button \n                className=\"w-full bg-teal-600 hover:bg-teal-700\"\n                onClick={() => {\n                  // Generate unique session ID\n                  const sessionId = `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n                  window.location.href = `/survey/${sessionId}`\n                }}\n              >\n                Start Assessment\n              </Button>\n              \n              <div className=\"text-center\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  Save & Continue Later\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Additional Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>What to Expect</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-semibold mb-2\">During the Assessment</h4>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>• Answer questions honestly based on your current state</li>\n                  <li>• Use \"Not Applicable\" if a question doesn't apply to your organization</li>\n                  <li>• Save your progress at any time and return later</li>\n                  <li>• Review and modify answers before final submission</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold mb-2\">After Completion</h4>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>• Receive a comprehensive readiness score</li>\n                  <li>• Get detailed recommendations for improvement</li>\n                  <li>• Access benchmarking data against industry peers</li>\n                  <li>• Download detailed reports for stakeholders</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </MainLayout>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/test-auth/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/app/visual-story-demo/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/admin/export-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/admin/jtbd-chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/admin/jtbd-force-visualization.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/admin/llm-analysis-dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/admin/privacy-controls.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":266,"column":100,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9313,9455],"text":"\n                I confirm that this data export complies with GDPR requirements and my organization&apos;s data protection policies\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9313,9455],"text":"\n                I confirm that this data export complies with GDPR requirements and my organization&lsquo;s data protection policies\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9313,9455],"text":"\n                I confirm that this data export complies with GDPR requirements and my organization&#39;s data protection policies\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9313,9455],"text":"\n                I confirm that this data export complies with GDPR requirements and my organization&rsquo;s data protection policies\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React, { useState } from 'react'\nimport { Card } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog'\nimport {\n  Shield,\n  Eye,\n  EyeOff,\n  Lock,\n  Unlock,\n  AlertTriangle,\n  Info,\n  CheckCircle,\n  Clock,\n  Download,\n  UserX,\n  FileText,\n  Database\n} from 'lucide-react'\nimport { ExportOptions, UserRole } from '@/lib/types'\nimport { useAuth } from '@/lib/hooks/use-auth'\n\ninterface PrivacyControlsProps {\n  exportOptions: ExportOptions\n  onChange: (options: ExportOptions) => void\n  userRole: UserRole\n  className?: string\n}\n\nexport const PrivacyControls: React.FC<PrivacyControlsProps> = ({\n  exportOptions,\n  onChange,\n  userRole,\n  className = ''\n}) => {\n  const [showDataPreview, setShowDataPreview] = useState(false)\n  const [gdprConfirmed, setGdprConfirmed] = useState(false)\n\n  const canAccessPersonalData = ['admin', 'org_admin'].includes(userRole)\n  \n  const privacyLevels = [\n    {\n      id: 'anonymous',\n      title: 'Anonymous',\n      description: 'All personal identifiers removed',\n      icon: UserX,\n      level: 'high',\n      includes: ['Response data', 'Aggregated analytics', 'Department categories'],\n      excludes: ['Names', 'Email addresses', 'IP addresses', 'User IDs']\n    },\n    {\n      id: 'pseudonymous',\n      title: 'Pseudonymous',\n      description: 'Personal data replaced with pseudonyms',\n      icon: Eye,\n      level: 'medium',\n      includes: ['Response data', 'Consistent user tracking', 'Department info'],\n      excludes: ['Real names', 'Email addresses', 'IP addresses']\n    },\n    {\n      id: 'identifiable',\n      title: 'Identifiable',\n      description: 'Full personal data included',\n      icon: EyeOff,\n      level: 'low',\n      includes: ['All response data', 'Names', 'Email addresses', 'User profiles'],\n      excludes: ['Sensitive metadata only if specified'],\n      requiresPermission: true\n    }\n  ]\n\n  const getPrivacyLevel = (): 'anonymous' | 'pseudonymous' | 'identifiable' => {\n    if (!exportOptions.includePersonalData) return 'anonymous'\n    if (exportOptions.filters?.department || exportOptions.filters?.role) return 'pseudonymous'\n    return 'identifiable'\n  }\n\n  const handlePrivacyLevelChange = (level: string) => {\n    const includePersonalData = level === 'identifiable'\n    onChange({\n      ...exportOptions,\n      includePersonalData\n    })\n  }\n\n  const getComplianceInfo = () => {\n    const currentLevel = getPrivacyLevel()\n    switch (currentLevel) {\n      case 'anonymous':\n        return {\n          status: 'compliant',\n          message: 'GDPR compliant - no personal data included',\n          color: 'text-green-400',\n          icon: CheckCircle\n        }\n      case 'pseudonymous':\n        return {\n          status: 'caution',\n          message: 'Partially GDPR compliant - pseudonymized data',\n          color: 'text-yellow-400',\n          icon: AlertTriangle\n        }\n      case 'identifiable':\n        return {\n          status: 'warning',\n          message: 'GDPR compliance required - personal data included',\n          color: 'text-red-400',\n          icon: AlertTriangle\n        }\n      default:\n        return {\n          status: 'unknown',\n          message: 'Privacy level unknown',\n          color: 'text-gray-400',\n          icon: Info\n        }\n    }\n  }\n\n  const complianceInfo = getComplianceInfo()\n  const ComplianceIcon = complianceInfo.icon\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Privacy Level Selection */}\n      <Card className=\"glass-card border-gray-600 p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-white flex items-center space-x-2\">\n            <Shield className=\"h-5 w-5\" />\n            <span>Privacy Controls</span>\n          </h3>\n          <Badge \n            variant=\"outline\" \n            className={`${complianceInfo.color} border-current`}\n          >\n            <ComplianceIcon className=\"h-3 w-3 mr-1\" />\n            {complianceInfo.status.toUpperCase()}\n          </Badge>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n          {privacyLevels.map((level) => {\n            const isSelected = getPrivacyLevel() === level.id\n            const isDisabled = level.requiresPermission && !canAccessPersonalData\n            \n            return (\n              <div\n                key={level.id}\n                className={`\n                  p-4 rounded-lg border cursor-pointer transition-all\n                  ${isSelected \n                    ? 'border-teal-500 bg-teal-500/10' \n                    : isDisabled\n                      ? 'border-gray-700 bg-gray-700/20 opacity-50 cursor-not-allowed'\n                      : 'border-gray-600 hover:border-gray-500'\n                  }\n                `}\n                onClick={() => !isDisabled && handlePrivacyLevelChange(level.id)}\n              >\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <level.icon className={`h-4 w-4 ${\n                    level.level === 'high' ? 'text-green-400' :\n                    level.level === 'medium' ? 'text-yellow-400' :\n                    'text-red-400'\n                  }`} />\n                  <span className=\"text-white font-medium\">{level.title}</span>\n                  {isDisabled && <Lock className=\"h-3 w-3 text-gray-500\" />}\n                </div>\n                <p className=\"text-xs text-gray-400 mb-3\">{level.description}</p>\n                \n                <div className=\"space-y-2\">\n                  <div>\n                    <p className=\"text-xs text-green-400 font-medium\">Includes:</p>\n                    <ul className=\"text-xs text-gray-300 space-y-1\">\n                      {level.includes.map((item, idx) => (\n                        <li key={idx} className=\"flex items-center space-x-1\">\n                          <CheckCircle className=\"h-2 w-2 text-green-400\" />\n                          <span>{item}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                  <div>\n                    <p className=\"text-xs text-red-400 font-medium\">Excludes:</p>\n                    <ul className=\"text-xs text-gray-300 space-y-1\">\n                      {level.excludes.map((item, idx) => (\n                        <li key={idx} className=\"flex items-center space-x-1\">\n                          <UserX className=\"h-2 w-2 text-red-400\" />\n                          <span>{item}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n\n        {/* Compliance Notice */}\n        <div className={`flex items-start space-x-3 p-3 rounded-lg border ${\n          complianceInfo.status === 'compliant' ? 'border-green-500/30 bg-green-500/10' :\n          complianceInfo.status === 'caution' ? 'border-yellow-500/30 bg-yellow-500/10' :\n          'border-red-500/30 bg-red-500/10'\n        }`}>\n          <ComplianceIcon className={`h-4 w-4 ${complianceInfo.color} mt-0.5 flex-shrink-0`} />\n          <div className=\"text-xs\">\n            <p className={`font-medium mb-1 ${complianceInfo.color}`}>\n              Compliance Status\n            </p>\n            <p className=\"text-gray-300\">{complianceInfo.message}</p>\n          </div>\n        </div>\n      </Card>\n\n      {/* GDPR Compliance Section */}\n      {exportOptions.includePersonalData && (\n        <Card className=\"glass-card border-red-500/30 bg-red-500/5 p-6\">\n          <div className=\"flex items-center space-x-2 mb-4\">\n            <AlertTriangle className=\"h-5 w-5 text-red-400\" />\n            <h3 className=\"text-lg font-semibold text-white\">GDPR Compliance Required</h3>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div className=\"text-sm text-gray-300\">\n              <p className=\"mb-2\">\n                This export includes personal data and requires compliance with GDPR regulations:\n              </p>\n              <ul className=\"space-y-1 ml-4\">\n                <li>• Ensure you have lawful basis for processing this data</li>\n                <li>• Data subjects have been informed of their rights</li>\n                <li>• Implement appropriate security measures</li>\n                <li>• Maintain records of processing activities</li>\n                <li>• Respect data retention policies</li>\n              </ul>\n            </div>\n\n            <div className=\"flex items-start space-x-2\">\n              <Checkbox\n                id=\"gdpr-compliance\"\n                checked={gdprConfirmed}\n                onCheckedChange={(checked: boolean) => setGdprConfirmed(checked)}\n                className=\"mt-1\"\n              />\n              <Label htmlFor=\"gdpr-compliance\" className=\"text-sm text-gray-300\">\n                I confirm that this data export complies with GDPR requirements and my organization's data protection policies\n              </Label>\n            </div>\n\n            {!gdprConfirmed && (\n              <div className=\"text-xs text-red-400\">\n                GDPR compliance confirmation is required to export personal data\n              </div>\n            )}\n          </div>\n        </Card>\n      )}\n\n      {/* Data Retention & Audit */}\n      <Card className=\"glass-card border-gray-600 p-6\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <Database className=\"h-5 w-5 text-teal-400\" />\n          <h3 className=\"text-lg font-semibold text-white\">Data Retention & Audit</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <Label className=\"text-sm text-gray-400\">Retention Period</Label>\n            <Select defaultValue=\"30days\">\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"7days\">7 days</SelectItem>\n                <SelectItem value=\"30days\">30 days</SelectItem>\n                <SelectItem value=\"90days\">90 days</SelectItem>\n                <SelectItem value=\"1year\">1 year</SelectItem>\n                <SelectItem value=\"indefinite\">Indefinite (with approval)</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label className=\"text-sm text-gray-400\">Access Purpose</Label>\n            <Select defaultValue=\"analysis\">\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"analysis\">Data Analysis</SelectItem>\n                <SelectItem value=\"reporting\">Management Reporting</SelectItem>\n                <SelectItem value=\"compliance\">Compliance Audit</SelectItem>\n                <SelectItem value=\"research\">Research Purposes</SelectItem>\n                <SelectItem value=\"backup\">Data Backup</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <div className=\"mt-4 p-3 bg-white/5 rounded-lg\">\n          <div className=\"flex items-center space-x-2 text-sm text-gray-300\">\n            <Clock className=\"h-4 w-4\" />\n            <span>This export will be logged for audit purposes</span>\n          </div>\n        </div>\n      </Card>\n\n      {/* Data Preview */}\n      <Card className=\"glass-card border-gray-600 p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-white\">Data Preview</h3>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setShowDataPreview(!showDataPreview)}\n          >\n            {showDataPreview ? <EyeOff className=\"h-4 w-4 mr-2\" /> : <Eye className=\"h-4 w-4 mr-2\" />}\n            {showDataPreview ? 'Hide' : 'Show'} Preview\n          </Button>\n        </div>\n\n        {showDataPreview && (\n          <div className=\"space-y-3\">\n            <div className=\"text-sm text-gray-400\">\n              Sample of data that will be included in the export:\n            </div>\n            \n            <div className=\"bg-gray-900 rounded-lg p-3 font-mono text-xs overflow-x-auto\">\n              <pre className=\"text-gray-300\">\n{exportOptions.includePersonalData ? `{\n  \"response_id\": \"resp_123456\",\n  \"user_email\": \"user@example.com\",\n  \"user_name\": \"John Doe\",\n  \"department\": \"Engineering\",\n  \"survey_response\": {\n    \"q1\": \"Strongly Agree\",\n    \"q2\": 4.5,\n    \"completion_time\": 180\n  },\n  \"metadata\": {\n    \"ip_address\": \"192.168.1.1\",\n    \"user_agent\": \"Chrome/91.0\",\n    \"timestamp\": \"2024-01-01T10:00:00Z\"\n  }\n}` : `{\n  \"response_id\": \"resp_123456\",\n  \"user_id\": \"anonymous_user_7f3a\",\n  \"department\": \"Engineering\",\n  \"survey_response\": {\n    \"q1\": \"Strongly Agree\", \n    \"q2\": 4.5,\n    \"completion_time\": 180\n  },\n  \"metadata\": {\n    \"timestamp\": \"2024-01-01T10:00:00Z\"\n  }\n}`}\n              </pre>\n            </div>\n          </div>\n        )}\n      </Card>\n    </div>\n  )\n}\n\nexport default PrivacyControls","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/admin/response-analysis-panel.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":374,"column":29,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14535,14565],"text":"\n                            &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14535,14565],"text":"\n                            &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14535,14565],"text":"\n                            &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14535,14565],"text":"\n                            &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":374,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14576,14604],"text":"&quot;\n                          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14576,14604],"text":"&ldquo;\n                          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14576,14604],"text":"&#34;\n                          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14576,14604],"text":"&rdquo;\n                          "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Response Analysis Panel for Individual Survey Response Analysis\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { ExtendedJTBDAnalysisResult, JTBDForceType } from '@/lib/types/llm';\nimport {\n  Brain,\n  MessageCircle,\n  TrendingUp,\n  TrendingDown,\n  Anchor,\n  AlertTriangle,\n  Users,\n  Clock,\n  Target,\n  CheckCircle,\n  XCircle,\n  Eye,\n  BarChart3,\n  Lightbulb,\n  ArrowRight,\n  ThumbsUp,\n  ThumbsDown,\n  Zap\n} from 'lucide-react';\n\ninterface ResponseAnalysisPanelProps {\n  responseId: string;\n  responseText: string;\n  questionText: string;\n  expectedForce?: JTBDForceType;\n  existingAnalysis?: ExtendedJTBDAnalysisResult;\n  onAnalysisComplete?: (analysis: ExtendedJTBDAnalysisResult) => void;\n  context?: {\n    employeeRole?: string;\n    employeeDepartment?: string;\n    organizationName?: string;\n  };\n}\n\nconst FORCE_ICONS = {\n  pain_of_old: { icon: TrendingDown, color: 'text-red-500', bg: 'bg-red-50', border: 'border-red-200' },\n  pull_of_new: { icon: TrendingUp, color: 'text-green-500', bg: 'bg-green-50', border: 'border-green-200' },\n  anchors_to_old: { icon: Anchor, color: 'text-amber-500', bg: 'bg-amber-50', border: 'border-amber-200' },\n  anxiety_of_new: { icon: AlertTriangle, color: 'text-purple-500', bg: 'bg-purple-50', border: 'border-purple-200' },\n  demographic: { icon: Users, color: 'text-gray-500', bg: 'bg-gray-50', border: 'border-gray-200' }\n};\n\nconst SENTIMENT_COLORS = {\n  very_positive: 'text-green-600 bg-green-50',\n  positive: 'text-green-500 bg-green-50',\n  neutral: 'text-gray-500 bg-gray-50',\n  negative: 'text-red-500 bg-red-50',\n  very_negative: 'text-red-600 bg-red-50'\n};\n\nexport function ResponseAnalysisPanel({\n  responseId,\n  responseText,\n  questionText,\n  expectedForce,\n  existingAnalysis,\n  onAnalysisComplete,\n  context\n}: ResponseAnalysisPanelProps) {\n  const [analysis, setAnalysis] = useState<ExtendedJTBDAnalysisResult | null>(existingAnalysis || null);\n  const [analyzing, setAnalyzing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showFullResponse, setShowFullResponse] = useState(false);\n\n  // Run analysis\n  const runAnalysis = async () => {\n    try {\n      setAnalyzing(true);\n      setError(null);\n\n      const response = await fetch('/api/llm/analyze', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          responseId,\n          responseText,\n          questionText,\n          expectedForce: expectedForce || 'demographic',\n          questionContext: 'AI readiness assessment',\n          organizationId: context?.organizationName,\n          ...context\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Analysis failed');\n      }\n\n      const result = await response.json();\n      setAnalysis(result.result);\n      onAnalysisComplete?.(result.result);\n\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Analysis failed');\n    } finally {\n      setAnalyzing(false);\n    }\n  };\n\n  const forceConfig = analysis ? FORCE_ICONS[analysis.primaryJtbdForce] : null;\n  const ForceIcon = forceConfig?.icon || MessageCircle;\n\n  // Truncate long text\n  const truncateText = (text: string, maxLength: number = 150) => {\n    if (text.length <= maxLength) return text;\n    return text.slice(0, maxLength) + '...';\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Response Text Card */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <MessageCircle className=\"h-5 w-5\" />\n              Survey Response\n            </CardTitle>\n            {!analysis && (\n              <Button onClick={runAnalysis} disabled={analyzing} size=\"sm\">\n                {analyzing ? (\n                  <>\n                    <Brain className=\"h-4 w-4 mr-2 animate-pulse\" />\n                    Analyzing...\n                  </>\n                ) : (\n                  <>\n                    <Zap className=\"h-4 w-4 mr-2\" />\n                    Analyze\n                  </>\n                )}\n              </Button>\n            )}\n          </div>\n          <CardDescription>\n            Question: {questionText}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <div className=\"p-3 bg-gray-50 rounded-lg\">\n              <p className=\"text-sm\">\n                {showFullResponse ? responseText : truncateText(responseText)}\n              </p>\n              {responseText.length > 150 && (\n                <Button\n                  variant=\"link\"\n                  size=\"sm\"\n                  className=\"p-0 h-auto mt-2\"\n                  onClick={() => setShowFullResponse(!showFullResponse)}\n                >\n                  {showFullResponse ? 'Show less' : 'Show more'}\n                </Button>\n              )}\n            </div>\n\n            {context && (\n              <div className=\"flex flex-wrap gap-2 text-xs text-muted-foreground\">\n                {context.employeeRole && (\n                  <Badge variant=\"outline\">Role: {context.employeeRole}</Badge>\n                )}\n                {context.employeeDepartment && (\n                  <Badge variant=\"outline\">Dept: {context.employeeDepartment}</Badge>\n                )}\n                {context.organizationName && (\n                  <Badge variant=\"outline\">Org: {context.organizationName}</Badge>\n                )}\n                {expectedForce && (\n                  <Badge variant=\"outline\">\n                    Expected: {expectedForce.replace('_', ' ').toUpperCase()}\n                  </Badge>\n                )}\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Error Message */}\n      {error && (\n        <Card className=\"border-red-200\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-2 text-red-700\">\n              <XCircle className=\"h-5 w-5\" />\n              <span className=\"text-sm\">{error}</span>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Analysis Results */}\n      {analysis && (\n        <div className=\"space-y-4\">\n          {/* Primary Analysis Overview */}\n          <Card className={`${forceConfig?.border} ${forceConfig?.bg}`}>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <ForceIcon className={`h-5 w-5 ${forceConfig?.color}`} />\n                  Primary JTBD Force\n                </CardTitle>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"secondary\">\n                    Strength: {analysis.forceStrengthScore}/5\n                  </Badge>\n                  <Badge variant=\"outline\">\n                    Confidence: {analysis.confidenceScore}/5\n                  </Badge>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div>\n                  <h4 className=\"font-medium text-sm mb-1\">\n                    {analysis.primaryJtbdForce.replace('_', ' ').toUpperCase()}\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {analysis.reasoning}\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <div className=\"text-sm font-medium mb-1\">Force Strength</div>\n                    <Progress value={(analysis.forceStrengthScore / 5) * 100} className=\"h-2\" />\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium mb-1\">Analysis Confidence</div>\n                    <Progress value={(analysis.confidenceScore / 5) * 100} className=\"h-2\" />\n                  </div>\n                </div>\n\n                {analysis.secondaryJtbdForces.length > 0 && (\n                  <div>\n                    <div className=\"text-sm font-medium mb-1\">Secondary Forces</div>\n                    <div className=\"flex gap-1\">\n                      {analysis.secondaryJtbdForces.map((force, idx) => (\n                        <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                          {force.replace('_', ' ').toUpperCase()}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Detailed Analysis Tabs */}\n          <Tabs defaultValue=\"insights\" className=\"space-y-4\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"insights\">Insights</TabsTrigger>\n              <TabsTrigger value=\"sentiment\">Sentiment</TabsTrigger>\n              <TabsTrigger value=\"themes\">Themes</TabsTrigger>\n              <TabsTrigger value=\"business\">Business Impact</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"insights\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Lightbulb className=\"h-5 w-5\" />\n                    Actionable Insights\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-medium text-sm mb-2\">Executive Summary</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {analysis.actionableInsights.summaryInsight}\n                    </p>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-medium text-sm mb-2\">Detailed Analysis</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {analysis.actionableInsights.detailedAnalysis}\n                    </p>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <h4 className=\"font-medium text-sm mb-2 flex items-center gap-1\">\n                        <ArrowRight className=\"h-4 w-4\" />\n                        Immediate Actions\n                      </h4>\n                      <ul className=\"space-y-1\">\n                        {analysis.actionableInsights.immediateActions.map((action, idx) => (\n                          <li key={idx} className=\"text-sm text-muted-foreground flex items-start gap-2\">\n                            <span className=\"w-1 h-1 bg-blue-500 rounded-full mt-2 flex-shrink-0\" />\n                            {action}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-medium text-sm mb-2 flex items-center gap-1\">\n                        <Target className=\"h-4 w-4\" />\n                        Long-term Recommendations\n                      </h4>\n                      <ul className=\"space-y-1\">\n                        {analysis.actionableInsights.longTermRecommendations.map((rec, idx) => (\n                          <li key={idx} className=\"text-sm text-muted-foreground flex items-start gap-2\">\n                            <span className=\"w-1 h-1 bg-green-500 rounded-full mt-2 flex-shrink-0\" />\n                            {rec}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"sentiment\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"h-5 w-5\" />\n                    Sentiment Analysis\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold\">\n                        {(analysis.sentimentAnalysis.overallScore * 100).toFixed(0)}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Sentiment Score</div>\n                      <Progress \n                        value={((analysis.sentimentAnalysis.overallScore + 1) / 2) * 100} \n                        className=\"h-2 mt-2\" \n                      />\n                    </div>\n\n                    <div className=\"text-center\">\n                      <Badge \n                        className={`${SENTIMENT_COLORS[analysis.sentimentAnalysis.sentimentLabel]} border-0`}\n                      >\n                        {analysis.sentimentAnalysis.sentimentLabel.replace('_', ' ').toUpperCase()}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground mt-1\">Overall Sentiment</div>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <Badge variant=\"outline\">\n                        {analysis.sentimentAnalysis.tone}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground mt-1\">Emotional Tone</div>\n                    </div>\n                  </div>\n\n                  {analysis.sentimentAnalysis.emotionalIndicators.length > 0 && (\n                    <div>\n                      <h4 className=\"font-medium text-sm mb-2\">Emotional Indicators</h4>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {analysis.sentimentAnalysis.emotionalIndicators.map((indicator, idx) => (\n                          <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                            \"{indicator}\"\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"themes\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Key Themes</CardTitle>\n                  <CardDescription>\n                    Identified themes and categories from the response\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-medium text-sm mb-2\">Primary Themes</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {analysis.keyThemes.map((theme, idx) => (\n                        <Badge key={idx} variant=\"secondary\">\n                          {theme}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {Object.entries(analysis.themeCategories).map(([category, themes]) => (\n                      themes.length > 0 && (\n                        <div key={category}>\n                          <h4 className=\"font-medium text-sm mb-2 capitalize\">\n                            {category} Themes\n                          </h4>\n                          <div className=\"space-y-1\">\n                            {themes.map((theme: string, idx: number) => (\n                              <div key={idx} className=\"text-sm text-muted-foreground\">\n                                • {theme}\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"business\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Business Impact</CardTitle>\n                  <CardDescription>\n                    Organizational implications and business value\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div className=\"text-center p-3 border rounded-lg\">\n                      <Badge \n                        variant={\n                          analysis.businessImplications.impactLevel === 'critical' ? 'destructive' :\n                          analysis.businessImplications.impactLevel === 'high' ? 'default' :\n                          'secondary'\n                        }\n                      >\n                        {analysis.businessImplications.impactLevel.toUpperCase()}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground mt-1\">Impact Level</div>\n                    </div>\n\n                    <div className=\"text-center p-3 border rounded-lg\">\n                      <Badge \n                        variant={\n                          analysis.businessImplications.urgency === 'high' ? 'destructive' :\n                          analysis.businessImplications.urgency === 'medium' ? 'default' :\n                          'secondary'\n                        }\n                      >\n                        {analysis.businessImplications.urgency.toUpperCase()}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground mt-1\">Urgency</div>\n                    </div>\n\n                    <div className=\"text-center p-3 border rounded-lg\">\n                      <Badge \n                        variant={\n                          analysis.qualityIndicators.responseQuality === 'excellent' ? 'default' :\n                          analysis.qualityIndicators.responseQuality === 'good' ? 'secondary' :\n                          'outline'\n                        }\n                      >\n                        {analysis.qualityIndicators.responseQuality.toUpperCase()}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground mt-1\">Response Quality</div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-medium text-sm mb-2\">Affected Areas</h4>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {analysis.businessImplications.affectedAreas.map((area, idx) => (\n                        <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                          {area}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-medium text-sm mb-2\">Business Value</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {analysis.businessImplications.businessValue}\n                    </p>\n                  </div>\n\n                  {analysis.analysisMetadata.followUpQuestions.length > 0 && (\n                    <div>\n                      <h4 className=\"font-medium text-sm mb-2\">Follow-up Questions</h4>\n                      <ul className=\"space-y-1\">\n                        {analysis.analysisMetadata.followUpQuestions.map((question, idx) => (\n                          <li key={idx} className=\"text-sm text-muted-foreground\">\n                            • {question}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/admin/role-guard.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":52,"column":22,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1666,1743],"text":"\n              You don&apos;t have permission to access this area. Required role: "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1666,1743],"text":"\n              You don&lsquo;t have permission to access this area. Required role: "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1666,1743],"text":"\n              You don&#39;t have permission to access this area. Required role: "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1666,1743],"text":"\n              You don&rsquo;t have permission to access this area. Required role: "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React from 'react'\nimport { useAuth } from '@/lib/auth/context'\nimport { UserRole } from '@/lib/types'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Shield, AlertTriangle } from 'lucide-react'\n\ninterface RoleGuardProps {\n  children: React.ReactNode\n  allowedRoles: UserRole[]\n  fallback?: React.ReactNode\n}\n\nexport const RoleGuard: React.FC<RoleGuardProps> = ({ \n  children, \n  allowedRoles, \n  fallback \n}) => {\n  const { user, loading } = useAuth()\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-teal-400\"></div>\n      </div>\n    )\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md glass-card\">\n          <CardHeader className=\"text-center\">\n            <Shield className=\"h-12 w-12 text-teal-400 mx-auto mb-4\" />\n            <CardTitle className=\"text-white\">Access Required</CardTitle>\n            <CardDescription>Please log in to access this area</CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    )\n  }\n\n  if (!allowedRoles.includes(user.role)) {\n    return fallback || (\n      <div className=\"min-h-screen flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md glass-card\">\n          <CardHeader className=\"text-center\">\n            <AlertTriangle className=\"h-12 w-12 text-red-400 mx-auto mb-4\" />\n            <CardTitle className=\"text-white\">Access Denied</CardTitle>\n            <CardDescription>\n              You don't have permission to access this area. Required role: {allowedRoles.join(', ')}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-gray-400 text-center\">\n              Your current role: <span className=\"text-teal-400 font-medium\">{user.role}</span>\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  return <>{children}</>\n}","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/admin/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/analytics/analytics-dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/analytics/chart-components.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/analytics/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/auth/auth-layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/auth/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/auth/protected-route.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/error-boundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/layout/header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/layout/main-layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/layout/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/survey/survey-question.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/survey/voice-recorder.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'startVolumeVisualization'. Either include it or remove the dependency array.","line":105,"column":6,"nodeType":"ArrayExpression","endLine":105,"endColumn":48,"suggestions":[{"desc":"Update the dependencies array to be: [startVolumeVisualization, recordingDuration, onTranscriptionUpdate]","fix":{"range":[3421,3463],"text":"[startVolumeVisualization, recordingDuration, onTranscriptionUpdate]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React, { useState, useRef, useCallback } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card } from '@/components/ui/card'\nimport { Textarea } from '@/components/ui/input'\nimport { \n  Mic, \n  MicOff, \n  Play, \n  Pause, \n  RotateCcw,\n  Volume2,\n  Loader2\n} from 'lucide-react'\n\ninterface VoiceRecorderProps {\n  onTranscriptionUpdate: (transcription: string) => void\n  initialValue?: string\n  className?: string\n}\n\nexport const VoiceRecorder: React.FC<VoiceRecorderProps> = ({\n  onTranscriptionUpdate,\n  initialValue = '',\n  className = ''\n}) => {\n  const [isRecording, setIsRecording] = useState(false)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [isProcessing, setIsProcessing] = useState(false)\n  const [audioBlob, setAudioBlob] = useState<Blob | null>(null)\n  const [transcription, setTranscription] = useState(initialValue)\n  const [recordingDuration, setRecordingDuration] = useState(0)\n  const [audioVolume, setAudioVolume] = useState<number[]>([])\n\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null)\n  const audioRef = useRef<HTMLAudioElement | null>(null)\n  const streamRef = useRef<MediaStream | null>(null)\n  const durationIntervalRef = useRef<NodeJS.Timeout | null>(null)\n  const volumeIntervalRef = useRef<NodeJS.Timeout | null>(null)\n  const audioContextRef = useRef<AudioContext | null>(null)\n  const analyserRef = useRef<AnalyserNode | null>(null)\n\n  const startRecording = useCallback(async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      })\n      \n      streamRef.current = stream\n      \n      // Set up audio visualization\n      audioContextRef.current = new AudioContext()\n      analyserRef.current = audioContextRef.current.createAnalyser()\n      const source = audioContextRef.current.createMediaStreamSource(stream)\n      source.connect(analyserRef.current)\n      analyserRef.current.fftSize = 256\n      \n      const mediaRecorder = new MediaRecorder(stream, {\n        mimeType: 'audio/webm;codecs=opus'\n      })\n      mediaRecorderRef.current = mediaRecorder\n\n      const chunks: BlobPart[] = []\n      \n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunks.push(event.data)\n        }\n      }\n\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunks, { type: 'audio/webm' })\n        setAudioBlob(blob)\n        setIsProcessing(true)\n        \n        // Mock transcription - in real app, send to transcription service\n        setTimeout(() => {\n          const mockTranscription = `[Voice recording ${Math.floor(recordingDuration / 60)}:${(recordingDuration % 60).toString().padStart(2, '0')}]`\n          setTranscription(mockTranscription)\n          onTranscriptionUpdate(mockTranscription)\n          setIsProcessing(false)\n        }, 2000)\n      }\n\n      mediaRecorder.start(100) // Collect data every 100ms\n      setIsRecording(true)\n      setRecordingDuration(0)\n      \n      // Start duration timer\n      durationIntervalRef.current = setInterval(() => {\n        setRecordingDuration(prev => prev + 1)\n      }, 1000)\n      \n      // Start volume visualization\n      startVolumeVisualization()\n      \n    } catch (error) {\n      console.error('Failed to start recording:', error)\n    }\n  }, [recordingDuration, onTranscriptionUpdate])\n\n  const stopRecording = useCallback(() => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop()\n      \n      // Stop all tracks\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop())\n      }\n      \n      // Clear intervals\n      if (durationIntervalRef.current) {\n        clearInterval(durationIntervalRef.current)\n      }\n      if (volumeIntervalRef.current) {\n        clearInterval(volumeIntervalRef.current)\n      }\n      \n      // Close audio context\n      if (audioContextRef.current) {\n        audioContextRef.current.close()\n      }\n      \n      setIsRecording(false)\n      setAudioVolume([])\n    }\n  }, [isRecording])\n\n  const startVolumeVisualization = useCallback(() => {\n    if (!analyserRef.current) return\n    \n    const bufferLength = analyserRef.current.frequencyBinCount\n    const dataArray = new Uint8Array(bufferLength)\n    \n    volumeIntervalRef.current = setInterval(() => {\n      if (analyserRef.current) {\n        analyserRef.current.getByteFrequencyData(dataArray)\n        \n        // Calculate volume levels for visualization\n        const volumes = []\n        for (let i = 0; i < 12; i++) {\n          const start = Math.floor((i * bufferLength) / 12)\n          const end = Math.floor(((i + 1) * bufferLength) / 12)\n          let sum = 0\n          for (let j = start; j < end; j++) {\n            sum += dataArray[j]\n          }\n          volumes.push((sum / (end - start)) / 255)\n        }\n        \n        setAudioVolume(volumes)\n      }\n    }, 100)\n  }, [])\n\n  const playRecording = useCallback(() => {\n    if (audioBlob && !isPlaying) {\n      const audio = new Audio(URL.createObjectURL(audioBlob))\n      audioRef.current = audio\n      \n      audio.play()\n      setIsPlaying(true)\n      \n      audio.onended = () => {\n        setIsPlaying(false)\n      }\n      \n      audio.onerror = () => {\n        setIsPlaying(false)\n      }\n    }\n  }, [audioBlob, isPlaying])\n\n  const pauseRecording = useCallback(() => {\n    if (audioRef.current && isPlaying) {\n      audioRef.current.pause()\n      setIsPlaying(false)\n    }\n  }, [isPlaying])\n\n  const retakeRecording = useCallback(() => {\n    setAudioBlob(null)\n    setTranscription('')\n    setRecordingDuration(0)\n    setAudioVolume([])\n    onTranscriptionUpdate('')\n    \n    if (audioRef.current) {\n      audioRef.current.pause()\n      audioRef.current = null\n    }\n    setIsPlaying(false)\n  }, [onTranscriptionUpdate])\n\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60)\n    const secs = seconds % 60\n    return `${mins}:${secs.toString().padStart(2, '0')}`\n  }\n\n  return (\n    <div className={`space-y-4 sm:space-y-6 ${className}`}>\n      {/* Recording Interface */}\n      <div className=\"text-center space-y-4\">\n        {!audioBlob ? (\n          <div className=\"space-y-4\">\n            {/* Recording Button */}\n            <div className={`w-28 h-28 sm:w-32 sm:h-32 mx-auto rounded-full border-4 flex items-center justify-center transition-all duration-300 relative whimsy-hover ${\n              isRecording \n                ? 'border-red-500 bg-red-500/10 voice-recording-pulse' \n                : 'border-teal-500 bg-teal-500/10 hover:bg-teal-500/20 hover:scale-105'\n            }`}>\n              <button\n                onClick={isRecording ? stopRecording : startRecording}\n                className=\"w-full h-full rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500 touch-target\"\n                disabled={isProcessing}\n                aria-label={isRecording ? 'Stop recording' : 'Start recording'}\n              >\n                {isRecording ? (\n                  <MicOff className=\"h-10 w-10 sm:h-12 sm:w-12 text-red-500 mx-auto\" />\n                ) : (\n                  <Mic className=\"h-10 w-10 sm:h-12 sm:w-12 text-teal-500 mx-auto\" />\n                )}\n              </button>\n              \n              {/* Recording indicator */}\n              {isRecording && (\n                <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full animate-pulse flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-white rounded-full\"></div>\n                </div>\n              )}\n            </div>\n            \n            {/* Volume Visualization */}\n            {isRecording && audioVolume.length > 0 && (\n              <div className=\"flex items-end justify-center space-x-1 h-12\">\n                {audioVolume.map((volume, index) => (\n                  <div\n                    key={index}\n                    className={`rounded-t-sm transition-all duration-100 ${\n                      volume > 0.6 ? 'bg-red-400' : \n                      volume > 0.3 ? 'bg-yellow-400' : 'bg-teal-500'\n                    }`}\n                    style={{\n                      height: `${Math.max(2, volume * 48)}px`,\n                      width: '4px',\n                      boxShadow: volume > 0.5 ? '0 0 8px currentColor' : 'none'\n                    }}\n                  />\n                ))}\n              </div>\n            )}\n            \n            {/* Recording Status */}\n            <div className=\"space-y-2\">\n              <p className={`text-base sm:text-lg font-medium transition-all duration-300 ${\n                isRecording ? 'animate-pulse text-red-400' : ''\n              }`}>\n                {isRecording ? '🎙️ Recording...' : '🎤 Tap to start recording'}\n              </p>\n              {isRecording && (\n                <p className=\"text-teal-400 font-mono text-lg sm:text-xl animate-pulse\">\n                  ⏱️ {formatDuration(recordingDuration)}\n                </p>\n              )}\n              <p className=\"text-xs sm:text-sm text-muted-foreground px-4\">\n                {isRecording \n                  ? '✋ Tap the microphone again to stop' \n                  : '💡 Speak clearly for best results'\n                }\n              </p>\n            </div>\n          </div>\n        ) : (\n          /* Playback Interface */\n          <div className=\"space-y-4\">\n            {/* Processing State */}\n            {isProcessing && (\n              <div className=\"flex flex-col items-center justify-center space-y-3 text-teal-400\">\n                <div className=\"flex items-center space-x-2\">\n                  <Loader2 className=\"h-5 w-5 animate-spin\" />\n                  <span>🧠 Processing recording...</span>\n                </div>\n                <div className=\"loading-dots\">\n                  <span></span>\n                  <span></span>\n                  <span></span>\n                </div>\n                <p className=\"text-xs text-muted-foreground animate-pulse\">\n                  ✨ Converting speech to text with AI magic\n                </p>\n              </div>\n            )}\n            \n            {/* Playback Controls */}\n            {!isProcessing && (\n              <div className=\"flex items-center justify-center space-x-3 sm:space-x-4\">\n                <Button\n                  variant=\"outline\"\n                  size=\"default\"\n                  onClick={isPlaying ? pauseRecording : playRecording}\n                  className=\"flex items-center space-x-2 touch-target\"\n                  aria-label={isPlaying ? 'Pause recording playback' : 'Play recording'}\n                >\n                  {isPlaying ? (\n                    <Pause className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n                  ) : (\n                    <Play className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n                  )}\n                  <span className=\"hidden sm:inline\">{isPlaying ? 'Pause' : 'Play'} Recording</span>\n                  <span className=\"sm:hidden\">{isPlaying ? 'Pause' : 'Play'}</span>\n                </Button>\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"default\"\n                  onClick={retakeRecording}\n                  className=\"flex items-center space-x-2 text-muted-foreground hover:text-foreground touch-target\"\n                  aria-label=\"Record again\"\n                >\n                  <RotateCcw className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n                  <span>Retake</span>\n                </Button>\n              </div>\n            )}\n            \n            {/* Recording Info */}\n            <div className=\"flex items-center justify-center space-x-4 text-sm text-muted-foreground\">\n              <div className=\"flex items-center space-x-1\">\n                <Volume2 className=\"h-4 w-4\" />\n                <span>Duration: {formatDuration(recordingDuration)}</span>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Transcription Editor */}\n      {transcription && !isProcessing && (\n        <Card className=\"p-4 border-teal-500/20 bg-teal-950/10 animate-in slide-in-from-bottom duration-500\">\n          <div className=\"space-y-3\">\n            <div className=\"text-sm font-medium text-teal-400 flex items-center space-x-2\">\n              <Mic className=\"h-4 w-4 animate-pulse\" />\n              <span>📝 Transcription:</span>\n            </div>\n            \n            <Textarea\n              value={transcription}\n              onChange={(e) => {\n                setTranscription(e.target.value)\n                onTranscriptionUpdate(e.target.value)\n              }}\n              placeholder=\"Edit the transcription if needed...\"\n              className=\"min-h-[100px] bg-background/50 border-teal-500/30 focus:border-teal-500\"\n              rows={4}\n            />\n            \n            <p className=\"text-xs text-muted-foreground\">\n              ✏️ You can edit the transcription above to ensure accuracy.\n            </p>\n          </div>\n        </Card>\n      )}\n    </div>\n  )\n}\n\nexport default VoiceRecorder","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/showcase.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/ui/whimsy.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'konamiCode' array makes the dependencies of useCallback Hook (at line 353) change on every render. Move it inside the useCallback callback. Alternatively, wrap the initialization of 'konamiCode' in its own useMemo() Hook.","line":336,"column":9,"nodeType":"VariableDeclarator","endLine":340,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React, { useState, useEffect, useCallback } from 'react'\nimport { createPortal } from 'react-dom'\nimport { Sparkles, Heart, Star, Zap } from 'lucide-react'\n\n// Confetti Component for celebrations\ninterface ConfettiProps {\n  active: boolean\n  duration?: number\n  colors?: string[]\n  intensity?: 'low' | 'medium' | 'high'\n}\n\nexport const Confetti: React.FC<ConfettiProps> = ({ \n  active, \n  duration = 3000, \n  colors = ['#14b8a6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981'],\n  intensity = 'medium'\n}) => {\n  const [pieces, setPieces] = useState<Array<{\n    id: string\n    x: number\n    y: number\n    color: string\n    size: number\n    rotation: number\n    delay: number\n  }>>([])\n\n  useEffect(() => {\n    if (!active) {\n      setPieces([])\n      return\n    }\n\n    const pieceCount = intensity === 'low' ? 50 : intensity === 'medium' ? 100 : 150\n    const newPieces = Array.from({ length: pieceCount }, (_, i) => ({\n      id: `confetti-${i}`,\n      x: Math.random() * 100,\n      y: -10,\n      color: colors[Math.floor(Math.random() * colors.length)],\n      size: Math.random() * 8 + 4,\n      rotation: Math.random() * 360,\n      delay: Math.random() * 1000\n    }))\n\n    setPieces(newPieces)\n\n    const timer = setTimeout(() => {\n      setPieces([])\n    }, duration)\n\n    return () => clearTimeout(timer)\n  }, [active, duration, colors, intensity])\n\n  if (typeof window === 'undefined' || !active) return null\n\n  return createPortal(\n    <div className=\"fixed inset-0 pointer-events-none z-50\">\n      {pieces.map((piece) => (\n        <div\n          key={piece.id}\n          className=\"confetti-piece absolute\"\n          style={{\n            left: `${piece.x}%`,\n            top: `${piece.y}%`,\n            backgroundColor: piece.color,\n            width: `${piece.size}px`,\n            height: `${piece.size}px`,\n            transform: `rotate(${piece.rotation}deg)`,\n            animationDelay: `${piece.delay}ms`,\n            borderRadius: Math.random() > 0.3 ? '50%' : '2px'\n          }}\n        />\n      ))}\n    </div>,\n    document.body\n  )\n}\n\n// Success checkmark animation\ninterface SuccessCheckmarkProps {\n  show: boolean\n  size?: number\n  color?: string\n}\n\nexport const SuccessCheckmark: React.FC<SuccessCheckmarkProps> = ({ \n  show, \n  size = 64, \n  color = '#10b981' \n}) => {\n  if (!show) return null\n\n  return (\n    <div className=\"success-pulse inline-flex items-center justify-center\">\n      <svg\n        width={size}\n        height={size}\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        className=\"animate-in zoom-in-50 duration-500\"\n      >\n        <circle\n          cx=\"12\"\n          cy=\"12\"\n          r=\"10\"\n          fill={color}\n          className=\"opacity-20\"\n        />\n        <path\n          d=\"M9 12l2 2 4-4\"\n          stroke={color}\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          className=\"animate-in draw-in duration-700 delay-200\"\n          style={{\n            strokeDasharray: '10',\n            strokeDashoffset: '10',\n            animation: 'draw-in 0.7s ease-out 0.2s forwards'\n          }}\n        />\n      </svg>\n    </div>\n  )\n}\n\n// Floating hearts for special moments\ninterface FloatingHeartsProps {\n  active: boolean\n  count?: number\n}\n\nexport const FloatingHearts: React.FC<FloatingHeartsProps> = ({ active, count = 5 }) => {\n  const [hearts, setHearts] = useState<Array<{\n    id: string\n    x: number\n    delay: number\n    color: string\n  }>>([])\n\n  useEffect(() => {\n    if (!active) {\n      setHearts([])\n      return\n    }\n\n    const heartColors = ['#ec4899', '#f472b6', '#f9a8d4', '#fce7f3']\n    const newHearts = Array.from({ length: count }, (_, i) => ({\n      id: `heart-${i}`,\n      x: 20 + Math.random() * 60,\n      delay: i * 200,\n      color: heartColors[Math.floor(Math.random() * heartColors.length)]\n    }))\n\n    setHearts(newHearts)\n\n    const timer = setTimeout(() => {\n      setHearts([])\n    }, 3000)\n\n    return () => clearTimeout(timer)\n  }, [active, count])\n\n  if (!active) return null\n\n  return (\n    <div className=\"fixed inset-0 pointer-events-none z-40\">\n      {hearts.map((heart) => (\n        <div\n          key={heart.id}\n          className=\"floating-hearts absolute bottom-10\"\n          style={{\n            left: `${heart.x}%`,\n            animationDelay: `${heart.delay}ms`,\n            color: heart.color\n          }}\n        >\n          <Heart className=\"w-6 h-6 fill-current\" />\n        </div>\n      ))}\n    </div>\n  )\n}\n\n// Progress milestone celebration\ninterface ProgressMilestoneProps {\n  progress: number\n  milestones?: number[]\n  onMilestone?: (milestone: number) => void\n}\n\nexport const ProgressMilestone: React.FC<ProgressMilestoneProps> = ({ \n  progress, \n  milestones = [25, 50, 75, 100],\n  onMilestone\n}) => {\n  const [celebratedMilestones, setCelebratedMilestones] = useState<Set<number>>(new Set())\n  const [showSparkles, setShowSparkles] = useState(false)\n\n  useEffect(() => {\n    milestones.forEach(milestone => {\n      if (progress >= milestone && !celebratedMilestones.has(milestone)) {\n        setCelebratedMilestones(prev => new Set([...prev, milestone]))\n        setShowSparkles(true)\n        onMilestone?.(milestone)\n        \n        setTimeout(() => setShowSparkles(false), 2000)\n      }\n    })\n  }, [progress, milestones, celebratedMilestones, onMilestone])\n\n  return (\n    <>\n      {showSparkles && (\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          {Array.from({ length: 8 }, (_, i) => (\n            <div\n              key={i}\n              className=\"progress-sparkle absolute\"\n              style={{\n                left: `${10 + Math.random() * 80}%`,\n                top: `${10 + Math.random() * 80}%`,\n                animationDelay: `${i * 100}ms`\n              }}\n            >\n              <Sparkles className=\"w-4 h-4\" />\n            </div>\n          ))}\n        </div>\n      )}\n    </>\n  )\n}\n\n// Loading messages with personality\nconst LOADING_MESSAGES = [\n  \"Brewing some AI magic...\",\n  \"Teaching robots to be helpful...\",\n  \"Consulting the digital oracle...\",\n  \"Calibrating the smart meters...\",\n  \"Arranging pixels just right...\",\n  \"Summoning the data spirits...\",\n  \"Polishing the algorithms...\",\n  \"Charging the creativity batteries...\",\n  \"Aligning the digital stars...\",\n  \"Optimizing for maximum awesomeness...\"\n]\n\ninterface WhimsicalLoadingProps {\n  messages?: string[]\n  interval?: number\n}\n\nexport const WhimsicalLoading: React.FC<WhimsicalLoadingProps> = ({ \n  messages = LOADING_MESSAGES,\n  interval = 2000\n}) => {\n  const [currentIndex, setCurrentIndex] = useState(0)\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentIndex((prev) => (prev + 1) % messages.length)\n    }, interval)\n\n    return () => clearInterval(timer)\n  }, [messages.length, interval])\n\n  return (\n    <div className=\"flex flex-col items-center space-y-4\">\n      <div className=\"loading-dots\">\n        <span></span>\n        <span></span>\n        <span></span>\n      </div>\n      <p className=\"text-sm text-muted-foreground animate-pulse\">\n        {messages[currentIndex]}\n      </p>\n    </div>\n  )\n}\n\n// Button with success state\ninterface WhimsicalButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  showSuccess?: boolean\n  successDuration?: number\n  onSuccessComplete?: () => void\n  children: React.ReactNode\n}\n\nexport const WhimsicalButton: React.FC<WhimsicalButtonProps> = ({\n  showSuccess = false,\n  successDuration = 2000,\n  onSuccessComplete,\n  children,\n  className = '',\n  ...props\n}) => {\n  const [isSuccess, setIsSuccess] = useState(false)\n\n  useEffect(() => {\n    if (showSuccess) {\n      setIsSuccess(true)\n      const timer = setTimeout(() => {\n        setIsSuccess(false)\n        onSuccessComplete?.()\n      }, successDuration)\n      \n      return () => clearTimeout(timer)\n    }\n    return undefined\n  }, [showSuccess, successDuration, onSuccessComplete])\n\n  return (\n    <button\n      {...props}\n      className={`${className} ${isSuccess ? 'button-success' : ''} wobble-on-hover`}\n    >\n      {isSuccess ? (\n        <div className=\"flex items-center space-x-2\">\n          <SuccessCheckmark show={true} size={16} />\n          <span>Success!</span>\n        </div>\n      ) : (\n        children\n      )}\n    </button>\n  )\n}\n\n// Easter egg detection hook\nexport const useKonamiCode = (callback: () => void) => {\n  const [sequence, setSequence] = useState<string[]>([])\n  const konamiCode = [\n    'ArrowUp', 'ArrowUp', 'ArrowDown', 'ArrowDown',\n    'ArrowLeft', 'ArrowRight', 'ArrowLeft', 'ArrowRight',\n    'KeyB', 'KeyA'\n  ]\n\n  const handleKeyDown = useCallback((event: KeyboardEvent) => {\n    setSequence(prev => {\n      const newSequence = [...prev, event.code].slice(-konamiCode.length)\n      \n      if (newSequence.join(',') === konamiCode.join(',')) {\n        callback()\n        return []\n      }\n      \n      return newSequence\n    })\n  }, [callback, konamiCode])\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown)\n    return () => window.removeEventListener('keydown', handleKeyDown)\n  }, [handleKeyDown])\n}\n\n// Number counter animation\ninterface AnimatedCounterProps {\n  value: number\n  duration?: number\n  suffix?: string\n  prefix?: string\n}\n\nexport const AnimatedCounter: React.FC<AnimatedCounterProps> = ({\n  value,\n  duration = 1000,\n  suffix = '',\n  prefix = ''\n}) => {\n  const [count, setCount] = useState(0)\n\n  useEffect(() => {\n    const startTime = Date.now()\n    const startValue = count\n\n    const animate = () => {\n      const elapsed = Date.now() - startTime\n      const progress = Math.min(elapsed / duration, 1)\n      \n      // Easing function for smooth animation\n      const easeOutQuart = 1 - Math.pow(1 - progress, 4)\n      const currentCount = Math.floor(startValue + (value - startValue) * easeOutQuart)\n      \n      setCount(currentCount)\n      \n      if (progress < 1) {\n        requestAnimationFrame(animate)\n      }\n    }\n\n    requestAnimationFrame(animate)\n  }, [value, duration, count])\n\n  return <span>{prefix}{count}{suffix}</span>\n}\n\n// Typewriter effect\ninterface TypewriterProps {\n  text: string\n  speed?: number\n  onComplete?: () => void\n}\n\nexport const Typewriter: React.FC<TypewriterProps> = ({ \n  text, \n  speed = 50, \n  onComplete \n}) => {\n  const [displayText, setDisplayText] = useState('')\n  const [currentIndex, setCurrentIndex] = useState(0)\n\n  useEffect(() => {\n    if (currentIndex < text.length) {\n      const timeout = setTimeout(() => {\n        setDisplayText(prev => prev + text[currentIndex])\n        setCurrentIndex(prev => prev + 1)\n      }, speed)\n\n      return () => clearTimeout(timeout)\n    } else if (currentIndex === text.length && onComplete) {\n      onComplete()\n    }\n    \n    // Ensure all code paths return a value\n    return undefined\n  }, [currentIndex, text, speed, onComplete])\n\n  return (\n    <span className=\"inline-block\">\n      {displayText}\n      {currentIndex < text.length && (\n        <span className=\"animate-pulse\">|</span>\n      )}\n    </span>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/visual-story/achievement-system.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/visual-story/data-visualization.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/visual-story/empty-states.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/visual-story/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/visual-story/jtbd-force-diagram.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/visual-story/onboarding-flow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/visual-story/progress-storyteller.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":309,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9879,9897],"text":"\n                &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9879,9897],"text":"\n                &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9879,9897],"text":"\n                &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9879,9897],"text":"\n                &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":309,"column":37,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9916,9932],"text":"&quot;\n              "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9916,9932],"text":"&ldquo;\n              "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9916,9932],"text":"&#34;\n              "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9916,9932],"text":"&rdquo;\n              "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Progress, CircularProgress } from '@/components/ui/progress'\nimport { Badge } from '@/components/ui/badge'\nimport { \n  CheckCircle, \n  Clock, \n  Target, \n  TrendingUp,\n  Star,\n  Award,\n  Zap,\n  Brain,\n  Users,\n  Database,\n  Shield,\n  Lightbulb,\n  ArrowUp,\n  ArrowDown,\n  Minus\n} from 'lucide-react'\n\ninterface ProgressMilestone {\n  id: string\n  title: string\n  description: string\n  value: number\n  threshold: number\n  achieved: boolean\n  icon: React.ComponentType<{ className?: string }>\n  color: string\n  gradient: string\n  story: string\n  impact: string\n}\n\ninterface StoryChapter {\n  id: string\n  title: string\n  description: string\n  milestones: ProgressMilestone[]\n  overallProgress: number\n  narrative: string\n  visualMetaphor: string\n}\n\nconst progressStory: StoryChapter[] = [\n  {\n    id: 'foundation',\n    title: 'Building the Foundation',\n    description: 'Establishing the groundwork for AI readiness',\n    overallProgress: 25,\n    narrative: 'Like constructing a skyscraper, AI readiness begins with a solid foundation. Every organization starts here.',\n    visualMetaphor: 'foundation-building',\n    milestones: [\n      {\n        id: 'data-infrastructure',\n        title: 'Data Infrastructure',\n        description: 'Basic data collection and storage systems',\n        value: 30,\n        threshold: 25,\n        achieved: true,\n        icon: Database,\n        color: 'blue',\n        gradient: 'from-blue-400 to-cyan-500',\n        story: 'Your data infrastructure is taking shape, like laying the first stones of a foundation.',\n        impact: 'Enables basic data-driven decision making'\n      },\n      {\n        id: 'team-awareness',\n        title: 'Team Awareness',\n        description: 'Staff understanding of AI concepts',\n        value: 20,\n        threshold: 20,\n        achieved: true,\n        icon: Users,\n        color: 'green',\n        gradient: 'from-green-400 to-emerald-500',\n        story: 'Your team is becoming aware of AI possibilities, like seeds beginning to sprout.',\n        impact: 'Creates openness to AI initiatives'\n      },\n      {\n        id: 'governance-basics',\n        title: 'Basic Governance',\n        description: 'Initial policies and guidelines',\n        value: 15,\n        threshold: 30,\n        achieved: false,\n        icon: Shield,\n        color: 'purple',\n        gradient: 'from-purple-400 to-pink-500',\n        story: 'Governance structures are forming, like establishing the blueprint for construction.',\n        impact: 'Provides framework for safe AI adoption'\n      }\n    ]\n  },\n  {\n    id: 'growth',\n    title: 'Accelerating Growth',\n    description: 'Building capabilities and momentum',\n    overallProgress: 55,\n    narrative: 'With foundations in place, growth accelerates. Like a plant reaching toward sunlight, progress becomes visible.',\n    visualMetaphor: 'growth-acceleration',\n    milestones: [\n      {\n        id: 'pilot-projects',\n        title: 'Pilot Projects',\n        description: 'First AI implementation attempts',\n        value: 60,\n        threshold: 50,\n        achieved: true,\n        icon: Lightbulb,\n        color: 'yellow',\n        gradient: 'from-yellow-400 to-orange-500',\n        story: 'Your first AI pilots are showing promise, like early blooms proving the soil is fertile.',\n        impact: 'Demonstrates AI value and builds confidence'\n      },\n      {\n        id: 'skill-development',\n        title: 'Skill Development',\n        description: 'Team training and capability building',\n        value: 50,\n        threshold: 60,\n        achieved: false,\n        icon: Brain,\n        color: 'teal',\n        gradient: 'from-teal-400 to-blue-500',\n        story: 'Skills are developing steadily, like muscles strengthening with exercise.',\n        impact: 'Builds internal AI capabilities'\n      }\n    ]\n  },\n  {\n    id: 'transformation',\n    title: 'Digital Transformation',\n    description: 'Achieving significant AI integration',\n    overallProgress: 80,\n    narrative: 'Transformation is evident. Like a butterfly emerging from chrysalis, your organization is becoming AI-native.',\n    visualMetaphor: 'transformation-emergence',\n    milestones: [\n      {\n        id: 'enterprise-adoption',\n        title: 'Enterprise Adoption',\n        description: 'AI integrated across business units',\n        value: 85,\n        threshold: 75,\n        achieved: true,\n        icon: Target,\n        color: 'green',\n        gradient: 'from-green-500 to-emerald-600',\n        story: 'AI is woven into your operations, like blood flowing through healthy veins.',\n        impact: 'Creates sustainable competitive advantage'\n      },\n      {\n        id: 'innovation-culture',\n        title: 'Innovation Culture',\n        description: 'AI-first mindset across organization',\n        value: 75,\n        threshold: 80,\n        achieved: false,\n        icon: Star,\n        color: 'purple',\n        gradient: 'from-purple-500 to-pink-600',\n        story: 'Innovation culture is blossoming, like a garden coming into full bloom.',\n        impact: 'Drives continuous AI advancement'\n      }\n    ]\n  },\n  {\n    id: 'mastery',\n    title: 'AI Mastery',  \n    description: 'Leading-edge AI capabilities',\n    overallProgress: 95,\n    narrative: 'Mastery achieved. Like a master craftsperson, you create AI solutions that others admire and emulate.',\n    visualMetaphor: 'mastery-excellence',\n    milestones: [\n      {\n        id: 'ai-leadership',\n        title: 'Industry Leadership',\n        description: 'Recognized as AI industry leader',\n        value: 95,\n        threshold: 90,\n        achieved: true,\n        icon: Award,\n        color: 'gold',\n        gradient: 'from-yellow-500 to-orange-600',\n        story: 'Your AI leadership shines like a beacon, guiding others in the industry.',\n        impact: 'Establishes market leadership position'\n      }\n    ]\n  }\n]\n\ninterface ProgressStorytellerProps {\n  currentChapter?: string\n  showNarrative?: boolean\n  interactive?: boolean\n  className?: string\n}\n\nexport function ProgressStoryteller({ \n  currentChapter = 'foundation',\n  showNarrative = true, \n  interactive = true,\n  className \n}: ProgressStorytellerProps) {\n  const [activeChapter, setActiveChapter] = useState(currentChapter)\n  const [animationPhase, setAnimationPhase] = useState(0)\n  const [selectedMilestone, setSelectedMilestone] = useState<ProgressMilestone | null>(null)\n\n  const chapter = progressStory.find(c => c.id === activeChapter) || progressStory[0]\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setAnimationPhase(prev => (prev + 1) % 3)\n    }, 4000)\n    \n    return () => clearInterval(timer)\n  }, [])\n\n  const getTrendIcon = (milestone: ProgressMilestone) => {\n    if (milestone.value > milestone.threshold) return ArrowUp\n    if (milestone.value < milestone.threshold) return ArrowDown\n    return Minus\n  }\n\n  const getTrendColor = (milestone: ProgressMilestone) => {\n    if (milestone.value > milestone.threshold) return 'text-green-500'\n    if (milestone.value < milestone.threshold) return 'text-red-500'\n    return 'text-gray-500'\n  }\n\n  return (\n    <div className={`space-y-8 ${className}`}>\n      {/* Chapter Navigation */}\n      {interactive && (\n        <div className=\"flex justify-center\">\n          <div className=\"flex space-x-2 p-2 bg-muted/50 rounded-lg\">\n            {progressStory.map((story, index) => (\n              <motion.button\n                key={story.id}\n                onClick={() => setActiveChapter(story.id)}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className={`px-4 py-2 text-sm font-medium rounded-md transition-all ${\n                  activeChapter === story.id\n                    ? 'bg-primary text-primary-foreground shadow-md'\n                    : 'hover:bg-muted-foreground/10'\n                }`}\n              >\n                Chapter {index + 1}\n              </motion.button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Chapter Header */}\n      <motion.div\n        key={activeChapter}\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.6 }}\n        className=\"text-center space-y-4\"\n      >\n        <div className=\"relative\">\n          <motion.div\n            animate={{\n              scale: animationPhase === 0 ? 1.05 : 1,\n            }}\n            transition={{ duration: 0.5 }}\n          >\n            <h2 className=\"text-4xl font-bold bg-gradient-to-r from-foreground via-primary to-muted-foreground bg-clip-text text-transparent\">\n              {chapter.title}\n            </h2>\n          </motion.div>\n          \n          {/* Progress Ring */}\n          <motion.div\n            initial={{ scale: 0, rotate: -90 }}\n            animate={{ scale: 1, rotate: 0 }}\n            transition={{ delay: 0.3, duration: 0.8, type: 'spring' }}\n            className=\"absolute -top-4 -right-4 lg:-right-16\"\n          >\n            <CircularProgress\n              value={chapter.overallProgress}\n              size={60}\n              strokeWidth={6}\n              className=\"text-primary\"\n            />\n          </motion.div>\n        </div>\n\n        <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n          {chapter.description}\n        </p>\n\n        {showNarrative && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ delay: 0.5, duration: 0.6 }}\n          >\n            <Card className=\"max-w-3xl mx-auto p-6 bg-gradient-to-r from-primary/5 to-secondary/5 border-primary/20\">\n              <p className=\"text-muted-foreground italic leading-relaxed\">\n                \"{chapter.narrative}\"\n              </p>\n            </Card>\n          </motion.div>\n        )}\n      </motion.div>\n\n      {/* Milestones Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {chapter.milestones.map((milestone, index) => {\n          const Icon = milestone.icon\n          const TrendIcon = getTrendIcon(milestone)\n          const trendColor = getTrendColor(milestone)\n\n          return (\n            <motion.div\n              key={milestone.id}\n              initial={{ opacity: 0, y: 50, scale: 0.9 }}\n              animate={{ opacity: 1, y: 0, scale: 1 }}\n              transition={{ delay: index * 0.2, duration: 0.6 }}\n              whileHover={{ scale: 1.02, y: -5 }}\n              className=\"cursor-pointer\"\n              onClick={() => setSelectedMilestone(milestone)}\n            >\n              <Card className={`relative overflow-hidden transition-all duration-300 hover:shadow-lg hover:border-${milestone.color}-500/50`}>\n                {/* Achievement Badge */}\n                {milestone.achieved && (\n                  <motion.div\n                    initial={{ scale: 0, rotate: -180 }}\n                    animate={{ scale: 1, rotate: 0 }}\n                    transition={{ delay: index * 0.2 + 0.5, duration: 0.5 }}\n                    className=\"absolute top-2 right-2 z-10\"\n                  >\n                    <div className=\"p-1 rounded-full bg-green-500 shadow-lg\">\n                      <CheckCircle className=\"h-4 w-4 text-white\" />\n                    </div>\n                  </motion.div>\n                )}\n\n                {/* Gradient Header */}\n                <div className={`h-1 bg-gradient-to-r ${milestone.gradient}`} />\n\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`p-3 rounded-lg bg-${milestone.color}-100 dark:bg-${milestone.color}-900/20`}>\n                      <Icon className={`h-6 w-6 text-${milestone.color}-600 dark:text-${milestone.color}-400`} />\n                    </div>\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg\">{milestone.title}</CardTitle>\n                      <p className=\"text-sm text-muted-foreground\">{milestone.description}</p>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"space-y-4\">\n                  {/* Progress Bar */}\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">Progress</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-sm font-bold\">{milestone.value}%</span>\n                        <TrendIcon className={`h-4 w-4 ${trendColor}`} />\n                      </div>\n                    </div>\n                    \n                    <div className=\"relative\">\n                      <Progress \n                        value={milestone.value} \n                        className=\"h-3\"\n                      />\n                      {/* Threshold Indicator */}\n                      <div \n                        className=\"absolute top-0 w-0.5 h-3 bg-gray-400 dark:bg-gray-600\"\n                        style={{ left: `${milestone.threshold}%` }}\n                      />\n                    </div>\n                    \n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\n                      <span>Current: {milestone.value}%</span>\n                      <span>Target: {milestone.threshold}%</span>\n                    </div>\n                  </div>\n\n                  {/* Story Text */}\n                  <motion.div\n                    animate={{\n                      opacity: animationPhase === 1 ? 1 : 0.7,\n                    }}\n                    transition={{ duration: 0.5 }}\n                    className=\"p-3 rounded-lg bg-muted/30\"\n                  >\n                    <p className=\"text-sm italic text-muted-foreground\">\n                      {milestone.story}\n                    </p>\n                  </motion.div>\n\n                  {/* Impact Badge */}\n                  <Badge \n                    variant=\"outline\" \n                    className={`text-xs border-${milestone.color}-500/30 text-${milestone.color}-600 dark:text-${milestone.color}-400`}\n                  >\n                    <Zap className=\"h-3 w-3 mr-1\" />\n                    {milestone.impact}\n                  </Badge>\n                </CardContent>\n              </Card>\n            </motion.div>\n          )\n        })}\n      </div>\n\n      {/* Overall Chapter Progress */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.8, duration: 0.6 }}\n      >\n        <Card className=\"p-6\">\n          <div className=\"text-center space-y-4\">\n            <h3 className=\"text-xl font-semibold\">Chapter Progress</h3>\n            \n            <div className=\"max-w-md mx-auto\">\n              <div className=\"flex justify-between mb-2\">\n                <span className=\"text-sm font-medium\">Overall Completion</span>\n                <span className=\"text-sm font-bold\">{chapter.overallProgress}%</span>\n              </div>\n              \n              <Progress \n                value={chapter.overallProgress} \n                variant=\"gradient\"\n                className=\"h-4\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4 text-center\">\n              <div>\n                <div className=\"text-2xl font-bold text-green-500\">\n                  {chapter.milestones.filter(m => m.achieved).length}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Achieved</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-yellow-500\">\n                  {chapter.milestones.filter(m => !m.achieved && m.value >= m.threshold * 0.7).length}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">In Progress</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-gray-500\">\n                  {chapter.milestones.filter(m => !m.achieved && m.value < m.threshold * 0.7).length}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Not Started</div>\n              </div>\n            </div>\n          </div>\n        </Card>\n      </motion.div>\n\n      {/* Milestone Detail Modal */}\n      <AnimatePresence>\n        {selectedMilestone && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\"\n            onClick={() => setSelectedMilestone(null)}\n          >\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.9, opacity: 0 }}\n              onClick={(e) => e.stopPropagation()}\n              className=\"max-w-lg w-full\"\n            >\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-6\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className={`p-3 rounded-lg bg-${selectedMilestone.color}-100 dark:bg-${selectedMilestone.color}-900/20`}>\n                      <selectedMilestone.icon className={`h-8 w-8 text-${selectedMilestone.color}-600 dark:text-${selectedMilestone.color}-400`} />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-xl\">{selectedMilestone.title}</CardTitle>\n                      {selectedMilestone.achieved && (\n                        <Badge className=\"mt-1 bg-green-500 text-white\">\n                          <Award className=\"h-3 w-3 mr-1\" />\n                          Achieved\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"p-0 space-y-6\">\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Story</h4>\n                    <p className=\"text-muted-foreground italic\">{selectedMilestone.story}</p>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Impact</h4>\n                    <p className=\"text-muted-foreground\">{selectedMilestone.impact}</p>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Progress Details</h4>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span>Current Progress</span>\n                        <span className=\"font-medium\">{selectedMilestone.value}%</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Target Threshold</span>\n                        <span className=\"font-medium\">{selectedMilestone.threshold}%</span>\n                      </div>\n                      <Progress value={selectedMilestone.value} className=\"h-2\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/components/visual-story/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/admin-flows.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/api-integration.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/auth-flows.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/auth-login-redirect.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/auth.cleanup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/auth.setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/cleanup.setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/critical-paths-basic.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/critical-user-journey.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/dashboard-flows.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/deployment-validation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/enhanced-deployment-validation.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/epipe-stress-test.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/fixtures/test-data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/fixtures/test-setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/global-setup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/global-setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/global-setup.working.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/global-teardown.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/global-teardown.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/global-teardown.working.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/survey-flows.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/ui-enhancements.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/ui-test-helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/utils/api-test-helpers.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":505,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":510,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// API Test Helpers - Utilities for API integration testing\n// Provides reusable functions for authentication, data generation, and validation\n\nimport { Page, APIResponse } from '@playwright/test'\nimport type { \n  User, \n  Survey, \n  SurveyResponse, \n  ExportOptions\n} from '../../lib/types'\nimport type { LLMConfig, JTBDForceType } from '../../lib/types/llm'\n\nexport interface TestUser {\n  email: string\n  password: string\n  userId: string\n  organizationId: string\n  firstName: string\n  lastName: string\n  organizationName: string\n  role: 'admin' | 'user' | 'org_admin'\n}\n\nexport interface APITestResponse {\n  status: number\n  headers: Record<string, string>\n  data: any\n  response: APIResponse\n  duration?: number\n}\n\nexport interface TestDataSets {\n  validUsers: TestUser[]\n  invalidUsers: Partial<TestUser>[]\n  surveyResponses: any[]\n  exportOptions: ExportOptions[]\n  xssPayloads: string[]\n  sqlInjectionPayloads: string[]\n}\n\nexport class APITestDataGenerator {\n  private static instance: APITestDataGenerator\n  private counter = 0\n\n  static getInstance(): APITestDataGenerator {\n    if (!APITestDataGenerator.instance) {\n      APITestDataGenerator.instance = new APITestDataGenerator()\n    }\n    return APITestDataGenerator.instance\n  }\n\n  private getUniqueId(): string {\n    return `${Date.now()}-${++this.counter}`\n  }\n\n  generateTestUser(role: 'user' | 'org_admin' | 'admin' = 'user'): TestUser {\n    const id = this.getUniqueId()\n    return {\n      email: `test-${id}@test-aireadiness.com`,\n      password: 'TestPassword123!',\n      firstName: 'API Test',\n      lastName: `User ${id}`,\n      organizationName: 'Test Org Inc',\n      userId: `user-${id}`,\n      organizationId: `org-${id}`,\n      role\n    }\n  }\n\n  generateBulkTestUsers(count: number, role: 'user' | 'org_admin' | 'admin' = 'user'): TestUser[] {\n    return Array(count).fill(null).map(() => this.generateTestUser(role))\n  }\n\n  generateSurveyResponse(force: JTBDForceType = 'pull_of_new', complexity: 'simple' | 'complex' = 'simple') {\n    const responses = {\n      pull_of_new: {\n        simple: \"I'm excited about AI automation tools helping with repetitive tasks.\",\n        complex: \"I'm really excited about the potential for AI tools to help automate many of the repetitive, manual processes in my daily workflow. The current state of having to manually process reports, update spreadsheets, and manage routine communications is time-consuming and error-prone. I can see AI helping us become much more efficient and allowing us to focus on higher-value strategic work that requires human creativity and judgment.\"\n      },\n      pain_of_old: {\n        simple: \"Current manual processes are frustrating and inefficient.\",\n        complex: \"The manual processes we currently use are incredibly frustrating and waste so much time. I spend hours each day on data entry, copying information between systems, and generating the same reports over and over. These tasks are error-prone and mind-numbing, and they prevent me from doing more meaningful work. The inefficiency is costing us productivity and employee satisfaction.\"\n      },\n      anxiety_of_new: {\n        simple: \"I'm worried about job security with AI adoption.\",\n        complex: \"I have significant concerns about how AI adoption might affect job security and the nature of our work. Will AI replace human workers? How do we ensure data privacy and security? I'm worried about the learning curve and whether older employees will be able to adapt. There are also concerns about bias in AI systems and making decisions we don't fully understand.\"\n      },\n      anchors_to_old: {\n        simple: \"We have established processes that work well currently.\",\n        complex: \"Our current processes and systems have been refined over years and work well for our organization. We've invested heavily in training, documentation, and integration with existing systems. There's institutional knowledge embedded in our current workflows that might be lost with rapid change. Many team members are comfortable with current tools and changing everything at once could be disruptive to operations.\"\n      },\n      demographic: {\n        simple: \"I work in engineering and have 5 years experience.\",\n        complex: \"I work as a Senior Software Engineer in the Product Development team, reporting to the VP of Engineering. I have 8 years of experience in software development, primarily working with cloud infrastructure and microservices. My department focuses on platform reliability and developer tooling. I'm located in the Austin office and work hybrid (3 days in office, 2 remote).\"\n      }\n    }\n\n    const id = this.getUniqueId()\n    return {\n      responseId: `test-response-${id}`,\n      responseText: responses[force][complexity],\n      questionText: this.getQuestionForForce(force),\n      expectedForce: force,\n      questionContext: 'AI readiness assessment - automated testing',\n      organizationId: `test-org-${id}`,\n      surveyId: `test-survey-${id}`,\n      employeeRole: 'Senior Software Engineer',\n      employeeDepartment: 'Engineering'\n    }\n  }\n\n  private getQuestionForForce(force: JTBDForceType): string {\n    const questions = {\n      pull_of_new: \"What excites you most about AI adoption in your work?\",\n      pain_of_old: \"What are your biggest frustrations with current work processes?\",\n      anxiety_of_new: \"What concerns do you have about AI implementation?\",\n      anchors_to_old: \"What works well about your current processes and tools?\",\n      demographic: \"Tell us about your role and experience in the organization.\"\n    }\n    return questions[force]\n  }\n\n  generateBatchAnalysisRequest(size: number = 5) {\n    const forces: JTBDForceType[] = ['pull_of_new', 'pain_of_old', 'anxiety_of_new', 'anchors_to_old']\n    \n    return {\n      responses: Array(size).fill(null).map((_, idx) => {\n        const force = forces[idx % forces.length]\n        const response = this.generateSurveyResponse(force, idx % 2 === 0 ? 'simple' : 'complex')\n        return {\n          responseId: response.responseId,\n          userResponse: response.responseText,\n          questionText: response.questionText,\n          expectedForce: response.expectedForce,\n          employeeRole: response.employeeRole,\n          employeeDepartment: response.employeeDepartment,\n          organizationName: 'Test Organization Inc'\n        }\n      }),\n      options: {\n        parallel: true,\n        includeOrganizationalAnalysis: true,\n        qualityThreshold: 0.7\n      }\n    }\n  }\n\n  generateExportOptions(format: 'csv' | 'json' | 'pdf' = 'csv'): ExportOptions {\n    return {\n      format,\n      includePersonalData: false,\n      dateRange: {\n        start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n        end: new Date().toISOString()\n      },\n      filters: {\n        department: 'Engineering',\n        status: 'completed',\n        role: 'user'\n      }\n    }\n  }\n\n  getSecurityTestPayloads() {\n    return {\n      xss: [\n        '<script>alert(\"xss\")</script>',\n        '\"><img src=x onerror=alert(\"xss\")>',\n        'javascript:alert(\"xss\")',\n        '<svg onload=alert(\"xss\")>',\n        '${7*7}{{7*7}}',\n        '<iframe src=\"javascript:alert(`xss`)\">',\n        'data:text/html,<script>alert(\"xss\")</script>'\n      ],\n      sqlInjection: [\n        \"'; DROP TABLE users; --\",\n        \"' OR '1'='1\",\n        \"' UNION SELECT * FROM users --\",\n        \"admin'--\",\n        \"' OR 1=1#\",\n        \"'; INSERT INTO users VALUES ('hacker', 'password'); --\"\n      ],\n      pathTraversal: [\n        '../../../etc/passwd',\n        '..\\\\..\\\\..\\\\windows\\\\system32\\\\config\\\\sam',\n        '/etc/shadow',\n        'C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts'\n      ],\n      commandInjection: [\n        '; cat /etc/passwd',\n        '| whoami',\n        '`rm -rf /`',\n        '$(id)',\n        '&& echo vulnerable'\n      ]\n    }\n  }\n\n  generateLargePayload(sizeKB: number): string {\n    const baseString = 'This is a large payload for testing API limits and performance with substantial content. '\n    const targetLength = sizeKB * 1024\n    const repeatCount = Math.ceil(targetLength / baseString.length)\n    return baseString.repeat(repeatCount).substring(0, targetLength)\n  }\n\n  generateInvalidDataSets() {\n    return {\n      emptyStrings: {\n        responseText: '',\n        questionText: '',\n        expectedForce: 'pull_of_new'\n      },\n      nullValues: {\n        responseText: null,\n        questionText: null,\n        expectedForce: null\n      },\n      wrongTypes: {\n        responseText: 123,\n        questionText: [],\n        expectedForce: true\n      },\n      invalidEnums: {\n        responseText: 'Valid response',\n        questionText: 'Valid question',\n        expectedForce: 'invalid_force_type'\n      },\n      oversizedContent: {\n        responseText: this.generateLargePayload(100), // 100KB\n        questionText: this.generateLargePayload(10),  // 10KB\n        expectedForce: 'pull_of_new'\n      }\n    }\n  }\n}\n\nexport class APIAuthenticationHelper {\n  constructor(private page: Page) {}\n\n  async loginAsRole(role: 'admin' | 'org_admin' | 'user' = 'admin'): Promise<void> {\n    const credentials = this.getCredentialsForRole(role)\n    \n    await this.page.goto('/auth/login')\n    await this.page.fill('[name=\"email\"]', credentials.email)\n    await this.page.fill('[name=\"password\"]', credentials.password)\n    await this.page.click('button[type=\"submit\"]')\n    \n    // Wait for successful login\n    if (role === 'admin') {\n      await this.page.waitForURL('/admin', { timeout: 10000 })\n    } else {\n      await this.page.waitForURL('/dashboard', { timeout: 10000 })\n    }\n  }\n\n  private getCredentialsForRole(role: string) {\n    const credentials = {\n      admin: { email: 'admin@test-aireadiness.com', password: 'TestPassword123!' },\n      org_admin: { email: 'orgadmin@test-aireadiness.com', password: 'TestPassword123!' },\n      user: { email: 'user@test-aireadiness.com', password: 'TestPassword123!' }\n    }\n    return credentials[role as keyof typeof credentials] || credentials.admin\n  }\n\n  async getAuthHeaders(): Promise<Record<string, string>> {\n    const cookies = await this.page.context().cookies()\n    const sessionCookie = cookies.find(c => c.name.includes('supabase') || c.name.includes('session'))\n    \n    return {\n      'Content-Type': 'application/json',\n      'Cookie': sessionCookie ? `${sessionCookie.name}=${sessionCookie.value}` : '',\n      'User-Agent': 'Playwright API Test',\n      'Accept': 'application/json'\n    }\n  }\n\n  async isAuthenticated(): Promise<boolean> {\n    try {\n      const cookies = await this.page.context().cookies()\n      return cookies.some(c => c.name.includes('supabase') && c.value.length > 0)\n    } catch {\n      return false\n    }\n  }\n\n  async logout(): Promise<void> {\n    await this.page.goto('/auth/logout')\n    await this.page.waitForURL('/auth/login', { timeout: 5000 })\n  }\n}\n\nexport class APIValidationHelper {\n  static validateResponseStructure(response: any, expectedFields: string[]): { valid: boolean; missing: string[] } {\n    const missing = expectedFields.filter(field => !(field in response))\n    return {\n      valid: missing.length === 0,\n      missing\n    }\n  }\n\n  static validateJTBDAnalysisResult(result: any): { valid: boolean; errors: string[] } {\n    const errors: string[] = []\n    const requiredFields = [\n      'primaryJtbdForce',\n      'forceStrengthScore',\n      'confidenceScore',\n      'keyThemes',\n      'sentimentAnalysis',\n      'actionableInsights'\n    ]\n\n    // Check required fields\n    const fieldValidation = this.validateResponseStructure(result, requiredFields)\n    errors.push(...fieldValidation.missing.map(field => `Missing required field: ${field}`))\n\n    // Validate score ranges\n    if (result.forceStrengthScore < 1 || result.forceStrengthScore > 5) {\n      errors.push('Force strength score must be between 1 and 5')\n    }\n\n    if (result.confidenceScore < 1 || result.confidenceScore > 5) {\n      errors.push('Confidence score must be between 1 and 5')\n    }\n\n    // Validate JTBD force enum\n    const validForces = ['pain_of_old', 'pull_of_new', 'anchors_to_old', 'anxiety_of_new', 'demographic']\n    if (!validForces.includes(result.primaryJtbdForce)) {\n      errors.push(`Invalid primary JTBD force: ${result.primaryJtbdForce}`)\n    }\n\n    // Validate sentiment analysis\n    if (result.sentimentAnalysis) {\n      const sentiment = result.sentimentAnalysis\n      if (sentiment.overallScore < -1 || sentiment.overallScore > 1) {\n        errors.push('Sentiment score must be between -1 and 1')\n      }\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    }\n  }\n\n  static validateSecurityHeaders(headers: Record<string, string>): { valid: boolean; missing: string[] } {\n    const requiredSecurityHeaders = [\n      'x-content-type-options',\n      'x-frame-options'\n    ]\n\n    const missing = requiredSecurityHeaders.filter(header => !headers[header])\n    return {\n      valid: missing.length === 0,\n      missing\n    }\n  }\n\n  static validatePerformance(duration: number, maxDuration: number): { valid: boolean; message: string } {\n    const valid = duration <= maxDuration\n    return {\n      valid,\n      message: valid \n        ? `Performance OK: ${duration}ms <= ${maxDuration}ms`\n        : `Performance issue: ${duration}ms > ${maxDuration}ms`\n    }\n  }\n}\n\nexport class APIPerformanceMonitor {\n  private measurements: Array<{ endpoint: string; method: string; duration: number; timestamp: Date }> = []\n\n  async measureRequest<T>(\n    endpoint: string,\n    method: string,\n    requestFn: () => Promise<T>\n  ): Promise<{ result: T; duration: number }> {\n    const start = performance.now()\n    const result = await requestFn()\n    const duration = performance.now() - start\n\n    this.measurements.push({\n      endpoint,\n      method,\n      duration,\n      timestamp: new Date()\n    })\n\n    return { result, duration }\n  }\n\n  getAverageResponseTime(endpoint?: string): number {\n    const relevantMeasurements = endpoint \n      ? this.measurements.filter(m => m.endpoint === endpoint)\n      : this.measurements\n\n    if (relevantMeasurements.length === 0) return 0\n\n    const total = relevantMeasurements.reduce((sum, m) => sum + m.duration, 0)\n    return total / relevantMeasurements.length\n  }\n\n  getSlowestEndpoints(limit: number = 5): Array<{ endpoint: string; averageDuration: number }> {\n    const endpointStats = new Map<string, { total: number; count: number }>()\n\n    this.measurements.forEach(m => {\n      const current = endpointStats.get(m.endpoint) || { total: 0, count: 0 }\n      endpointStats.set(m.endpoint, {\n        total: current.total + m.duration,\n        count: current.count + 1\n      })\n    })\n\n    return Array.from(endpointStats.entries())\n      .map(([endpoint, stats]) => ({\n        endpoint,\n        averageDuration: stats.total / stats.count\n      }))\n      .sort((a, b) => b.averageDuration - a.averageDuration)\n      .slice(0, limit)\n  }\n\n  generatePerformanceReport(): string {\n    const totalRequests = this.measurements.length\n    const averageResponseTime = this.getAverageResponseTime()\n    const slowestEndpoints = this.getSlowestEndpoints()\n\n    return `\nPerformance Report:\n- Total API requests: ${totalRequests}\n- Average response time: ${averageResponseTime.toFixed(2)}ms\n- Slowest endpoints:\n${slowestEndpoints.map(e => `  - ${e.endpoint}: ${e.averageDuration.toFixed(2)}ms`).join('\\n')}\n    `.trim()\n  }\n\n  reset(): void {\n    this.measurements = []\n  }\n}\n\n// Export singleton instances for shared use\nconst testDataGeneratorInstance = APITestDataGenerator.getInstance()\nconst performanceMonitorInstance = new APIPerformanceMonitor()\n\n// Export using different variable names to avoid conflicts\n// Removed duplicate exports - these are available in the default export\n\n// Utility functions for common test patterns\nexport async function withRetry<T>(\n  operation: () => Promise<T>,\n  maxRetries: number = 3,\n  delay: number = 1000\n): Promise<T> {\n  let lastError: Error\n\n  for (let i = 0; i <= maxRetries; i++) {\n    try {\n      return await operation()\n    } catch (error) {\n      lastError = error as Error\n      if (i < maxRetries) {\n        await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, i)))\n      }\n    }\n  }\n\n  throw lastError!\n}\n\n// Define createAPIClient function\nfunction createAPIClient(page: Page) {\n  return {\n    auth: new APIAuthenticationHelper(page),\n    data: testDataGeneratorInstance,\n    validation: APIValidationHelper,\n    performance: performanceMonitorInstance,\n    \n    async request(endpoint: string, options: any = {}): Promise<APITestResponse> {\n      const baseUrl = process.env.PLAYWRIGHT_TEST_BASE_URL || 'http://localhost:3000'\n      const url = `${baseUrl}/api${endpoint}`\n      \n      const authHeaders = await new APIAuthenticationHelper(page).getAuthHeaders()\n      \n      const response = await page.request.fetch(url, {\n        ...options,\n        headers: {\n          ...authHeaders,\n          ...options.headers\n        }\n      })\n\n      const responseData = await response.json().catch(() => ({}))\n      \n      return {\n        status: response.status(),\n        headers: response.headers(),\n        data: responseData,\n        response\n      }\n    }\n  }\n}\n\n// Default export for modules expecting it\nexport default {\n  testDataGenerator: testDataGeneratorInstance,\n  performanceMonitor: performanceMonitorInstance,\n  withRetry,\n  createAPIClient\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/utils/epipe-prevention-setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/utils/epipe-prevention-teardown.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/utils/supabase-mock-server.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/e2e/working-tests.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/jest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/jest.config.performance.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/jest.config.test-infrastructure.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/jest.config.test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/jest.setup.database.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/jest.setup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/jest.setup.performance.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/auth/context.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'supabase.auth'. Either include it or remove the dependency array.","line":98,"column":6,"nodeType":"ArrayExpression","endLine":98,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [supabase.auth]","fix":{"range":[3603,3605],"text":"[supabase.auth]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\n\nimport React, { createContext, useContext, useEffect, useState } from 'react'\nimport { User, Session, AuthError } from '@supabase/supabase-js'\nimport { createBrowserClient } from '@/lib/supabase/client-browser'\nimport { User as AppUser } from '@/lib/types'\n\ninterface AuthContextType {\n  user: AppUser | null\n  session: Session | null\n  loading: boolean\n  signIn: (email: string, password: string) => Promise<{ error?: AuthError }>\n  signUp: (email: string, password: string, metadata?: any) => Promise<{ error?: AuthError }>\n  signOut: () => Promise<{ error?: AuthError }>\n  resetPassword: (email: string) => Promise<{ error?: AuthError }>\n  updatePassword: (password: string) => Promise<{ error?: AuthError }>\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  session: null,\n  loading: true,\n  signIn: async () => ({ error: new Error('Not implemented') as AuthError }),\n  signUp: async () => ({ error: new Error('Not implemented') as AuthError }),\n  signOut: async () => ({ error: new Error('Not implemented') as AuthError }),\n  resetPassword: async () => ({ error: new Error('Not implemented') as AuthError }),\n  updatePassword: async () => ({ error: new Error('Not implemented') as AuthError })\n})\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n\ninterface AuthProviderProps {\n  children: React.ReactNode\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<AppUser | null>(null)\n  const [session, setSession] = useState<Session | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [supabase] = useState(() => createBrowserClient())\n\n  // Convert Supabase User to AppUser\n  const mapSupabaseUserToAppUser = (supabaseUser: User): AppUser => {\n    return {\n      id: supabaseUser.id,\n      email: supabaseUser.email || '',\n      role: (supabaseUser.user_metadata?.role as any) || 'user',\n      organizationId: supabaseUser.user_metadata?.organization_id,\n      profile: supabaseUser.user_metadata?.profile && {\n        id: supabaseUser.user_metadata.profile.id,\n        userId: supabaseUser.id,\n        firstName: supabaseUser.user_metadata.profile.firstName,\n        lastName: supabaseUser.user_metadata.profile.lastName,\n        avatar: supabaseUser.user_metadata.profile.avatar,\n        department: supabaseUser.user_metadata.profile.department,\n        jobTitle: supabaseUser.user_metadata.profile.jobTitle,\n        preferences: {\n          theme: 'dark',\n          notifications: true,\n          voiceInput: false,\n          language: 'en',\n          ...supabaseUser.user_metadata.profile.preferences\n        }\n      },\n      createdAt: supabaseUser.created_at,\n      updatedAt: supabaseUser.updated_at || supabaseUser.created_at,\n      lastLogin: supabaseUser.last_sign_in_at || undefined\n    }\n  }\n\n  useEffect(() => {\n    // Get initial session\n    const getInitialSession = async () => {\n      const { data: { session } } = await supabase.auth.getSession()\n      setSession(session)\n      setUser(session?.user ? mapSupabaseUserToAppUser(session.user) : null)\n      setLoading(false)\n    }\n\n    getInitialSession()\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      (event, session) => {\n        setSession(session)\n        setUser(session?.user ? mapSupabaseUserToAppUser(session.user) : null)\n        setLoading(false)\n      }\n    )\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      console.log('[Auth Context] Attempting sign in with:', { email, supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL })\n      \n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      })\n      \n      if (error) {\n        console.error('[Auth Context] Sign in error:', error)\n        return { error }\n      }\n      \n      if (data?.session) {\n        console.log('[Auth Context] Sign in successful, session created:', {\n          sessionId: data.session.access_token?.substring(0, 20) + '...',\n          userId: data.session.user?.id,\n          expires: data.session.expires_at\n        })\n        \n        // For test environments, also store session in sessionStorage as backup\n        const isTestEnv = process.env.NODE_ENV === 'test' || \n                         process.env.ENVIRONMENT === 'test' ||\n                         window.location.hostname === 'localhost'\n        \n        if (isTestEnv && typeof window !== 'undefined') {\n          try {\n            sessionStorage.setItem('supabase-test-session', JSON.stringify(data.session))\n            console.log('[Auth Context] Test session backup stored')\n          } catch (e) {\n            console.warn('[Auth Context] Failed to store test session backup:', e)\n          }\n        }\n      }\n      \n      return { error: undefined }\n    } catch (err) {\n      console.error('[Auth Context] SignIn unexpected error:', err)\n      return { error: err as AuthError }\n    }\n  }\n\n  const signUp = async (email: string, password: string, metadata?: any) => {\n    try {\n      // Extract firstName and lastName from nested profile if present\n      const data = metadata?.profile ? {\n        firstName: metadata.profile.firstName || '',\n        lastName: metadata.profile.lastName || '',\n        organizationName: metadata.profile.organizationName || ''\n      } : metadata || {}\n\n      const { error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data,\n          emailRedirectTo: `${window.location.origin}/auth/verify-email-success`\n        }\n      })\n      return { error: error || undefined }\n    } catch (err) {\n      console.error('SignUp error:', err)\n      return { error: err as AuthError }\n    }\n  }\n\n  const signOut = async () => {\n    try {\n      const { error } = await supabase.auth.signOut()\n      return { error: error || undefined }\n    } catch (err) {\n      console.error('SignOut error:', err)\n      return { error: err as AuthError }\n    }\n  }\n\n  const resetPassword = async (email: string) => {\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/auth/reset-password`\n      })\n      return { error: error || undefined }\n    } catch (err) {\n      console.error('ResetPassword error:', err)\n      return { error: err as AuthError }\n    }\n  }\n\n  const updatePassword = async (password: string) => {\n    try {\n      const { error } = await supabase.auth.updateUser({\n        password\n      })\n      return { error: error || undefined }\n    } catch (err) {\n      console.error('UpdatePassword error:', err)\n      return { error: err as AuthError }\n    }\n  }\n\n  const value: AuthContextType = {\n    user,\n    session,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n    resetPassword,\n    updatePassword\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/auth/schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/auth/signup-fix.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/brand-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/config/llm-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/data/survey-questions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/design-system.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/hooks/use-auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/hooks/use-export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/hooks/use-llm-analysis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/hooks/use-toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/hooks/use-whimsy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/security/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/security/csrf.ts","messages":[{"ruleId":"import/no-anonymous-default-export","severity":1,"message":"Assign object to a variable before exporting as module default","line":430,"column":1,"nodeType":"ExportDefaultDeclaration","endLine":438,"endColumn":2}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * CSRF Protection Implementation\n * Provides Cross-Site Request Forgery protection for forms and API endpoints\n */\n\nimport { NextRequest } from 'next/server'\n\n// CSRF token configuration\nexport interface CSRFConfig {\n  secret: string\n  tokenLength: number\n  cookieName: string\n  headerName: string\n  sessionTimeout: number // in milliseconds\n  secure: boolean\n  sameSite: 'strict' | 'lax' | 'none'\n}\n\n// Default CSRF configuration\nconst defaultConfig: CSRFConfig = {\n  secret: process.env.CSRF_SECRET || 'default-csrf-secret-change-in-production',\n  tokenLength: 32,\n  cookieName: 'csrf-token',\n  headerName: 'x-csrf-token',\n  sessionTimeout: 24 * 60 * 60 * 1000, // 24 hours\n  secure: process.env.NODE_ENV === 'production',\n  sameSite: 'strict'\n}\n\n// Token store for server-side validation\ninterface CSRFTokenData {\n  token: string\n  timestamp: number\n  userAgent?: string\n  ip?: string\n}\n\nclass CSRFTokenStore {\n  private tokens = new Map<string, CSRFTokenData>()\n  private cleanupInterval: NodeJS.Timeout\n\n  constructor() {\n    // Clean up expired tokens every hour\n    this.cleanupInterval = setInterval(() => {\n      this.cleanup()\n    }, 60 * 60 * 1000)\n  }\n\n  set(sessionId: string, tokenData: CSRFTokenData): void {\n    this.tokens.set(sessionId, tokenData)\n  }\n\n  get(sessionId: string): CSRFTokenData | undefined {\n    const tokenData = this.tokens.get(sessionId)\n    if (tokenData && Date.now() - tokenData.timestamp < defaultConfig.sessionTimeout) {\n      return tokenData\n    }\n    if (tokenData) {\n      this.tokens.delete(sessionId)\n    }\n    return undefined\n  }\n\n  delete(sessionId: string): void {\n    this.tokens.delete(sessionId)\n  }\n\n  cleanup(): void {\n    const now = Date.now()\n    for (const [sessionId, tokenData] of this.tokens.entries()) {\n      if (now - tokenData.timestamp >= defaultConfig.sessionTimeout) {\n        this.tokens.delete(sessionId)\n      }\n    }\n  }\n\n  destroy(): void {\n    clearInterval(this.cleanupInterval)\n    this.tokens.clear()\n  }\n}\n\n// Global token store\nconst tokenStore = new CSRFTokenStore()\n\n/**\n * Generate a cryptographically secure random token\n */\nfunction generateSecureToken(length: number = defaultConfig.tokenLength): string {\n  const array = new Uint8Array(length)\n  if (typeof globalThis !== 'undefined' && globalThis.crypto) {\n    globalThis.crypto.getRandomValues(array)\n  } else {\n    // Fallback for build time\n    for (let i = 0; i < array.length; i++) {\n      array[i] = Math.floor(Math.random() * 256)\n    }\n  }\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('')\n}\n\n/**\n * Generate HMAC signature for token validation\n */\nasync function generateTokenSignature(token: string, secret: string, timestamp: number): Promise<string> {\n  const data = `${token}:${timestamp}`\n  const encoder = new TextEncoder()\n  const key = await globalThis.crypto.subtle.importKey(\n    'raw',\n    encoder.encode(secret),\n    { name: 'HMAC', hash: 'SHA-256' },\n    false,\n    ['sign']\n  )\n  const signature = await globalThis.crypto.subtle.sign(\n    'HMAC',\n    key,\n    encoder.encode(data)\n  )\n  return Array.from(new Uint8Array(signature))\n    .map(b => b.toString(16).padStart(2, '0'))\n    .join('')\n}\n\n/**\n * Synchronous signature generation for compatibility\n */\nfunction generateTokenSignatureSync(token: string, secret: string, timestamp: number): string {\n  // Simple hash for build time - not cryptographically secure\n  const data = `${token}:${timestamp}:${secret}`\n  let hash = 0\n  for (let i = 0; i < data.length; i++) {\n    const char = data.charCodeAt(i)\n    hash = ((hash << 5) - hash) + char\n    hash = hash & hash\n  }\n  return Math.abs(hash).toString(16).padStart(64, '0')\n}\n\n/**\n * Create a CSRF token with signature\n */\nexport function createCSRFToken(\n  sessionId: string,\n  config: CSRFConfig = defaultConfig,\n  userAgent?: string,\n  ip?: string\n): string {\n  const token = generateSecureToken(config.tokenLength)\n  const timestamp = Date.now()\n  const signature = generateTokenSignatureSync(token, config.secret, timestamp)\n  \n  // Store token data for server-side validation\n  tokenStore.set(sessionId, {\n    token,\n    timestamp,\n    userAgent,\n    ip\n  })\n  \n  // Return token with timestamp and signature\n  return `${token}:${timestamp}:${signature}`\n}\n\n/**\n * Validate CSRF token\n */\nexport function validateCSRFToken(\n  sessionId: string,\n  providedToken: string,\n  config: CSRFConfig = defaultConfig,\n  userAgent?: string,\n  ip?: string\n): { valid: boolean; error?: string } {\n  try {\n    // Parse provided token\n    const parts = providedToken.split(':')\n    if (parts.length !== 3) {\n      return { valid: false, error: 'Invalid token format' }\n    }\n\n    const [token, timestampStr, signature] = parts\n    const timestamp = parseInt(timestampStr, 10)\n\n    if (isNaN(timestamp)) {\n      return { valid: false, error: 'Invalid timestamp in token' }\n    }\n\n    // Check token expiration\n    if (Date.now() - timestamp > config.sessionTimeout) {\n      return { valid: false, error: 'Token has expired' }\n    }\n\n    // Verify signature - using simple comparison for now\n    // TODO: Implement constant-time comparison for production\n    const expectedSignature = generateTokenSignatureSync(token, config.secret, timestamp)\n    if (signature !== expectedSignature) {\n      return { valid: false, error: 'Invalid token signature' }\n    }\n\n    // Verify against stored token\n    const storedTokenData = tokenStore.get(sessionId)\n    if (!storedTokenData) {\n      return { valid: false, error: 'Token not found or expired' }\n    }\n\n    if (storedTokenData.token !== token) {\n      return { valid: false, error: 'Token mismatch' }\n    }\n\n    // Optional: Verify user agent and IP for additional security\n    if (storedTokenData.userAgent && userAgent && storedTokenData.userAgent !== userAgent) {\n      return { valid: false, error: 'User agent mismatch' }\n    }\n\n    if (storedTokenData.ip && ip && storedTokenData.ip !== ip) {\n      return { valid: false, error: 'IP address mismatch' }\n    }\n\n    return { valid: true }\n  } catch (error) {\n    console.error('CSRF validation error:', error)\n    return { valid: false, error: 'Token validation failed' }\n  }\n}\n\n/**\n * Extract session ID from request\n */\nfunction getSessionId(request: NextRequest): string | null {\n  // Try to get session ID from Supabase session\n  const authCookie = request.cookies.get('sb-access-token')?.value\n  if (authCookie) {\n    // Use a simple hash of the auth token as session ID for privacy\n    let hash = 0\n    for (let i = 0; i < authCookie.length; i++) {\n      const char = authCookie.charCodeAt(i)\n      hash = ((hash << 5) - hash) + char\n      hash = hash & hash\n    }\n    return Math.abs(hash).toString(16).padStart(32, '0').substring(0, 32)\n  }\n\n  // Fallback to a combination of IP and User-Agent\n  const ip = request.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || \n             request.headers.get('x-real-ip') || \n             request.ip || \n             'unknown'\n  const userAgent = request.headers.get('user-agent') || 'unknown'\n  \n  // Simple hash for session ID\n  const data = `${ip}:${userAgent}`\n  let hash = 0\n  for (let i = 0; i < data.length; i++) {\n    const char = data.charCodeAt(i)\n    hash = ((hash << 5) - hash) + char\n    hash = hash & hash\n  }\n  return Math.abs(hash).toString(16).padStart(32, '0').substring(0, 32)\n}\n\n/**\n * Middleware for CSRF protection\n */\nexport async function csrfProtection(\n  request: NextRequest,\n  config: Partial<CSRFConfig> = defaultConfig\n): Promise<{ success: boolean; error?: string; token?: string }> {\n  const finalConfig = { ...defaultConfig, ...config } as CSRFConfig\n  const method = request.method\n  \n  // Skip CSRF protection for safe methods\n  if (['GET', 'HEAD', 'OPTIONS'].includes(method)) {\n    const sessionId = getSessionId(request)\n    if (!sessionId) {\n      return { success: false, error: 'Unable to establish session' }\n    }\n\n    // Generate token for safe methods to be used in subsequent requests\n    const userAgent = request.headers.get('user-agent') || undefined\n    const ip = request.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || \n               request.headers.get('x-real-ip') || \n               request.ip || \n               undefined\n    \n    const token = createCSRFToken(sessionId, finalConfig, userAgent, ip)\n    return { success: true, token }\n  }\n\n  // Validate CSRF token for unsafe methods\n  const sessionId = getSessionId(request)\n  if (!sessionId) {\n    return { success: false, error: 'Unable to establish session' }\n  }\n\n  // Get token from header or form data\n  let token = request.headers.get(finalConfig.headerName)\n  \n  if (!token) {\n    // Try to get token from form data or JSON body\n    const contentType = request.headers.get('content-type')\n    if (contentType?.includes('application/x-www-form-urlencoded')) {\n      const formData = await request.formData()\n      token = formData.get('csrf_token') as string\n    } else if (contentType?.includes('application/json')) {\n      try {\n        const body = await request.json()\n        token = body.csrf_token\n      } catch {\n        // Ignore JSON parsing errors\n      }\n    }\n  }\n\n  if (!token) {\n    return { success: false, error: 'CSRF token missing' }\n  }\n\n  const userAgent = request.headers.get('user-agent') || undefined\n  const ip = request.headers.get('x-forwarded-for')?.split(',')[0]?.trim() || \n             request.headers.get('x-real-ip') || \n             request.ip || \n             undefined\n\n  const validation = validateCSRFToken(sessionId, token, finalConfig, userAgent, ip)\n  \n  if (!validation.valid) {\n    return { success: false, error: validation.error }\n  }\n\n  return { success: true }\n}\n\n/**\n * Create CSRF protection middleware for API routes\n */\nexport function withCSRFProtection(config?: Partial<CSRFConfig>) {\n  const finalConfig = { ...defaultConfig, ...config }\n\n  return function (handler: Function) {\n    return async function (request: NextRequest, ...args: any[]) {\n      const protection = await csrfProtection(request, finalConfig)\n      \n      if (!protection.success) {\n        return new Response(\n          JSON.stringify({\n            error: 'CSRF Protection Failed',\n            message: protection.error\n          }),\n          {\n            status: 403,\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }\n        )\n      }\n\n      // Add CSRF token to response headers for GET requests\n      const response = await handler(request, ...args)\n      \n      if (request.method === 'GET' && protection.token && response instanceof Response) {\n        response.headers.set('X-CSRF-Token', protection.token)\n      }\n      \n      return response\n    }\n  }\n}\n\n/**\n * Client-side helper to get CSRF token\n */\nexport function getCSRFTokenFromResponse(response: Response): string | null {\n  return response.headers.get('X-CSRF-Token')\n}\n\n/**\n * Generate CSRF token for forms\n */\nexport async function generateCSRFTokenForForm(sessionId?: string): Promise<string> {\n  if (!sessionId) {\n    // Generate a temporary session ID if none provided\n    sessionId = generateSecureToken(32)\n  }\n  \n  return createCSRFToken(sessionId, defaultConfig)\n}\n\n/**\n * Cleanup function for graceful shutdown\n */\nexport function cleanup(): void {\n  tokenStore.destroy()\n}\n\n/**\n * Double Submit Cookie pattern implementation\n */\nexport class DoubleSubmitCSRF {\n  private config: CSRFConfig\n\n  constructor(config: Partial<CSRFConfig> = {}) {\n    this.config = { ...defaultConfig, ...config }\n  }\n\n  generateToken(): string {\n    return generateSecureToken(this.config.tokenLength)\n  }\n\n  validateDoubleSubmit(cookieToken: string, headerToken: string): boolean {\n    if (!cookieToken || !headerToken) {\n      return false\n    }\n\n    // Simple comparison - not timing-safe but works in Edge Runtime\n    return cookieToken === headerToken\n  }\n\n  setCookie(response: Response, token: string): void {\n    const cookieValue = `${this.config.cookieName}=${token}; ` +\n      `HttpOnly; Secure=${this.config.secure}; ` +\n      `SameSite=${this.config.sameSite}; ` +\n      `Max-Age=${Math.floor(this.config.sessionTimeout / 1000)}`\n    \n    response.headers.append('Set-Cookie', cookieValue)\n  }\n}\n\nexport default {\n  createCSRFToken,\n  validateCSRFToken,\n  csrfProtection,\n  withCSRFProtection,\n  generateCSRFTokenForForm,\n  cleanup,\n  DoubleSubmitCSRF\n}","usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/security/headers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/security/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/security/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/security/monitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/security/rate-limiter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/security/test-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/security/test-middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/security/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/services/export-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/services/llm-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/supabase/client-browser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/supabase/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/supabase/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/supabase/server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/test-utils/rate-limit-handler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/types/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/types/llm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/lib/utils/llm-validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/manual-auth-test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/mocks/api/auth-service.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/mocks/api/database-service.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/mocks/api/enhanced-mock-server.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/mocks/config/mock-server-config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/mocks/data/test-seeds.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/mocks/middleware/auth-middleware.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/mocks/scripts/start-mock-server.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/next.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/playwright.config.auth-test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/playwright.config.e2e.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/playwright.config.epipe-fix.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/playwright.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/playwright.config.simple.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/playwright.config.simple.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/playwright.config.stable.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/playwright.config.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/playwright.config.working.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/run-e2e-test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/scripts/add-dynamic-exports.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/scripts/ci-test-config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/scripts/generate-secrets.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/scripts/run-playwright-epipe-safe.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/scripts/run-tests.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/scripts/security-scan.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/scripts/setup-deployment.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/scripts/test-security-setup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/scripts/test-supabase-mcp.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/scripts/validate-deployment.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/scripts/validate-e2e-environment.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/scripts/validate-epipe-config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/scripts/validate-playwright-config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/scripts/validate-security-setup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/scripts/validate-supabase-mcp-config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/scripts/validate-test-infrastructure.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/simple-e2e-test.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/supabase/test-env.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/supabase/test-setup.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/supabase/test-utils.mock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/supabase/test-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/test-auth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/test-config.working.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/test-console-errors.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/test-infrastructure/AuthenticationFlowCoordinator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/test-infrastructure/MockIntegrationManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/test-infrastructure/ServiceHealthMonitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/test-infrastructure/TestInfrastructureManager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/test-mock-auth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/test-mock-server.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/test-supabase-auth.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/types/api.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/types/cookie-fix.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/types/global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/types/jest-dom.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/types/next.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/types/test.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/validate-auth-integration.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspaces/ai-readiness/ai-readiness-frontend/verify-auth-fixes.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
