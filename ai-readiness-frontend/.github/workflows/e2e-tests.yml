name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to test (all, chromium, firefox, webkit)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit
      environment:
        description: 'Test environment'
        required: false
        default: 'test'
        type: choice
        options:
          - test
          - staging

env:
  NODE_VERSION: '18'
  SUPABASE_CLI_VERSION: 'latest'

jobs:
  # Job to run E2E tests
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        browser: ${{ github.event.inputs.browser == 'all' && fromJson('["chromium", "firefox", "webkit"]') || fromJson(format('["{0}"]', github.event.inputs.browser || 'chromium')) }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Supabase CLI
        run: |
          npm install -g @supabase/cli@${{ env.SUPABASE_CLI_VERSION }}
          supabase --version

      - name: Setup test environment
        run: |
          # Copy test environment configuration
          cp .env.test .env.local
          
          # Create necessary directories
          mkdir -p playwright/.auth
          mkdir -p test-results
          mkdir -p playwright-report

      - name: Start Supabase
        run: |
          supabase start
          supabase status

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: test

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Run Playwright tests
        run: npx playwright test --config playwright.config.test.ts --project=${{ matrix.browser }}
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          PLAYWRIGHT_TEST_TIMEOUT: 30000
          PLAYWRIGHT_EXPECT_TIMEOUT: 5000

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}
          path: test-results/
          retention-days: 30

      - name: Upload Videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-videos-${{ matrix.browser }}
          path: test-results/
          retention-days: 7

      - name: Collect logs
        if: failure()
        run: |
          echo "=== Supabase Logs ==="
          supabase logs
          echo "=== Docker Logs ==="
          docker logs $(docker ps -q) || true

      - name: Cleanup
        if: always()
        run: |
          supabase stop
          docker system prune -f

  # Job to run security tests
  security-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run security tests
        run: npm run test:security

  # Job to run performance tests
  performance-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: cp .env.test .env.local

      - name: Install Supabase CLI
        run: npm install -g @supabase/cli@${{ env.SUPABASE_CLI_VERSION }}

      - name: Start Supabase
        run: supabase start

      - name: Build application
        run: npm run build

      - name: Install Playwright
        run: npx playwright install chromium

      - name: Run performance tests
        run: npm run test:performance

      - name: Cleanup
        if: always()
        run: supabase stop

  # Aggregate results
  test-results:
    runs-on: ubuntu-latest
    needs: [e2e-tests, security-tests, performance-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts

      - name: Generate test summary
        run: |
          echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## E2E Tests" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "✅ E2E tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ E2E tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Security Tests" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.security-tests.result }}" == "success" ]; then
            echo "✅ Security tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Performance Tests" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.performance-tests.result }}" == "success" ]; then
            echo "✅ Performance tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Performance tests failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              e2e: '${{ needs.e2e-tests.result }}',
              security: '${{ needs.security-tests.result }}',
              performance: '${{ needs.performance-tests.result }}'
            };
            
            const getStatusIcon = (status) => status === 'success' ? '✅' : '❌';
            
            const comment = `## 🧪 Test Results
            
            | Test Type | Status |
            |-----------|--------|
            | E2E Tests | ${getStatusIcon(results.e2e)} ${results.e2e} |
            | Security Tests | ${getStatusIcon(results.security)} ${results.security} |
            | Performance Tests | ${getStatusIcon(results.performance)} ${results.performance} |
            
            Detailed reports are available in the workflow artifacts.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });