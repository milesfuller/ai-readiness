name: Comprehensive Test and Deploy Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

# Prevent concurrent runs on same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_WORKERS: 2
  COVERAGE_THRESHOLD: 80

jobs:
  # Phase 1: Pre-flight validation
  validate:
    name: 🔍 Pre-flight Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
      environment: ${{ steps.deploy-check.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔒 Environment validation
        run: |
          echo "Validating environment configuration..."
          node -e "
            const required = ['SUPABASE_URL', 'SUPABASE_ANON_KEY'];
            const missing = required.filter(key => !process.env[key]);
            if (missing.length > 0) {
              console.error('❌ Missing required env vars:', missing);
              process.exit(1);
            }
            console.log('✅ Environment validation passed');
          "
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}

      - name: 🏗️ Component boundary validation
        run: npm run validate:components:ci
        continue-on-error: false

      - name: 📋 TypeScript validation
        run: npm run type-check

      - name: 🎨 Code style validation
        run: npm run lint -- --max-warnings 0

      - name: 🚀 Deployment check
        id: deploy-check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "environment=review" >> $GITHUB_OUTPUT
          fi

  # Phase 2: Parallel test execution
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 15
    
    strategy:
      matrix:
        test-group: [components, utils, hooks, services]

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run ${{ matrix.test-group }} tests
        run: |
          case "${{ matrix.test-group }}" in
            "components")
              npm run test:unit -- --testPathPattern="__tests__/components" --coverage --coverageDirectory="coverage/components"
              ;;
            "utils")
              npm run test:unit -- --testPathPattern="__tests__/lib|__tests__/utils" --coverage --coverageDirectory="coverage/utils"
              ;;
            "hooks")
              npm run test:unit -- --testPathPattern="__tests__/.*hooks" --coverage --coverageDirectory="coverage/hooks"
              ;;
            "services")
              npm run test:unit -- --testPathPattern="__tests__/.*service" --coverage --coverageDirectory="coverage/services"
              ;;
          esac
        env:
          CI: true
          NODE_ENV: test

      - name: Upload coverage for ${{ matrix.test-group }}
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.test-group }}
          path: coverage/${{ matrix.test-group }}
          retention-days: 1

  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Dependency audit
        run: |
          npm audit --audit-level high
          if [ $? -ne 0 ]; then
            echo "❌ High severity vulnerabilities found!"
            exit 1
          fi

      - name: 🛡️ Security tests
        run: npm run test:security-tests

      - name: 🔐 Security scan
        run: npm run test:security

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 20

    services:
      postgres:
        image: supabase/postgres:15.1.0.147
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🗄️ Setup test database
        run: |
          npm run supabase:start &
          sleep 15
          npm run supabase:reset
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres

      - name: 🔄 Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: 🧪 Database integration tests
        run: npm run test:supabase
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres

  e2e-tests:
    name: 🎭 End-to-End Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, security-tests]
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps chromium webkit

      - name: 🚀 Setup test environment
        run: |
          npm run infra:setup
          sleep 10
          npm run infra:validate
        env:
          NODE_ENV: test
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: http://localhost:3000

      - name: 🎯 Run critical E2E tests (EPIPE-safe)
        run: npm run test:e2e:epipe-safe -- --reporter=json --output-dir=test-results
        env:
          CI: true
          NODE_ENV: test
          PLAYWRIGHT_WORKERS: ${{ env.PLAYWRIGHT_WORKERS }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: 🧱 Component boundary tests
        run: npm run test:boundaries
        env:
          CI: true

      - name: 📊 Upload E2E test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

      - name: 🧹 Cleanup test environment
        if: always()
        run: npm run infra:stop

  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: ⚡ Run performance tests
        run: |
          npm run test:performance
          node -e "
            const stats = require('./performance-results.json');
            if (stats.fcp > 2000) {
              console.error('❌ FCP too slow:', stats.fcp + 'ms');
              process.exit(1);
            }
            if (stats.lcp > 4000) {
              console.error('❌ LCP too slow:', stats.lcp + 'ms');
              process.exit(1);
            }
            console.log('✅ Performance benchmarks passed');
          " 2>/dev/null || echo "⚠️ Performance validation skipped (no results file)"
        env:
          CI: true
          NODE_ENV: production

  # Phase 3: Build and quality gates
  build-validation:
    name: 🏗️ Build Validation
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-tests]
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 📊 Aggregate coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          merge-multiple: true
          path: coverage-combined/

      - name: 📈 Coverage validation
        run: |
          npm run coverage:clean
          mkdir -p coverage
          
          # Merge coverage reports
          for dir in coverage-combined/*/; do
            if [ -f "$dir/lcov.info" ]; then
              cat "$dir/lcov.info" >> coverage/lcov.info
            fi
          done
          
          # Validate coverage thresholds
          npm run test:coverage -- --passWithNoTests --coverageReporters=text-summary 2>&1 | tee coverage-summary.txt
          
          COVERAGE=$(grep "All files" coverage-summary.txt | awk '{print $10}' | sed 's/%//' || echo "0")
          echo "Coverage: ${COVERAGE}%"
          
          if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below threshold $COVERAGE_THRESHOLD%"
            exit 1
          fi
          
          echo "✅ Coverage validation passed: $COVERAGE%"

      - name: 🏗️ Production build
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: 📦 Build artifact validation
        run: |
          echo "Validating build artifacts..."
          
          # Check if build directory exists
          if [ ! -d ".next" ]; then
            echo "❌ Build directory not found"
            exit 1
          fi
          
          # Check critical build files
          CRITICAL_FILES=(".next/static" ".next/server" ".next/BUILD_ID")
          for file in "${CRITICAL_FILES[@]}"; do
            if [ ! -e "$file" ]; then
              echo "❌ Critical build file missing: $file"
              exit 1
            fi
          done
          
          # Check bundle size
          BUNDLE_SIZE=$(du -s .next | cut -f1)
          MAX_BUNDLE_SIZE=51200  # 50MB in KB
          
          if [ "$BUNDLE_SIZE" -gt "$MAX_BUNDLE_SIZE" ]; then
            echo "❌ Bundle size too large: ${BUNDLE_SIZE}KB (max: ${MAX_BUNDLE_SIZE}KB)"
            exit 1
          fi
          
          echo "✅ Build validation passed"
          echo "📦 Bundle size: ${BUNDLE_SIZE}KB"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          retention-days: 1

  # Phase 4: Pre-deployment validation
  pre-deployment-validation:
    name: 🚀 Pre-deployment Validation
    runs-on: ubuntu-latest
    needs: [build-validation]
    if: needs.validate.outputs.should-deploy == 'true'
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .next/

      - name: 🏥 Health check validation
        run: |
          echo "Running health checks..."
          
          # Start the application in background
          npm start &
          APP_PID=$!
          
          # Wait for app to start
          sleep 10
          
          # Health check endpoints
          ENDPOINTS=(
            "http://localhost:3000/api/health"
            "http://localhost:3000/api/check-env"
          )
          
          for endpoint in "${ENDPOINTS[@]}"; do
            echo "Checking $endpoint..."
            response=$(curl -s -o /dev/null -w "%{http_code}" "$endpoint" || echo "000")
            
            if [ "$response" != "200" ]; then
              echo "❌ Health check failed for $endpoint: HTTP $response"
              kill $APP_PID 2>/dev/null || true
              exit 1
            fi
            
            echo "✅ $endpoint: HTTP $response"
          done
          
          # Stop the application
          kill $APP_PID 2>/dev/null || true
          
          echo "✅ All health checks passed"
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          PORT: 3000

      - name: 🔍 Security deployment scan
        run: |
          echo "Running security deployment scan..."
          
          # Check for exposed secrets in build
          if grep -r "sk-" .next/ 2>/dev/null; then
            echo "❌ Potential API keys found in build"
            exit 1
          fi
          
          # Check environment variable usage
          if grep -r "process\.env\." .next/server/ 2>/dev/null | grep -v "NEXT_PUBLIC_"; then
            echo "⚠️ Server-side environment variables found in build"
          fi
          
          echo "✅ Security scan passed"

      - name: 🎭 Smoke test suite
        run: |
          npm run test:e2e:epipe-safe -- --grep "smoke" --reporter=dot
        env:
          BASE_URL: http://localhost:3000
          NODE_ENV: production

  # Phase 5: Deploy to environment
  deploy:
    name: 🚀 Deploy to ${{ needs.validate.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [validate, pre-deployment-validation]
    if: needs.validate.outputs.should-deploy == 'true'
    timeout-minutes: 15
    environment: ${{ needs.validate.outputs.environment }}

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .next/

      - name: Deploy to ${{ needs.validate.outputs.environment }}
        run: |
          echo "🚀 Deploying to ${{ needs.validate.outputs.environment }}..."
          
          # This is where you would integrate with your deployment service
          # Examples:
          # - Vercel: npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
          # - Netlify: npx netlify deploy --prod --auth=${{ secrets.NETLIFY_AUTH_TOKEN }}
          # - Custom: rsync, kubectl, terraform, etc.
          
          echo "✅ Deployment to ${{ needs.validate.outputs.environment }} completed!"
          echo "🌐 Application URL: https://your-app-${{ needs.validate.outputs.environment }}.vercel.app"

  # Phase 6: Post-deployment validation
  post-deployment-validation:
    name: ✅ Post-deployment Validation
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: needs.validate.outputs.should-deploy == 'true'
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏥 Production health checks
        run: |
          # Replace with your actual production URL
          PROD_URL="https://your-app-${{ needs.validate.outputs.environment }}.vercel.app"
          
          echo "Running post-deployment health checks on $PROD_URL..."
          
          ENDPOINTS=(
            "$PROD_URL"
            "$PROD_URL/api/health"
            "$PROD_URL/dashboard"
          )
          
          for endpoint in "${ENDPOINTS[@]}"; do
            echo "Checking $endpoint..."
            response=$(curl -s -o /dev/null -w "%{http_code}" "$endpoint" --connect-timeout 10 || echo "000")
            
            if [ "$response" != "200" ]; then
              echo "❌ Post-deployment check failed for $endpoint: HTTP $response"
              exit 1
            fi
            
            echo "✅ $endpoint: HTTP $response"
          done
          
          echo "✅ All post-deployment checks passed"

      - name: 🎭 Production smoke tests
        run: |
          # Run a subset of critical E2E tests against production
          BASE_URL="https://your-app-${{ needs.validate.outputs.environment }}.vercel.app" \
          npm run test:e2e:epipe-safe -- --grep "smoke|critical" --reporter=dot
        continue-on-error: true # Don't fail deployment for E2E issues

  # Summary job for status checks
  test-and-deploy-summary:
    name: 📊 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [validate, unit-tests, security-tests, integration-tests, e2e-tests, performance-tests, build-validation, pre-deployment-validation, deploy, post-deployment-validation]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## 🚀 Pipeline Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job status table
          echo "| Phase | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | ${{ needs.validate.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Validation | ${{ needs.build-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment | ${{ needs.deploy.result == 'success' && '🚀 Deployed' || needs.deploy.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quality Gates" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage Threshold**: ${{ env.COVERAGE_THRESHOLD }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Component Boundaries**: Validated" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance**: Benchmarked" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.validate.outputs.should-deploy }}" == "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🌐 Deployment Information" >> $GITHUB_STEP_SUMMARY
            echo "- **Environment**: ${{ needs.validate.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "- **URL**: https://your-app-${{ needs.validate.outputs.environment }}.vercel.app" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check overall status
        run: |
          # Fail the job if any critical phase failed
          if [ "${{ needs.validate.result }}" != "success" ] || \
             [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.security-tests.result }}" != "success" ] || \
             [ "${{ needs.integration-tests.result }}" != "success" ] || \
             [ "${{ needs.build-validation.result }}" != "success" ]; then
            echo "❌ Pipeline failed - critical phase unsuccessful"
            exit 1
          fi
          
          echo "✅ Pipeline completed successfully"