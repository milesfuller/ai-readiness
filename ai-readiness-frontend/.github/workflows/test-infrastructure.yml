name: Test Infrastructure CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - security
      environment:
        description: 'Environment to test against'
        required: false
        default: 'test'
        type: choice
        options:
          - test
          - staging
          - production

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  setup-test-infrastructure:
    name: Setup Test Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      test-environment: ${{ steps.setup.outputs.environment }}
      supabase-url: ${{ steps.setup.outputs.supabase-url }}
      infrastructure-ready: ${{ steps.health-check.outputs.ready }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Docker Layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install -g @supabase/cli@1.x

      - name: Setup Test Environment
        id: setup
        run: |
          # Copy test environment configuration
          cp .env.test .env.local
          
          # Set GitHub Actions specific variables
          echo "CI=true" >> .env.local
          echo "GITHUB_ACTIONS=true" >> .env.local
          
          # Generate unique ports for parallel runs
          echo "KONG_HTTP_PORT=54321" >> .env.local
          echo "KONG_HTTPS_PORT=54322" >> .env.local
          echo "STUDIO_PORT=54323" >> .env.local
          echo "POSTGRES_PORT=54322" >> .env.local
          echo "INBUCKET_PORT=54324" >> .env.local
          
          echo "environment=test" >> $GITHUB_OUTPUT
          echo "supabase-url=http://localhost:54321" >> $GITHUB_OUTPUT

      - name: Start Supabase Test Infrastructure
        run: |
          # Start Supabase services
          docker-compose -f docker-compose.test.yml up -d --build
          
          # Wait for services to be healthy
          echo "Waiting for services to start..."
          timeout 300 bash -c 'until docker-compose -f docker-compose.test.yml ps | grep -q "healthy"; do sleep 5; done'

      - name: Health Check Infrastructure
        id: health-check
        run: |
          # Wait for all services to be ready
          sleep 30
          
          # Check database connection
          timeout 60 bash -c 'until pg_isready -h localhost -p 54322 -U postgres; do sleep 2; done'
          
          # Check Kong API Gateway
          timeout 60 bash -c 'until curl -f http://localhost:54321/health; do sleep 2; done' || true
          
          # Check Supabase Studio
          timeout 60 bash -c 'until curl -f http://localhost:54323; do sleep 2; done' || true
          
          # Verify auth service
          curl -f http://localhost:54321/auth/v1/health || echo "Auth health check failed"
          
          # Verify REST API
          curl -f http://localhost:54321/rest/v1/ \
            -H "apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0" \
            || echo "REST API health check failed"
          
          echo "ready=true" >> $GITHUB_OUTPUT

      - name: Run Database Migrations
        run: |
          # Apply any existing migrations
          if [ -d "supabase/migrations" ] && [ "$(ls -A supabase/migrations)" ]; then
            for migration in supabase/migrations/*.sql; do
              if [ -f "$migration" ]; then
                echo "Applying migration: $migration"
                PGPASSWORD=test_postgres_password psql -h localhost -p 54322 -U postgres -d postgres -f "$migration"
              fi
            done
          fi

      - name: Seed Test Data
        run: |
          # Apply test data seeds
          if [ -d "supabase/seeds" ] && [ "$(ls -A supabase/seeds)" ]; then
            for seed in supabase/seeds/*.sql; do
              if [ -f "$seed" ]; then
                echo "Applying seed: $seed"
                PGPASSWORD=test_postgres_password psql -h localhost -p 54322 -U postgres -d postgres -f "$seed"
              fi
            done
          fi

      - name: Export Infrastructure Logs
        if: failure()
        run: |
          echo "=== Docker Compose Services ==="
          docker-compose -f docker-compose.test.yml ps
          
          echo "=== Docker Compose Logs ==="
          docker-compose -f docker-compose.test.yml logs --tail=100
          
          echo "=== Container Health Status ==="
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

      - name: Upload Infrastructure Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-logs
          path: |
            docker-compose.test.yml
            .env.local
          retention-days: 7

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup-test-infrastructure
    if: ${{ needs.setup-test-infrastructure.outputs.infrastructure-ready == 'true' }}
    timeout-minutes: 15

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Setup Test Infrastructure
        run: |
          cp .env.test .env.local
          echo "CI=true" >> .env.local
          docker-compose -f docker-compose.test.yml up -d
          timeout 120 bash -c 'until pg_isready -h localhost -p 54322 -U postgres; do sleep 2; done'

      - name: Run Unit Tests
        run: |
          npm run test:unit -- --coverage --watchAll=false
        env:
          NODE_ENV: test

      - name: Upload Unit Test Coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: setup-test-infrastructure
    if: ${{ needs.setup-test-infrastructure.outputs.infrastructure-ready == 'true' }}
    timeout-minutes: 20

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Setup Test Infrastructure
        run: |
          cp .env.test .env.local
          echo "CI=true" >> .env.local
          docker-compose -f docker-compose.test.yml up -d
          timeout 120 bash -c 'until pg_isready -h localhost -p 54322 -U postgres; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:54321/auth/v1/health; do sleep 2; done' || true

      - name: Run Integration Tests
        run: |
          npm run test:integration -- --coverage --watchAll=false
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:test_postgres_password@localhost:54322/postgres

      - name: Upload Integration Test Results
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: coverage/
          retention-days: 30

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: setup-test-infrastructure
    if: ${{ needs.setup-test-infrastructure.outputs.infrastructure-ready == 'true' }}
    timeout-minutes: 30

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npx playwright install --with-deps

      - name: Setup Test Infrastructure
        run: |
          cp .env.test .env.local
          echo "CI=true" >> .env.local
          echo "PLAYWRIGHT_BASE_URL=http://localhost:3000" >> .env.local
          docker-compose -f docker-compose.test.yml up -d

      - name: Wait for Infrastructure
        run: |
          timeout 180 bash -c 'until pg_isready -h localhost -p 54322 -U postgres; do sleep 2; done'
          timeout 120 bash -c 'until curl -f http://localhost:54321/auth/v1/health; do sleep 2; done' || true
          sleep 30

      - name: Build Application
        run: |
          npm run build
        env:
          NODE_ENV: test

      - name: Start Application
        run: |
          npm start &
          timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        env:
          NODE_ENV: test

      - name: Run E2E Tests
        run: |
          npm run test:e2e
        env:
          NODE_ENV: test
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: setup-test-infrastructure
    if: ${{ needs.setup-test-infrastructure.outputs.infrastructure-ready == 'true' }}
    timeout-minutes: 15

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run Security Audit
        run: |
          npm audit --audit-level=moderate
          npm run test:security
        continue-on-error: true

      - name: Upload Security Test Results
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: security-audit-report.md
          retention-days: 30

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: setup-test-infrastructure
    if: ${{ needs.setup-test-infrastructure.outputs.infrastructure-ready == 'true' }}
    timeout-minutes: 20

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Setup Test Infrastructure
        run: |
          cp .env.test .env.local
          echo "CI=true" >> .env.local
          docker-compose -f docker-compose.test.yml up -d
          timeout 120 bash -c 'until pg_isready -h localhost -p 54322 -U postgres; do sleep 2; done'

      - name: Run Performance Tests
        run: |
          npm run test:performance
        env:
          NODE_ENV: test

  cleanup-infrastructure:
    name: Cleanup Test Infrastructure
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-tests, performance-tests]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cleanup Docker Resources
        run: |
          # Stop and remove containers
          docker-compose -f docker-compose.test.yml down -v --remove-orphans || true
          
          # Clean up dangling images and volumes
          docker system prune -f || true
          docker volume prune -f || true

      - name: Generate Test Summary
        run: |
          echo "# Test Infrastructure Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "## Infrastructure Setup" >> test-summary.md
          echo "- ✅ Docker Compose configuration created" >> test-summary.md
          echo "- ✅ Supabase test instance configured" >> test-summary.md
          echo "- ✅ Test environment variables set" >> test-summary.md
          echo "- ✅ CI/CD pipeline executed" >> test-summary.md
          echo "" >> test-summary.md
          echo "## Test Results" >> test-summary.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-summary.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-summary.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-summary.md
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> test-summary.md
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-summary.md

      - name: Upload Test Summary
        uses: actions/upload-artifact@v4
        with:
          name: test-infrastructure-summary
          path: test-summary.md
          retention-days: 90