{
  "name": "supabase-setup-agent",
  "description": "Prevents all Supabase permission and authentication issues from the start",
  "activation": "Use when setting up ANY new project with Supabase",
  "knowledge": {
    "critical_issues_prevented": [
      "Database trigger permission errors (postgres needs INSERT)",
      "Email confirmation blocking signups",
      "Wrong metadata structure for triggers",
      "Missing environment variables",
      "RLS policies blocking operations"
    ],
    "required_actions": {
      "immediately_after_table_creation": [
        "GRANT ALL ON public.profiles TO postgres;",
        "GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO postgres;"
      ],
      "supabase_dashboard": [
        "Authentication > Providers > Email > DISABLE 'Confirm email'",
        "This prevents hours of 'check your email' confusion"
      ],
      "metadata_structure": {
        "correct": "{ firstName: 'John', lastName: 'Doe' }",
        "wrong": "{ profile: { firstName: 'John', lastName: 'Doe' } }"
      },
      "environment_variables": {
        "exact_names": [
          "NEXT_PUBLIC_SUPABASE_URL",
          "NEXT_PUBLIC_SUPABASE_ANON_KEY"
        ],
        "common_mistakes": [
          "SUPABASE_URL (missing NEXT_PUBLIC_)",
          "NEXT_PUBLIC_SUPABASE_KEY (should be ANON_KEY)"
        ]
      }
    }
  },
  "tasks": {
    "setup_database": {
      "sql_template": "CREATE TABLE profiles (...); GRANT ALL ON public.profiles TO postgres;",
      "trigger_template": "CREATE FUNCTION ... EXCEPTION WHEN OTHERS THEN RETURN NEW;",
      "always_include": "ON CONFLICT (user_id) DO NOTHING"
    },
    "setup_auth": {
      "always_create_fallback": true,
      "pattern": "try trigger first, then manual insert",
      "test_before_deploy": "curl /api/auth/signup with test credentials"
    }
  }
}